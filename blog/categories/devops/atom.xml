<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DevOps | gongmingqm10]]></title>
  <link href="http://www.gongmingqm10.net/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://www.gongmingqm10.net/"/>
  <updated>2016-03-19T15:40:06+08:00</updated>
  <id>http://www.gongmingqm10.net/</id>
  <author>
    <name><![CDATA[Gong Ming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DevOps Session 2]]></title>
    <link href="http://www.gongmingqm10.net/blog/2015/09/16/devops-session-2/"/>
    <updated>2015-09-16T14:24:51+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2015/09/16/devops-session-2</id>
    <content type="html"><![CDATA[<p>本次课主要学习用户权限概念，为了保证系统的安全性，把所有用户赋予最高权限是极不安全的做法。特别是安装 Tomcat 和 Jenkins 时，使用 sudo 用户来安装很容易被黑客攻击。</p>

<h2>课前准备</h2>

<p>课前准备阶段，我们需要完成简单的作业：</p>

<ol>
<li>使用 tomcat 用户安装 tomcat7 服务器；</li>
<li>使用 jenkins 用户安装 jenkins，jenkins 可以放在tomcat7中运行；</li>
<li>从本机浏览器中访问 jenkins 主页；</li>
</ol>


<!-- more -->


<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/tomcat.png" width="500" alt="Tomcat" /></p>

<h3>创建用户</h3>

<p>我们需要分别创建<code>jenkins</code>和<code>tomcat</code>用户。出于安全的考虑，这两个用户不应该有管理员权限。创建用户命令如下：</p>

<p>```
sudo adduser jenkins
&hellip;</p>

<p>```</p>

<p>安装提示，进一步设置 jenkins 用户的密码，设置完成后，应该可以通过 <code>su jenkins</code> 切换到 jenkins 用户验证用户是否创建成功。</p>

<h3>安装 Java</h3>

<p>直接在主用户下面使用 <code>apt-get</code>安装 Java7，命令如下：</p>

<p><code>
sudo apt-get update
sudo apt-get install openjdk-7-jdk
</code></p>

<p>如果想了解更多，请查看文章：<a href="http://stackoverflow.com/questions/16263556/installing-java-7-on-ubuntu">Install Java7 on Ubuntu</a></p>

<h3>安装 Tomcat</h3>

<p>apt 可以直接安装 Tomcat，我们这里从源码安装 tomcat7。</p>

<p>首先需要从 <a href="https://tomcat.apache.org/download-70.cgi">Tomcat</a> 官网获得源码包下载地址：</p>

<p><code>
http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.64/bin/apache-tomcat-7.0.64.tar.gz
</code></p>

<p>下载后，我们需要解压 tomcat，然后将 tomcat7 放到 <code>/opt/</code>目录中。如果在 tomcat 用户下操作，发现对 opt 文件夹没有写权限。所以我们需要在 <code>/opt</code> 中添加 tomcat7 文件夹，该文件夹所有者为 <code>tomcat</code>。</p>

<h4>新建 /opt/tomcat7 目录</h4>

<p>登录具有 sudo 权限的用户 <code>ming</code>，<code>sudo mkdir tomcat7</code>，然后通过 <code>sudo chown tomcat tomcat7/</code> 将 tomcat 用户设置为 <code>/opt/tomcat7</code>目录的所有者。</p>

<p>```
tomcat@ubuntu:/opt$ su ming
Password:
ming@ubuntu:/opt$ sudo mkdir tomcat7
ming@ubuntu:/opt$ ls -l
total 4
drwxr-xr-x 2 root root 4096 Sep 16 15:51 tomcat7
ming@ubuntu:/opt$ sudo chown tomcat tomcat7/
ming@ubuntu:/opt$ ls -l
total 4
drwxr-xr-x 2 tomcat root 4096 Sep 16 15:51 tomcat7
ming@ubuntu:/opt$</p>

<p>```</p>

<p>文件新建完成后，切换回 tomcat 用户，开始解压 tomcat7，然后移动 tomcat7 至 <code>/opt</code> 目录下：</p>

<p><code>
tar xvzf apache-tomcat-7.0.64.tar.gz
mv apache-tomcat-7.0.64/* /opt/tomcat7
</code></p>

<p>然后，启动 tomcat7</p>

<p>```
/opt/tomcat7/bin/startup.sh</p>

<p>```</p>

<p>访问 <code>http://192.168.56.101:8080/</code> 如果成功访问到 Tomcat 主页面，则表示 Tomcat 安装成功。</p>

<h3>Jenkins 在 Tomcat 中运行</h3>

<p>如果 Tomcat 已经运行成功，并且我们成功下载 jenkins.war。</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/jenkins.png" width="500" alt="Jenkins" /></p>

<h2>用户权限与控制</h2>

<p>Linux 有着完善的用户管理，不同的用户大致分为如下几组：</p>

<ul>
<li>文件拥有者</li>
<li>群组</li>
<li>其他人</li>
</ul>


<h4>passwd</h4>

<p>用来记录文件的基本属性</p>

<p><code>
cat /etc/passwd
</code></p>

<h3>将 jenkins 和 tomcat 用户添加到 DevOps 群组中</h3>

<p>首先新建群组，然后将用户添加到群组中。</p>

<p><code>
ming@ubuntu:/$ sudo groupadd DevOps
ming@ubuntu:/$ sudo usermod -G DevOps jenkins
</code></p>

<h3>查看群组下所有用户</h3>

<p>为了验证我们上述的用户添加组操作已经成功，需要查看群组下所有用户：</p>

<p><code>
cat /etc/group
</code></p>

<h3>给 DevOps 设置管理员 ming</h3>

<p>使用 gpasswd 命令来设置：<code>sudo gpasswd －A ming DevOps</code></p>

<p>```
ming@ubuntu:/$ sudo gpasswd &mdash;help
Usage: gpasswd [option] GROUP</p>

<p>Options:
  -a, &mdash;add USER                add USER to GROUP
  -d, &mdash;delete USER             remove USER from GROUP
  -h, &mdash;help                    display this help message and exit
  -Q, &mdash;root CHROOT_DIR         directory to chroot into
  -r, &mdash;remove-password         remove the GROUP&rsquo;s password
  -R, &mdash;restrict                restrict access to GROUP to its members
  -M, &mdash;members USER,&hellip;        set the list of members of GROUP
  -A, &mdash;administrators ADMIN,&hellip;</p>

<pre><code>                            set the list of administrators for GROUP
</code></pre>

<p>Except for the -A and -M options, the options cannot be combined.
```</p>

<h2>文件权限</h2>

<p>以下列目录为例，查看该目录下面所有文件/文件夹的权限：</p>

<p><code>
ming@ubuntu:/$ ls -l
total 80
drwxr-xr-x   2 root root  4096 Sep 14 15:51 app
drwxr-xr-x   2 root root  4096 Sep 16 15:31 bin
drwxr-xr-x   3 root root  4096 Sep  7 17:30 boot
drwxr-xr-x  18 root root  4160 Sep 16 13:46 dev
drwxr-xr-x 107 root root  4096 Sep 16 19:43 etc
drwxr-xr-x   6 root root  4096 Sep 16 19:29 home
lrwxrwxrwx   1 root root    33 Sep  7 17:16 initrd.img -&gt; boot/initrd.img-3.19.0-15-generic
drwxr-xr-x  21 root root  4096 Sep  7 17:26 lib
drwxr-xr-x   2 root root  4096 Sep  7 17:16 lib64
drwx------   2 root root 16384 Sep  7 17:16 lost+found
drwxr-xr-x   3 root root  4096 Sep  7 17:16 media
drwxr-xr-x   2 root root  4096 Apr 18 05:34 mnt
drwxr-xr-x   3 root root  4096 Sep 16 15:51 opt
dr-xr-xr-x 103 root root     0 Sep 16 13:46 proc
drwx------   2 root root  4096 Sep  7 17:16 root
</code>
r(可读, 2<sup>2</sup>) w (可写, 2<sup>1</sup>) x (可执行, 2<sup>0</sup>)</p>

<p>第一个参数表述文件类型：文件夹、文件、链接等。</p>

<p>rwx(Owner) rwx(Group) rwx(Others)</p>

<h3>改变文件属性</h3>

<p>使用 usermod 将用户 jenkins 主目录设置为 <code>/devops/jenkins</code>：</p>

<p><code>
sudo usermod -m -d /devops/jenkins jenkins
</code></p>

<p>更改 <code>devops/jenkins</code> 和 <code>/devops/tomcat</code> 文件可以被 jenkins 和 tomcat 用户互相读：</p>

<p><code>
ming@ubuntu:/devops$ sudo chmod 740 jenkins
ming@ubuntu:/devops$ ls -l
total 8
drwxr----- 2 jenkins jenkins 4096 Sep 16 20:11 jenkins
drwxr-xr-x 5 tomcat  tomcat  4096 Sep 16 20:11 tomcat
</code></p>

<h2>参考</h2>

<p>如果你的 VirtualBox 虚拟机不能通过 SSH 登录，请参考 <a href="http://louisrli.github.io/blog/2012/08/30/virtualbox-ipv6-ssh/#.VflDXZ2qqkp">Enabling VirtualBox SSH on IPv6</a>.</p>

<p>Linux 命令大全之 passwd 命令：<a href="http://man.linuxde.net/passwd">http://man.linuxde.net/passwd</a></p>

<p>鸟哥的 Linux 账号管理与 ACL 权限设定：<a href="http://linux.vbird.org/linux_basic/0410accountmanager.php">http://linux.vbird.org/linux_basic/0410accountmanager.php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps Session 1]]></title>
    <link href="http://www.gongmingqm10.net/blog/2015/09/10/devops-session-1/"/>
    <updated>2015-09-10T22:09:55+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2015/09/10/devops-session-1</id>
    <content type="html"><![CDATA[<p>最近公司在组织DevOps培训，于是就有个这个系列的文章，作为培训笔记，作为以后参考。如果你还不知道DevOps概念，请参考<a href="https://zh.wikipedia.org/wiki/DevOps">Wikipedia</a>。</p>

<blockquote><p>DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。</p></blockquote>

<h2>课前准备</h2>

<p>因为需要使用一台Linux机器来作为测试主机，我们使用VirtualBox安装<a href="http://releases.ubuntu.com/15.04/ubuntu-15.04-server-amd64.iso">Ubuntu Server</a>。安装完成之后，我们能够登录这台“服务器”。</p>

<!-- more -->


<h2>课堂内容</h2>

<h3>磁盘管理</h3>

<p>主要学习磁盘相关的基础命令，能够查看磁盘使用情况，挂载新的磁盘等操作。参考文章：<a href="http://os.51cto.com/art/201012/240726_all.htm">Linux磁盘管理三板斧的使用心得</a>。</p>

<h4>df 命令</h4>

<p><code>df -h</code> 显示磁盘使用情况</p>

<h4>fdisk 命令</h4>

<p><code>sudo fdisk -l</code> 列出已知的分区类型</p>

<p><code>sudo fdisk /dev/sda1</code> 对/dev/sda1进行磁盘分区</p>

<h4>mkfs 命令</h4>

<p>mkfs 命令用于在设备上（通常为磁盘）创建 Linux文件系统。mkfs 本身并不执行建立文件系统的工作，而是去调用相关的程序来执行。</p>

<p><code>sudo mkfs -t ext4 /dev/sda1</code> 将 /dev/sda1 分区格式化为 ext4 格式</p>

<h4>partprobe 命令</h4>

<p>使用 partprobe 可以不用重启系统配合 fdisk 工具创建新的分区。</p>

<h4>mount 命令</h4>

<p>mount 命令用于挂载文件系统</p>

<h3>常用目录操作</h3>

<h4>特殊目录</h4>

<ul>
<li><code>.</code> 当前目录</li>
<li><code>..</code>父级目录</li>
<li><code>~</code> 当前用户的home目录</li>
<li><code>-</code> 前一个工作目录</li>
<li><code>~account</code> account 用户的 home 目录</li>
<li><code>.filename</code> 隐藏文件</li>
</ul>


<h4>操作目录</h4>

<ul>
<li><code>cd</code> 进入某个目录</li>
<li><code>ls</code> 列出某个目录的文件信息</li>
<li><code>ls -l</code> 列表展现目录下所有文件信息，显示目录权限、创建者、时间、文件大小等</li>
<li><code>ls －al</code> 列表展现目录下所有文件（包含隐藏文件）信息，显示目录权限、创建者、时间、文件大小等</li>
<li><code>pwd</code> 显示当前目录</li>
<li><code>mkdir</code> 创建目录</li>
<li><code>rmdir</code> 删除空目录（如果需要删除非空目录，请使用 <code>rm -r</code>）</li>
</ul>


<h3>常用文件操作</h3>

<ul>
<li><code>cat</code> 显示文件所有内容</li>
<li><code>tac</code> 从最后一行开始显示</li>
<li><code>echo "hello world" &gt; log.txt</code> 向 log.txt 中写入内容 &ldquo;hello world"， 将覆盖原来的文件内容</li>
<li><code>echo "hello world 1" &gt;&gt; log.txt</code> 向 log.txt 中附加内容 &ldquo;hello world1"，添加的内容会在文件最后一行。如果文件不存在，则会被创建。</li>
<li><code>nl log.txt</code> 输入带行号的文件内容</li>
<li><code>head log.txt</code> 只看文件前几行内容</li>
<li><code>tail log.txt</code> 只看最后几行</li>
<li><code>od</code> 以二进制方式显示档案内容</li>
<li><code>cp</code> 复制</li>
<li><code>mv</code> 移动</li>
<li><code>rm</code> 删除</li>
</ul>


<h3>查找命令</h3>

<h4>find 命令</h4>

<p>find 命令主要用来查找文件。更多使用方法请 Google 之。</p>

<p><code>find . -name "mysql*" -type f</code> 查找以“mysql”开头的所有文件(不是文件夹)</p>

<h4>which 命令</h4>

<p>在 PATH 变量指定的目录中，搜索某个系统命令的位置。同时也可以验证某个命令是否存在。</p>

<p><code>which grep</code></p>

<h2>总结</h2>

<p>第一节课主要了解了 Linux 下面一些基础的命令使用方法。这些命令都是比较常用的，当然还是需要多实战，才能够更好的理解并运用TA。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Jenkins for Android Integration Using Docker]]></title>
    <link href="http://www.gongmingqm10.net/blog/2015/03/12/setup-jenkins-for-android-integration-using-docker/"/>
    <updated>2015-03-12T10:46:59+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2015/03/12/setup-jenkins-for-android-integration-using-docker</id>
    <content type="html"><![CDATA[<h2>About Docker</h2>

<p>什么Docker，为什么我们要折腾Docker，而不是直接在服务器上安装运行appilication所需的各种环境呢？</p>

<p>这个问题的产生和为什么需要虚拟机的理由差不多，我需要让我的代码运行在一个干净的无干扰的机器上，这样能够保证代码测试运行环境的一致性，降低其他不可知因素对代码的影响。而Docker和VM虚拟机相比又有其特点，比如启动速度快，可以单独将Docker保存为镜像，上传后能够让别人使用。甚至可以直接将自己的code放在Docker中，直接将环境和代码一起交付给客户。客户只需要安装这个Docker，运行后就可以直接使用这个application了。</p>

<blockquote><p>Develop, Ship and Run Any Application, Anywhere</p></blockquote>

<!-- more -->


<p>Docker is a platform for developers and sysadmins to develop, ship, and run applications. Docker lets you quickly assemble applications from components and eliminates the friction that can come when shipping code. Docker lets you get your code tested and deployed into production as fast as possible.</p>

<h3>Provision</h3>

<p>我的目标在于构建一个可以运行Android的CI服务器。出于省钱的目的，我使用本地的Vagrant启动Ubuntu虚拟机来代替真正的服务器。大致思路是：</p>

<ol>
<li>启动Ubuntu虚拟机，在Ubuntu上安装Docker；</li>
<li>通过Docker安装Jenkins Docker官方镜像；</li>
<li>在这个实例Docker中配置Jenkins并安装Android运行环境；</li>
<li>在Jenkins上搭建Android CI，使得Android单元测试和集成测试能够顺利通过；</li>
<li>上传这个具有Android CI功能的Jenkins镜像；</li>
<li>本地启动B虚拟机，下载镜像，访问B虚拟机的地址，查看Android Jenkins；</li>
</ol>


<h3>1. 启动Ubuntu虚拟机并安装Docker Jenkins</h3>

<p>在安装Docker之前，首先得有一个Linux的机器能够进入，如果你已经有一台干净的Linux服务器，直接进入安装Docker步骤。</p>

<p>Vagrant安装之前，你应该在电脑上安装VirtualBox虚拟机。VirtualBox安装完成之后请参考 <a href="http://docs.vagrantup.com/v2/installation/index.html">Vagrant Installation Guide</a>。</p>

<p>Vagrant成功安装后，<code>vagrant init ubuntu/trusty64</code> 能够帮你快速安装一台Ubuntu14.04的虚拟机，第一次安装的时候会稍微慢点，因为Vagrant会帮你生成Vagrantfile文件，并下载镜像。</p>

<p>Vagrantfile生成之后不要立即启动，因为我们想通过localhost访问Vagrant，然后通过Vagrant访问其中的Docker。由于Jenkins默认会使用8080端口，所以如果Vagrant的8080端口可以转发到Docker Container中的Jenkins。localhost:8080能够转发到Vagrant Ubuntu的8080端口，然后Vagrant的8080端口继续转发到Docker的8080端口，于是可以通过<code>localhost:8080</code>访问Jenkins了。所以Vagrantfile部分配置如下，添加端口转发。因为我本机的8080端口被其他程序占用，所以我将本地的8088端口转发到虚拟机的8080端口：</p>

<p><code>
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  #config.vm.network :forwarded_port, guest: 80, host: 8080
  config.vm.network :forwarded_port, guest: 8080, host: 8088
</code></p>

<p>如果你之前已经启动了vagrant up, 然后更改了Vagrantfile想让forward_port生效，需要先<code>vagrant suspend</code>暂停vagrant，然后使用<code>vagrant reload</code>重新加载Vagrantfile使配置生效。</p>

<p>Vagrant Ubuntu 初始化完成之后，还是在这个有Vagrantfile的文件夹下，<code>vagrant up</code>能够直接启动这台Ubuntu服务器。</p>

<p>顺利的话我们可以进入通过<code>vagrant ssh</code>进入Ubuntu，随后需要在这台干净的Ubuntu机器上<a href="http://docs.docker.com/installation/ubuntulinux/">安装Docker</a>：</p>

<p>```
$ sudo apt-get update
$ sudo apt-get install docker.io
$ source /etc/bash_completion.d/docker.io</p>

<p>// 上述方法安装的Docker版本为1.0.1，如果你想使用较高版本Docker1.3.3</p>

<p>$ echo deb <a href="http://get.docker.com/ubuntu">http://get.docker.com/ubuntu</a> docker main > /etc/apt/sources.list.d/docker.list
$ apt-key adv &mdash;keyserver pgp.mit.edu &mdash;recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
$ apt-get update
$ apt-get install -y lxc-docker-1.3.3</p>

<p><code>``
Note:</code>vagrant destroy<code>会关闭并重新格式化ubuntu机器，如果你只是想简单的停止机器，请使用</code>vagrant suspend`</p>

<p>Docker成功安装后，直接启动Jenkins官方镜像：</p>

<p><code>
docker run --name androidJenkins -p 8080:8080 -v /var/jenkins_home jenkins
</code></p>

<p>安装完成后，访问 <code>http://localhost:8088/</code>，如果可以看到Jenkins界面，说明Jenkins已经安装成功。</p>

<p>进入后发现没有登录或者注册入口，然后就看到了stackoverflow上的<a href="http://stackoverflow.com/questions/10825614/how-can-i-add-a-username-and-password-to-jenkins">解决方案</a>: 系统管理 &ndash; Configure Global Security &ndash; 启用安全 — Jenkins专有用户数据库，允许用户注册 &ndash; 任何用户可以做任何事情。注册常用用户名和邮箱，然后就可以直接登录Jenkins。</p>

<h3>2. Jenkins Docker中安装Android 运行环境</h3>

<p>既然我们的Jenkins已经搭建完成，这一步我们则需要基于Jenkins安装Android的运行环境，如何在Ubuntu系统中通过命令行安装Android运行环境呢，主要参考<a href="https://www.digitalocean.com/community/tutorials/how-to-build-android-apps-with-jenkins">这篇文章</a>。</p>

<p>安装Android运行环境主要的流程为：</p>

<ol>
<li>下载Android SDK安装包 并设置环境变量.</li>
<li>下载platform-tools, Android SDK API, Android Build Tools.</li>
</ol>


<p>我这里安装Android SDK API版本为21，Build Tools版本号为21.1.2。</p>

<p>为了使Jenkins Android 环境能够在下次使用，我们通过新建 Dockerfile 的方式基于Jenkins来创建一个新的镜像，具体步骤如下：</p>

<ol>
<li><a href="https://registry.hub.docker.com/">Docker Hub</a>注册账号，用于存放自己的Repository。</li>
<li>新建Dockerfile文件，并添加配置信息。</li>
<li>运行Dockerfile，此时会执行Dockerfile中所配置的一系列命令。</li>
<li>提交Dockerfile生成的jenkins-android镜像。</li>
</ol>


<h4>配置Dockerfile</h4>

<p>```
FROM jenkins
MAINTAINER Ming Gong, <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x67;&#111;&#x6e;&#x67;&#109;&#x69;&#110;&#x67;&#x71;&#109;&#x31;&#48;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#x67;&#x6f;&#110;&#103;&#109;&#x69;&#110;&#103;&#113;&#109;&#49;&#x30;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>
USER root
RUN apt-get update &amp;&amp; apt-get -y install libstdc++6 lib32z1 lib32stdc++6 expect</p>

<p>RUN wget &mdash;progress=dot:giga <a href="http://dl.google.com/android/android-sdk_r24.1.2-linux.tgz">http://dl.google.com/android/android-sdk_r24.1.2-linux.tgz</a>
RUN mv android-sdk_r24.1.2-linux.tgz /opt/
RUN cd /opt &amp;&amp; tar xzvf ./android-sdk_r24.1.2-linux.tgz
ENV ANDROID_HOME /opt/android-sdk-linux/
ENV PATH $ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH
RUN echo $PATH
RUN echo &ldquo;y&rdquo; | android update sdk -u &mdash;filter platform-tools,android-21
RUN echo &ldquo;y&rdquo; | android update sdk -u &mdash;all &mdash;filter 5
RUN chmod -R 755 $ANDROID_HOME</p>

<p>RUN apt-get install -y git-core
RUN android update sdk &mdash;no-ui</p>

<p>```</p>

<p>其中 <code>android update sdk -u --all --filter 5</code> 主要用来更新build-tools。在有android环境的机器上运行'android list sdk &mdash;all'可以查看所有的SDK信息，找到最新版本的build-tools，然后通过提供的最新版本号即可。</p>

<p>Dockerfile配置成功后，我们首先在Vagrant虚拟机里面，<code>mkdir /var/jenkins_home</code>，并给予所有权限 <code>chmod 777 /var/jenkins_home</code>。/var/jenkins_home 能够映射到Docker中的jenkins_home目录，方便我们直接备份jenkins数据。</p>

<h4>Build Dockerfile</h4>

<p>准备工作完成之后，build Dockerfile，首先切换到Dockerfile所在的当前目录下，</p>

<p>```
vagrant@ubuntu-14: sudo docker build -t gongmingqm10/jenkins-android:latest .</p>

<p>&hellip;</p>

<p>Successfully built 184c7dad595a</p>

<p>```</p>

<h4>Push Image</h4>

<p>最后输出的信息就是我们通过Dockerfile生成的新的镜像ID。构建完成之后我们需要commit并push这个镜像到docker hub的repository上。</p>

<p>```
vagrant@ubuntu-14:~/test$ sudo docker images
REPOSITORY                     TAG                   IMAGE ID            CREATED             VIRTUAL SIZE
gongmingqm10/jenkins-android       latest                184c7dad595a        11 minutes ago      188.3 MB</p>

<p>```
通过 docker images能够看到最新的镜像已经生成，这一步我们需要首先启动这个镜像，然后得到container ID，然后再PUSH 这个container。</p>

<p>首先启动镜像：</p>

<p>```
vagrant@ubuntu-14:~/test$ sudo docker run -t -i -d gongmingqm10/jenkins-android:latest
&hellip;</p>

<p>vagrant@ubuntu-14:~/test$ sudo docker ps
CONTAINER ID        IMAGE                              COMMAND                CREATED             STATUS              PORTS                               NAMES
43fcce2388fc        gongmingqm10/jenkins-adnroid:latest    /bin/bash              17 seconds ago      Up 16 seconds                                           determined_lumiere
vagrant@ubuntu-14:~/test$ sudo docker commit -m &ldquo;Add Android Config&rdquo; -a &ldquo;Ming Gong&rdquo; 43fcce2388fc gongmingqm10/jenkins-android:latest
75f1b93aedc4b57426b75c96ce69170016b3c0b0b6283cda5562f8464bbfd2f4
vagrant@ubuntu-14:~/test$ sudo docker push gongmingqm10/jenkins-android</p>

<p>```
首次push，可能会提示你输入自己的Docker Hub的用户名和密码。</p>

<h4>运行 jenkins-android</h4>

<p>```
sudo docker run &mdash;name jenkinsAndroid -p 8080:8080 -v /var/jenkins_home:/var/jenkins_home gongmingqm10/jenkins-android</p>

<p>```</p>

<p>我们使用jenkinsAndroid作为container的名字，注意这个名字也不能与已用的container 名字重复。运行一次之后，如果被自己停了，发现没有启动的话，可以使用 <code>sudo docker ps -a</code> 查看所有的container，然后找到 jenkinsAndroid这个名字的container对应的ID。启动之：</p>

<p>```
sudo docker start f6b88bdad68f</p>

<p>```</p>

<h4>访问 Jenkins</h4>

<p>在第一部分，我们直接使用Jenkins官方的Repository启动了Jenkins进行访问，经过这部分我们自己构建Dockerfile，添加了一些Android的运行环境，目的是给Android Test提供必要的运行环境。访问 <code>localhost:8088</code>可以访问这个具有Android环境的Jenkins。注册用户并登录，这一部分就完成了。</p>

<h3>4. Jenkins中配置Android Build</h3>

<p>通过访问<code>localhost:8088</code>，我们可以进入Jenkins控制台。为了使得Jenkins可以运行Android的单元测试和功能测试，主要安装如下插件：</p>

<p><code>git plugin</code>： 从 git repo 中 clone 代码</p>

<p><code>android emulator plugin</code>：Android运行功能测试时，能够帮助我们生成或者启动Android虚拟机</p>

<p><code>build monitor view</code>：全屏显示当前Build情况，适合投影到大屏幕上，方便所有人实时了解build情况</p>

<p>构建Functional test过程中，我希望通过android emulator pligin直接启动在container中已经新建的AVD。运行过程中却始终出错:</p>

<p>```
$ /opt/android-sdk-linux/tools/emulator -no-boot-anim -ports 9731,9732 -avd Nexus_5_API_21 -no-snapshot-load -no-snapshot-save -no-window
emulator: ERROR: Could not load OpenGLES emulation library: libX11.so.6: cannot open shared object file: No such file or directory
emulator: WARNING: Could not initialize OpenglES emulation, using software renderer.
emulator: warning: opening audio output failed</p>

<p>$ /opt/android-sdk-linux/platform-tools/adb connect localhost:9732
connected to localhost:9732
[android] Waiting for emulator to finish booting&hellip;
$ /opt/android-sdk-linux/platform-tools/adb -s localhost:9732 shell getprop init.svc.bootanim
error: device offline
$ /opt/android-sdk-linux/platform-tools/adb connect localhost:9732
$ /opt/android-sdk-linux/platform-tools/adb -s localhost:9732 shell getprop init.svc.bootanim
error: device offline
$ /opt/android-sdk-linux/platform-tools/adb connect localhost:9732
$ /opt/android-sdk-linux/platform-tools/adb -s localhost:9732 shell getprop init.svc.bootanim
error: device offline
$ /opt/android-sdk-linux/platform-tools/adb disconnect localhost:9732
$ /opt/android-sdk-linux/platform-tools/adb connect localhost:9732
$ /opt/android-sdk-linux/platform-tools/adb -s localhost:9732 shell getprop init.svc.bootanim
error: device offline
$ /opt/android-sdk-linux/platform-tools/adb connect localhost:9732
$ /opt/android-sdk-linux/platform-tools/adb -s localhost:9732 shell getprop init.svc.bootanim
error: device offline
$ /opt/android-sdk-linux/platform-tools/adb connect localhost:9732
$ /opt/android-sdk-linux/platform-tools/adb -s localhost:9732 shell getprop init.svc.bootanim
error: device offline
$ /opt/android-sdk-linux/platform-tools/adb disconnect localhost:9732
$ /opt/android-sdk-linux/platform-tools/adb connect localhost:9732
[android] Emulator was shut down before it finished booting
$ /opt/android-sdk-linux/platform-tools/adb disconnect localhost:9732
[android] Stopping Android emulator
$ /opt/android-sdk-linux/platform-tools/adb kill-server
Finished: NOT_BUILT</p>

<p>```
网上查了一下，主要是64位机器下运行32位emulator导致的一些问题。如果可以在一台都图形界面的机器上手动启动虚拟机，运行functional test的时候就应该不存在这个问题。此处先略过这个问题，后面会有专门的文章来研究这个问题。</p>

<p>在Jenkins中，建立的Build主要为 Android Unit Test &ndash; Android Functional Test &ndash; Android Deploy Hocky App.</p>

<p>通过Android的单元测试和功能测试基本可以保证App的功能处于正常状态；而Deploy到Hockey App则是为了持续集成的需要，我们要确保我们的App能够被实时生成，这样我们的产品就可以随时被测试并展示给客户，或者直接发布Hockey App 上某一个稳定的版本。</p>

<p>要想Jenkins能够直接将应用上传到HockeyApp上，我们只需要在Jenkins中安装<code>Hockey App Plugin</code>，然后通过注册Hockey App提供相应的API Token并进行简单配置，即可以直接通过Jenkins来上传发布我们的App。</p>

<h3>5. Android Flavor</h3>

<p>Android Flavor是为了Android在构建时使用不同的资源，类似于Ruby运行时可以设置不同的环境。</p>

<p>在app/build.gradle做如下配置：</p>

<p>```
android {</p>

<pre><code>defaultConfig{...}

productFlavors {
    dev {
        applicationId "com.tarcle.moment.dev"
    }
    qa {
        applicationId "com.tarcle.moment.qa"
    }
    production {
        applicationId "com.tarcle.moment"
    }

}

signingConfigs {
    release {...}
}

buildTypes {
    release {...}
}

packageOptions {...}
</code></pre>

<p>}</p>

<p>```</p>

<p>通过上面的配置，我们给APP添加了三种环境变量，于是可以直接在app目录下面新建<code>dev, qa, production</code>等文件夹。通过IDE中选择不同的Build variables，便可以在当前工程中使用什么环境的配置。</p>

<p>通过<code>./gradlew clean build 任务</code>， 能够在 <code>app/build/outputs/apk</code>等目录下生成不同环境下的Debug和Release包。而这里面的Release包则可以用来Jenkins中上传到Hockey App中。</p>

<p>配置Jenkins Build和Hockey App可能用到如下插件。对于不同的Flavor，我们可以在Deploy HockeyApp 的配置中添加Build Parameters，构建时我们可以自己选择不同类型的包。从而发布不同环境下的版本。</p>

<p><code>Copy Artifact Plugin</code> 从其他的Build中直接拷贝已经生成的APK文件包。</p>

<p><code>Android Lint Plugin</code> 构建后发布Lint Report。</p>

<h3>Other</h3>

<p>关于如何直接在虚拟机中，不使用Docker构建Android Build, 将会在另一篇博文中阐述。</p>

<p>如下是我们可能用到的关于Docker 和 Android的常用命令：</p>

<p><code>android list avd</code> 查看所有当前设备。</p>

<p><code>android create avd -f -a -s 1080x1920 -n Nexus_5_API_21 -t android-21</code> 创建API-21名为Nexus_5_API_21的emulator。</p>

<p><code>emulator -avd Nexus_5_API_21</code> 运行已创建的名为 Nexus_5_API_21的emulator，注意运行时命令行会一直处于阻塞中，所以可以在末尾加上 <code>&amp;</code> 让其进入后台运行。</p>

<p><code>adb devices</code> List of devices attached。</p>

<p><code>sudo docker exec -i -t a45953b9f2fe bash</code> 进入运行中的container的控制台</p>

<p><code>echo 'y' | apt-get install libgl1-mesa-dev</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用的Linux Cmd]]></title>
    <link href="http://www.gongmingqm10.net/blog/2014/10/30/chang-yong-de-linux-cmd/"/>
    <updated>2014-10-30T15:47:40+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2014/10/30/chang-yong-de-linux-cmd</id>
    <content type="html"><![CDATA[<p>ls：查看目录下所有可见文件<br/>
ls -a ： 查看目录下所有文件，包括隐藏文件  <br/>
ls -l : 查看目录下可见文件的详细信息<br/>
ls -al 查看目录下所有文件的详细信息</p>

<!-- more -->


<p>cat file: 查看文件内容<br/>
cat -n file: 查看文件内容，并显示出行号<br/>
cat file1 file2 >> file3：将file1, file2的文件内容以此加到file3中，如果file3存在，则会在file3后面继续追加，不会覆盖file3原来的内容，如果file3不存在，则会自动创建。若需要强行覆盖，使用一个  > 即可</p>

<p>touch file: 新建文件，当文件存在时则会更新文件的时间戳</p>

<p>pwd: 查看当前目录<br/>
cd {path} : 进入目录</p>

<p>mkdir {directory}: 新建目录，若某子目录不存在则可能新建失败<br/>
mkdir -p {directory}: 新建目录，对于不存在的子目录可以一并创建</p>

<p>tree: 查看当前目录的文件树结构</p>

<p>cp file1 file1-copy: 复制file1到file1-copy<br/>
cp -r dir1 dir2: 复制文件夹dir1到dir2</p>

<p>mv: 移动文件，也可用来重命名文件，具体用法和cp一样</p>

<p>rmdir directory1: 移除一个空的文件夹<br/>
rm file: 移除文件<br/>
rm -r directory1: 移除文件夹</p>

<p>chmod：修改文件的权限
u : user, g : Group, o : others    增加权限“＋”，删除权限“－”   r (Read), w (Write), x (Execute).<br/>
chmod u+x file1, 给当前用户增加对file1的执行权限</p>

<p>wc -l file1: 计算file1的行数<br/>
wc -w file1: 计算file1单词的个数<br/>
wc -c file1: 计算file1中字符的个数</p>

<p>history: 查看历史命令纪录<br/>
!-1 : 执行倒数第一条命令<br/>
!345: 执行第345条命令</p>

<p>cat file1 | grep A : 从file1中找到带有‘A’的行<br/>
find . -name *.png 在当前文件夹下查找后缀名为.png的文件，子文件夹中的文件也可以被找出。</p>

<p>更多命令，欢迎大家一起总结与补充</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant 搭建本地虚拟机]]></title>
    <link href="http://www.gongmingqm10.net/blog/2014/10/21/vagrant-da-jian-ben-di-xu-ni-ji/"/>
    <updated>2014-10-21T11:06:42+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2014/10/21/vagrant-da-jian-ben-di-xu-ni-ji</id>
    <content type="html"><![CDATA[<p>多数情况下，为了模拟服务器环境，我们经常使用虚拟机，通过虚拟机，我们可以轻松模拟出真实的服务器环境，从而对我们代码的部署等进行模拟，当然也可以当作自己练手的好工具。把Linux虚拟机当作是真实的服务器，然后通过内网访问虚拟机上的服务器资源。<br/>
虚拟机除了大家熟知的界面化的VirtualBox外，其实还有一个神器叫做<a href="https://www.vagrantup.com/">Vagrant</a>，Vagrant是依赖于VirtualBox的，但是其好处是提供命令行式的操作，我们直接通过命令行控制虚拟机的运行状态，并可以通过ssh命令直接连接到虚拟机中，命令行操作一切，还是相当方面的。</p>

<!-- more -->


<p>安装过程见官方文档：<a href="https://www.vagrantup.com/downloads.html">https://www.vagrantup.com/downloads.html</a>。</p>

<h3>1. vagrant init</h3>

<p>安装完成后，Vagrant就可以直接在我们的命令行中使用。首先我们在选定的文件夹中执行<code>vagrant init</code>，这时我们可以看到此文件夹下自动生成了一个<code>Vagrantfile</code>文件:</p>

<p>```</p>

<h1>&ndash;<em>&ndash; mode: ruby &ndash;</em>&ndash;</h1>

<h1>vi: set ft=ruby :</h1>

<p>Vagrant.configure(&ldquo;2&rdquo;) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.</p>

<p>  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = &ldquo;base&rdquo;</p>

<p>  # The url from where the &lsquo;config.vm.box&rsquo; box will be fetched if it
  # doesn&rsquo;t already exist on the user&rsquo;s system.
  # config.vm.box_url = &ldquo;<a href="http://domain.com/path/to/above.box">http://domain.com/path/to/above.box</a>&rdquo;</p>

<p>  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing &ldquo;localhost:8080&rdquo; will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080</p>

<p>  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: &ldquo;192.168.33.10&rdquo;</p>

<p>  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network</p>

<p>  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder &ldquo;../data&rdquo;, &ldquo;/vagrant_data&rdquo;</p>

<p>  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don&rsquo;t boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize [&ldquo;modifyvm&rdquo;, :id, &ldquo;&mdash;memory&rdquo;, &ldquo;1024&rdquo;]
  # end
  #
  # View the documentation for the provider you&rsquo;re using for more
  # information on available options.</p>

<p>  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { &ldquo;puppet&rdquo;:
  # #   ensure => &ldquo;present&rdquo;,
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { &lsquo;/etc/motd&rsquo;:
  # #   content => &ldquo;Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n&rdquo;
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = &ldquo;manifests&rdquo;
  #   puppet.manifest_file  = &ldquo;init.pp&rdquo;
  # end</p>

<p>  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = &ldquo;../my-recipes/cookbooks&rdquo;
  #   chef.roles_path = &ldquo;../my-recipes/roles&rdquo;
  #   chef.data_bags_path = &ldquo;../my-recipes/data_bags&rdquo;
  #   chef.add_recipe &ldquo;mysql&rdquo;
  #   chef.add_role &ldquo;web&rdquo;
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => &ldquo;foo&rdquo; }
  # end</p>

<p>  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = &ldquo;<a href="https://api.opscode.com/organizations/ORGNAME">https://api.opscode.com/organizations/ORGNAME</a>&rdquo;
  #   chef.validation_key_path = &ldquo;ORGNAME-validator.pem&rdquo;
  # end
  #
  # If you&rsquo;re using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = &ldquo;ORGNAME-validator&rdquo;
end</p>

<p>```
上面几乎有所有的配置说明，我们可以根据自己需要进行命令的配置，我根据自己的需要进行了如下配置：</p>

<p>```</p>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;base&rdquo;
  config.vm.box = &lsquo;centos-6.4&rsquo;
  config.vm.box_url = &lsquo;<a href="https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box">https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box</a>&rsquo;
  config.vm.network :private_network, ip:&lsquo;192.168.3.10&rsquo;
  config.vm.network :forwarded_port, guest: 27017, host: 8888
end</p>

<p>```
根据配置名字可以知道各项的具体作用，包括此系统的下载地址，系统的类型及版本号，虚拟机的内网IP，虚拟机的端口转发等。注意这里的host端口默认为27017，但是这个端口被我电脑中的mongodb占用，所以我修改成另外一个闲置的端口。<br/>
配置完成后，我们的工作基本完成。</p>

<h3>2. vagrant up</h3>

<p><code>vagrant up</code>用于启动虚拟机。文件配置完成之后在此文件夹中运行<code>vagrant up</code>，将加载此文件夹中的Vagrantfile，首次加载时需要下载虚拟机系统，所以耗时会略长。下载完成之后你会看到成功的提示。</p>

<h3>3. ssh connect virtual machine</h3>

<p>虚拟机成功启动后，我们只需要在terminal中通过<code>ssh</code>就可以连接到虚拟机设备上。然后就想在远程服务器中来操作就可以了。vagrant启动的地址是我们配置文件中的<code>192.168.3.10</code>，其默认的用户名为root，初始密码为 vagrant。所以我们使用如下命令登陆：<code>ssh root@192.168.3.10</code>，提示密码时输入<code>vagrant</code>，最后我们可以成功登陆。</p>

<p>登陆完成后，如果我们想停下虚拟机，可以使用<code>vagrant destroy</code>关闭虚拟机。</p>
]]></content>
  </entry>
  
</feed>
