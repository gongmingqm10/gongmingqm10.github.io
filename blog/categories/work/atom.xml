<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Work | gongmingqm10]]></title>
  <link href="http://www.gongmingqm10.net/blog/categories/work/atom.xml" rel="self"/>
  <link href="http://www.gongmingqm10.net/"/>
  <updated>2017-02-16T16:39:20+08:00</updated>
  <id>http://www.gongmingqm10.net/</id>
  <author>
    <name><![CDATA[Gong Ming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[国内项目三月记]]></title>
    <link href="http://www.gongmingqm10.net/blog/2017/02/16/domestic-project-in-three-months/"/>
    <updated>2017-02-16T16:32:49+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2017/02/16/domestic-project-in-three-months</id>
    <content type="html"><![CDATA[<p>意外的加入了国内项目，一待就是三个多月。之前常驻国外项目，一下子跳转到国内项目，对比还是很明显的。由于工作环境的限制，我们只得常驻客户现场 (暂称为A厂)。工作内容是在一个遗留Android App上继续开发，时间紧任务重，整个团队一起努力，项目最后还是获得了不错的成绩。过程中对于当前的工作也有了一点点心得体会：</p>

<h3>关于烂代码</h3>

<h4>现状</h4>

<p>项目前后经手过两三个团队，经历过两三年。看到代码的一刻，整个人都惊呆了，深度超过10层的逻辑嵌套，超过 1500 行的 Activity 文件，重复代码片段可以重复到10多处，莫名其妙的非空判断，随处可见的私吞Exception，哭笑不得的代码注释，从来不敢删除的注释代码(约30%)&hellip;&hellip;</p>

<!-- more -->


<h4>困境</h4>

<p>对于烂代码，我们想到的第一个词是“重构”，但是“重构”的前提是测试。没有测试保障的重构是一件相当危险的事情。但是遗留混乱代码中怎么可能有测试。所以这是个死结。</p>

<p>当然你也许会说先加上测试，这就涉及到一个需求的问题。因为从代码中你很难推断出真实的需求。因为有些代码也许是和需求无关的，是开发人员的知识储备不够，添加的冗余代码，给冗余代码添加测试是一件很罪恶的事情。相当于在保证垃圾不被清楚掉。更关键的是，如果不知道具体的业务逻辑，那是没办法添加有效测试的。</p>

<p>从客户角度来说，重构烂代码不能带来立竿见影的价值，但却可能引起线上版本的各种未知问题。所以从某种程度上来看，如果大刀阔斧的重构一定得挨刀子。</p>

<h4>解决</h4>

<p>像这种情况，其实最好的解决方案是重写整个代码，当然前提是客户愿意为你的重写买单。这是一劳永逸的办法，但是对于“唯快不破”的国内客户而言，并且客户和我方信任没有完全建立起来的情况下，实现起来难度比较大。</p>

<p>所以我们只能使用一些迂回战术。比如让客户方接口人意识到原有代码质量比较烂的问题，然后对于需求明确的页面，小步的重构，并手动验证需求。当然需要做好版本控制，随时做好回退的准备。对于一些比较大的混乱的页面，可以尝试直接重写一个新的，同时保留老的页面。先直接用新页面验证，一旦出现紧急问题再切换回来。一两个迭代验证之后，再把之前的彻底删除。</p>

<p>所以，关键点在于把握好度，在资源允许的前提下，一步步的重写，并且尽量加上测试的保证，最后达到改善项目代码质量的目的。</p>

<h4>原因</h4>

<p>代码的复杂度反映了需求的复杂度。尤其是面对客户的各种需求，有些开发人员会不假思索的采取填鸭式的方式不断在原有代码上打补丁。我们需要理解需求，理顺需求，然后使用最优的方案实现，这样真的可以有效避免一些奇葩代码。同时对于不断变脏的模块或者方法，要不断的回顾，重构，优化。</p>

<p>烂代码的出现主要主要是软件开发人员自身的技术功底，这需要长期的培养与习惯养成。比如读一下《重构》或者《代码整洁之道》，可能会有效的改善代码质量。</p>

<h3>关于“烂”需求</h3>

<h4>现状</h4>

<p>在上述谈到烂代码的原因时，我们有谈到需求对代码质量的影响。需求本身并不是烂代码的罪魁祸首，但是却是烂代码的催化剂。我也遇到过项目中很多奇葩需求，有些需求人员本身提的需求不太符合现实。比如我遇到的，在一段代码里面出现了:
<code>java
if(bookId == "1388") {
  doTrickyThing();
}
</code>
这就是一个典型的奇葩需求影响的结果。对于某些数据做某些特殊处理应该直接放到数据库或者后台API层面做，如果加到客户端，或者有 web/Android/iOS等多个客户端需要显示此数据，那么这种奇怪的逻辑就得在三个地方重复。</p>

<p>或者你觉得这种逻辑出现一两次也没啥关系，但是一旦项目里面充斥着这种逻辑，并且开发人员没有用代码很好的描述时，这种代码对于其他人而言就是魔法代码，后面接手项目的人也将很难理解其中的逻辑。</p>

<h4>方案</h4>

<p>这种问题的出现大多是人为因素，需求本身并没有任何问题。只是实现手段不佳，所以引起来代码上的奇怪逻辑。混乱的代码其实也是一个信号，预示着这个解决方案可能不是最佳的。</p>

<p>所以，“奇葩”需求产生时，尝试保持质疑精神。向客户了解如下内容：</p>

<ul>
<li>需求的业务价值；</li>
<li>需求的实现方案；</li>
<li>评估对比各方案的成本及优劣；</li>
<li>结合项目实际情况向客户推荐方案；</li>
</ul>


<p>在找技术方案时，最好是能够提前找资料做足功课，才能在面对客户质疑时更加从容。</p>

<h4>原因</h4>

<p>在国内外包项目中，大部分情况下客户都比较强势，直接给需求。但是至于需求的价值，需求的实现手段等，开发人员应该是可以提出自己的见解的。一旦双方能够统一战线，把产品做好作为自己的使命，那么很多需求也是可以讨论优化，然后到达一个和谐的状态。</p>

<p>因为我们是咨询师，我们不是代码的搬运工，必要的时候我们是可以和客户协商需求，并给客户提供各种建议的。</p>

<h3>关于主动性</h3>

<h4>背景</h4>

<p>两周一次的迭代，PM和BA也许需要和客户划定需求的范围，落实需求的细节，考虑项目成本以及交付风险等。当项目交付太紧时，技术负责人以及测试人员都不一定能够顾虑到项目中的所有事情。所以即使作为一个开发，也需要时刻关注手头开发工作之外的事情。</p>

<h4>方案</h4>

<p>其实作为开发人员在项目中承担的任务也可以很多，比如：</p>

<ul>
<li>迭代内故事卡的技术预研；</li>
<li>知识总结及传递；</li>
<li>关注上线流程；</li>
<li>代码质量，单元测试，功能测试等；</li>
<li>给故事卡估点；</li>
</ul>


<p>不过在一个项目里面，你能否有机会承担这些工作和项目组本身也有关系。我经历的有些项目可能高级工程师比较多，这时候除非主动争取，要不然这些事情可能都有人做了。如果项目人员配置比较紧张，那你可能是被动的承担这部分工作。</p>

<p>不管是主动还是被动，开发人员是可以成为团队里面的多面手，协助BA(业务分析师)或者QA(质量保障工程师)开展相关工作的。</p>

<h3>感想</h3>

<p>每一个项目都是一段难忘的经历，有些项目现在回想起来觉得不容易。但是你也会惊讶自己在其中的成长，你会感谢当年那个努力奋斗的自己。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Work in Dallas]]></title>
    <link href="http://www.gongmingqm10.net/blog/2015/03/02/work-in-dallas/"/>
    <updated>2015-03-02T02:39:53+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2015/03/02/work-in-dallas</id>
    <content type="html"><![CDATA[<p>时光匆匆，算上实习期来ThoughtWorks工作已近一年。如果技术方面来看，我提升的主要是广度。但是从敏捷实践角度来看，我正在也将继续朝深度上提升。</p>

<p>敏捷这个词，大学期间或多或少听过，大体的印象是软件工程学的一些术语，之后在项目中才开始慢慢实践。我前后经历过三四个项目，虽然每个项目待的时间不长，但是却又想能够和不同的团队，面对不同的客户，也有幸能够在不同的国家体会不同文化下的敏捷实践的标准。</p>

<!-- more -->


<p>由于敏捷包含的方面很多，作为Developer的我，也会主要从Developer的角度，结合自己的想法来谈自己在这一年对敏捷的认识。此文不是软文，只是自己闲时的一点纪录。不喜求轻喷。</p>

<h3>开发驱动测试(DDT)</h3>

<p>加入TW，很长一段时间我一直都抱有这个想法。当时虽然已经在项目上工作，在Code Review的压力下也会偶尔用开发驱动测试(DDT)。因为别人告诉我<code>不写测试的程序员不是好程序员</code>，这个句式怎么听起来和<code>不想当将军的士兵不是好士兵</code>一个道理。听起来是很多道理，但是真正实施的时候呢，我开始犯难了。</p>

<p>测试的痛点在哪里？我常这样问自己，其实我有时也不知道痛点再哪里，只是不太会写。为什么不会写？因为我连怎么实现都不知道，怎么会写？通过这样反推过来也就是只有知道怎么实现，才知道怎么写测试。这个观点对吗？</p>

<blockquote><p>只有知道怎么实现，才会知道怎么写测试。写测试有点作秀的嫌疑</p></blockquote>

<p>这是我曾经的观点，先别批评我逻辑性或者对测试的理解有多差，因为这是我过去的想法。如果我现在来看这句话的话，我会套用那句很通用的 <code>It depends</code>。肯定有人会反驳，那到底取决于什么呢。</p>

<p>以我现在的认知来看，我之所以不知道在实现之前怎么写测试，往往是由于要测试的对象本身很大，很杂，一个方法要管的事情太多了，所以我不知道怎么测试。其实回过头来想想，当一个东西连测试都很难写的时候，是不是意味着我所要测试的函数做了太多的事情了呢。</p>

<ul>
<li>重构里的术语来讲，自己对类或者方法的设计不太合理，导致要测试的内容过多而不知从何下手。</li>
<li>另外一种角度来看，如果一个测试很难描述出测试对象的时候，为什么不可以多增加几个测试，循序渐进的去添加测试。</li>
<li>如果以上两种情况你都不属于，很不幸有可能你在动手之前应该查一下，确保自己清楚这个被测对象的职责，代码上基本的实现思路。</li>
</ul>


<p>当然对于某些情况，我确实可以先写测试再写实现。例如一个简单的计算器的加法，测试中我知道给函数两个输入值，我期望能够输出某种结果。在这种情形下我知道怎么写测试因为要测试的对象足够简单，负责的事情足够清楚。这种有结果输出的测试也是相对简单的。这时候我甚至完全不用操心别人究竟怎么实现的，我只需要用强有力的测试来验证结果即可。</p>

<p>知已知彼，百战不怠。你之所以知道怎么用测试驱动开发，因为你在测试之前已经在心中将这个函数设计和实现了一遍。如果你和我一样达不到这种境界，那可能就是对这块知识了解确实太少，意味着你该自己补补了。</p>

<h3>测试的价值</h3>

<p>测试到底有没有价值，得看你是怎么理解价值的。从科学的角度来看，肯定会有人用实验来证明写测试能够减少Bug发生率，虽然前期写测试花费时间，但在后期却能够节约时间。这种最常见的来证明敏捷实践标准的理论数见不鲜，但是有时却很难是刚入门的人信服。</p>

<p>从我经历过的项目来看，有测试或者没测试的项目都有接触过。对测试的价值也有自己的认识。先不管别人的研究结果如果，单从开发人员开发时间来考虑，测试的确会花费更多时间，相当于你要写两份代码，一份实现，一份保证已实现的功能不被后期修改破坏掉。当然测试的确可以提高产品质量。</p>

<p>什么时候我不会写测试，虽然我信奉测试是产品质量的保障，但是有时我不一定会写测试：</p>

<ol>
<li>交付周期过短的项目，并且是在没有引入测试的项目基础上开发。这种项目在国内客户中比较常见，多半是对原来的项目增加一个模块，并且之前的代码没有测试。这类项目的特点是周期短，功能相对较少。敏捷实践是敏捷实践，但是没必要固执的和自己死磕。因为也许客户并不在乎你有没有测试，只在乎产品能不能按期上线。</li>
<li>功能变化过快的互联网产品。一些初创型公司在做产品时往往信奉<code>天下武功，唯快不破</code>，特别是公司人手不够，功能较多，并且在每两周一次的迭代中功能变化过大的时候，维护测试变显得有点复杂。当然并不意味着任何的测试都是多余的。这里有个测试力度的问题，具体得靠自己的把握。</li>
</ol>


<p>什么时候我会在项目中引入测试呢？</p>

<ol>
<li>项目周期相对较长，客户经济上有能力承担多几个开发者带来的成本；</li>
<li>如果是在客户原有系统上开发，之前的系统就有一套测试体系，无疑我们在增加代码的时候应该增加测试。而且尽量沿用之前已经构建好的一整套测试体系。</li>
<li>一个从零开始的项目，并且有可能建立长期合作的客户。这是TW的核心竞争力，卓越软件质量的前提。客户不提，我们自己也应该做到。</li>
</ol>


<p>写测试是一种好习惯，至少作为一个合格的程序员，应该写测试。如果你是一个Github上代码贡献的活跃者，在为自己写代码的时候，请尽量为自己的代码加上测试。<a href="https://travis-ci.org/repositories">Travis</a>就是这样一个免费的提供CI服务的平台，如果你想为自己的代码加上测试但是又不想自己去搭建CI，可以试试Travis。</p>

<p>回归正题，测试的价值在于你多看重软件质量。测试有时会消耗一定的时间，但是有测试保障的软件在质量上的确可以提高好几个层次。是否写测试则需要结合你自己的项目实际情况以及客户本身而定。</p>

<p>如果你经历过国内客户和国外客户，那么你应该能够体会到他们对于软件质量的不同态度。当然所有人肯定都希望软件交付质量最高，时间最短。但是当两者需要权衡的时候，国内客户比较在乎的会是进度，国外客户比较在乎的是质量。所以质量和进度之间需要找到一个平衡点。</p>

<p>从国内外客户的差异，其实也可以联想到国内外软件开发者的差异。到美国这边与美国这边的同事办公之后发现，这边的同事对于测试的重视程度要远远高于国内的同事(不是黑ThoughtWorks China的同事们)。<code>You can not do anything when you write test. Test first</code>，这是美国这边一位senior的同事和我pair的时候说的。自己曾经那些不好的编程习惯到了这边是应该好好改改了。</p>

<p>在美国这边工作曾经有几天我对项目上的测试有点质疑了，因为有些地方实在测的太细，几乎是想用测试覆盖掉每一行代码，并且有些代码还被多个测试覆盖。后来偶然的聊天中，同事告诉我 <code>I think I don't write so much meaningful tests in our code, some tests seems to be useless. And Jered is more expereienced, he pointed out.</code>，虽然这是一种谦虚的说法。但是这却告诉我，写好测试才能真正体现测试的价值。</p>

<p>我姑且称那些永远不会fail，或者基本没有测任何有意义的东西的测试为<code>僵尸测试</code>，这种测试太多了直接影响整个测试的可阅读性。好的测试应该可以通过函数命名，测试输出结果的判断来提供文档的功能。所以不要用数量来堆砌测试，努力写好测试是关键。</p>

<h3>敏捷团队角色</h3>

<p>敏捷开发中很重要的一部分是团队角色。一个敏捷团队主要有应用开发工程师(Dev)，业务分析师(BA)，质量保障工程师(QA)等。在项目的Story估点之时，除了有BA和QA的参与，Dev的参与也是很重要的部分。BA和QA主要从业务上评估，Dev主要从技术上评估，这种多人参与过的估点才是有意义的。</p>

<p>同样一个Story制定的时候产品设计效果图和可验证的Scenario是很重要的。Scenario的制定其实考察的是BA/QA对业务以及实际使用场景的考验。这一点我在Mobile端体会尤其明显。因为Mobile端更重交互，对于用户可能有的行为，制定验收标准是就应该考虑清楚。所以这时候BA不仅仅承担一个业务分析的角色，还承担着用户的角色。</p>

<p>Dev和BA沟通Story的时候最简单的情形是以用户为媒介。无论业务分析还是开发实现，最终都是为了给终端用户一个具有某种功能的产品。</p>

<p>有时我会想如果让Dev转型当BA，那这个BA一定很能了解功能的实现者。后来发现这种想法本身存在一定的问题，因为不管这个BA懂不懂具体的实现，BA/QA应该懂的是用户，应该懂得是平台特性以及用户特性。无论是Mobile和Web，抑或是Android和IOS，无论是敏捷团队的何种角色，你都得尝试去了解这个平台的特性，了解终端用户，才能够做出更好的决策。</p>

<h3>结语</h3>

<p>作为ThoughtWorks咨询师，我们应该知道公司的核心竞争力是什么，我们也更应该尝试去影响客户，给客户带来价值。也希望新的一年里自己能够在敏捷实践上做得更好，能够帮助客户，影响客户。</p>

<blockquote><p>We think disruptively to deliver technology to address our clients' toughest challenges, all while seeking to revolutionize the IT industry and create positive social change.</p></blockquote>
]]></content>
  </entry>
  
</feed>
