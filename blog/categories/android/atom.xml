<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | gongmingqm10]]></title>
  <link href="http://www.gongmingqm10.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://www.gongmingqm10.net/"/>
  <updated>2017-02-22T16:19:50+08:00</updated>
  <id>http://www.gongmingqm10.net/</id>
  <author>
    <name><![CDATA[Gong Ming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何上传 AAR 到 Jcenter]]></title>
    <link href="http://www.gongmingqm10.net/blog/2017/02/17/upload-android-aar-to-jcenter/"/>
    <updated>2017-02-17T16:38:01+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2017/02/17/upload-android-aar-to-jcenter</id>
    <content type="html"><![CDATA[<p>自我进入到代码这个行业开始，就有前辈早早告诉我要积极活跃在开源社区，于是认识了 github, 然后也见识到了开源社区的魅力之处。看到大神们都会积极贡献自己的开源仓库，自己也被这种开源精神感动到了。过程中我也尝试写过一些小框架，但是发布到 jcenter 上，所以知名度大大降低。</p>

<p>相比于几年前，现在直接拷贝源代码到自己工程中的做法越来越少了。得益于 Android 使用 Gradle 管理依赖，更多的人选择将开源仓库发布到 jcenter 中，然后被更多的人使用。今天我们将尝试从零开始，一步步上传自己的应用到 Jcenter，然后优雅的通过 gradle <code>compile 'x.y.z:a:0.0.1'</code> 引用。</p>

<!-- more -->


<h2>理解 Android Gradle 构建</h2>

<p>以 BottomTabAndroid 工程为例，在一个项目中通常至少有三个 gradle 文件，分别为：</p>

<ul>
<li>BottomTabAndroid/settings.gradle</li>
<li>BottomTabAndroid/build.gradle</li>
<li>BottomTabAndroid/app/build.gradle</li>
</ul>


<p>分析各 gradle 文件的具体内容，我们可以发现位于最外层的 settings.gradle 定义项目中的各个不同 module，这时候指定的 module 才能被我们的工程识别。识别之后，如果 A module 需要引用 B module，那么在 A 的 build.gradle 文件中，则需要 <code>compile project(':B')</code>。</p>

<p><img src="/images/android_gradle.png" title="Gradle 示例工程" ></p>

<p>在这个工程中，存在 bottomtab 和 app 两个 module, 而 bottomtab 被 app 所引用。</p>

<p>settings.gradle 内容如下:</p>

<p><code>
include ':app', ':bottomtab'
</code></p>

<p>build.gradle 内容如下：</p>

<p>```
buildscript {</p>

<pre><code>repositories {
     // 指定构建脚本的下载库
    jcenter()
}
dependencies {
     // 指定引入何种构建脚本，比如注释中引入了上传到 jecneter 和 maven 构建的脚本
    classpath 'com.android.tools.build:gradle:2.2.3'
</code></pre>

<p>//        classpath &lsquo;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3&rsquo;
//        classpath &lsquo;com.github.dcendents:android-maven-gradle-plugin:1.5&rsquo;</p>

<pre><code>}
</code></pre>

<p>}</p>

<p>allprojects {</p>

<pre><code>repositories {
     // 指定从何处下载子项目的库依赖
    jcenter()
</code></pre>

<p>//        maven {
//            url &lsquo;<a href="https://dl.bintray.com/gongmingqm10/maven/">https://dl.bintray.com/gongmingqm10/maven/</a>&rsquo;
//        }</p>

<pre><code>}
</code></pre>

<p>}</p>

<p>task clean(type: Delete) {</p>

<pre><code>delete rootProject.buildDir
</code></pre>

<p>}</p>

<p>```
build.gradle 文件中主要定义了 buildscript和 allprojects.repositories 两部分内容。确定了当前项目中使用的构建脚本库，以及项目中依赖库的下载仓库。</p>

<p>app/build.gradle 文件则定义了当前 module 的配置信息，比如 Android 工程中需要对 API，签名，项目依赖等信息进行配置。本文暂且略过其详细介绍。</p>

<p>认识了 Gradle 的基本配置，我们再看看如下这句熟悉的 Gradle 语言：</p>

<p><code>
compile 'net.gongmingqm10.uikit:bottomtab:0.2.0'
</code></p>

<p>所有的仓库都是按照 <code>Group_ID:ARTIFACT_ID:VERSION</code> 定义，所以对于 bottomtab 这个库而言， groupID = net.gongmingqm10.uikit， artifactId = bottomtab，version = 0.2.0。这种方式的好处是，我不需要在项目中导入众多的子 module，只需要通过这一句 DSL (领域特定语言) 引入仓库，并且能够随时更改版本。</p>

<p>下面我们一步步构建出这个 <code>net.gongmingqm10.uikit.bottomtab</code> 依赖库，上传到 jcenter，以在项目中直接使用。</p>

<h2>发布开源库</h2>

<p>本阶段我们将从零开始一步步构建并发布自己的第一款开源库。我们假设你已经在使用 Android Studio 开发应用，并且对 Gradle 有一定的了解。Android 仓库通常有两种格式，aar 和 jar，其中 aar 格式中包含 Android 自身相关的资源文件。而 jar 则主要包含 .class 类文件。考虑到我们希望做出一款 Bottom Tab 底部栏的库，因此我们最后使用的是 aar 格式。</p>

<h3>1. 配置 bintray</h3>

<p>首先注册 <a href="https://bintray.com/signup/oss">Bintray OpenSource</a>，如果之前有账号请跳过此步骤。通过 OpenSource 途径注册的 bintray 属于公开免费版，这正和我的期望相符。注意不要直接在首页注册，那样默认注册的是收费版本。</p>

<p>访问个人主页，点击 &ldquo;Add New Repository&rdquo; 跳转到创建 repository 页面，这里我们需要创建一个 name = maven，type = Maven 的 Repository。其中的 license 以及 description 按照个人偏好自行填写。</p>

<p><img src="/images/bintray_1.png" title="创建 maven 仓库" ></p>

<p>点击 <code>Create</code> 之后，我们可以顺利在首页看到 repository 中多了一个 maven 的仓库。</p>

<p><img src="/images/bintray_2.png" title="首页 maven 仓库" ></p>

<p>点击刚创建的 maven 仓库，如果是第一次创建，应该看不到任何的 package。我们需要 <code>Add New Package</code>。</p>

<p><img src="/images/bintray_3.png" title="maven 仓库" ></p>

<p>创建 package 时，我们填写 packageName = ‘bottom-tab’，这个属性比较重要，在后续步骤的 gradle 中需要用到。注意到需要填写 versionControl，我提前在 github 上创建了一个 repository bottomtab，然后把URL填入即可。</p>

<p>创建完成之后，bintray 的配置基本告一段落。但是正式开始之前我们还需要拿到 API_KEY，要不然所有人都可以更新你的库，岂不是一件很恐怖的事情。</p>

<p>总结这一步，我们所需要完成的事情：</p>

<ul>
<li>注册bintray，获得 bintray 用户名和 API KEY;</li>
<li>在 GITHUB 新建 bottom-tab 仓库；</li>
<li>在 bintray 新建 maven/bottom-tab 仓库；</li>
</ul>


<h3>2. 配置 GRADLE 工程</h3>

<p>为了发布一款 “接地气” 的 bottom-tab 库，我们先构建一个 BottomTabAndroid 应用，然后添加 bottom-tab 子模块，然后将 bottom-tab 子模块打包并发布到 jcenter 上，而 app 模块则是一个 demo。展示 bottom-tab 的实际效果。</p>

<p>具体代码请参考：<a href="https://github.com/gongmingqm10/BottomTabAndroid">https://github.com/gongmingqm10/BottomTabAndroid</a>。项目截图如下：</p>

<p><img src="/images/android_gradle.png" title="BottomTabAndroid" ></p>

<p>开发过程中，我先让 app 直接引用子模块 bottom-tab，功能开发完成之后，开始准备最重要的打包上传。</p>

<p><strong>Step 1: 配置 local.properties</strong></p>

<p>我们需要将 bintray 账户相关的 username 和 apikey 存放在此文件中。在提交代码时，此文件被自动忽略，从而保证了其安全性。默认的 local.properties 文件中保存了 sdk 路径。我们在其后添加上 uername 和 apikey:</p>

<p>```
sdk.dir=/Users/mingong/Project/sdk</p>

<p>bintray.user=gongmingqm10
bintray.apikey=thisissomesecretkeyanddonotcopyme</p>

<p>```</p>

<p>请将你自己的 username 和 apikey 复制替换到此文件。</p>

<p><strong>Step 2: 配置 $projectDir/build.gradle</strong></p>

<p>为了上传 bintray，我们需要使用 <a href="https://github.com/bintray/gradle-bintray-plugin">gradle-bintray-plugin</a> 和 <a href="https://github.com/dcendents/android-maven-gradle-plugin">android-maven-gradle-plugin</a> 两款构建插件。</p>

<p>```
buildscript {</p>

<pre><code>repositories {
    jcenter()
}
dependencies {
    classpath 'com.android.tools.build:gradle:2.2.3'

     // 添加如下插件以上传 AAR 至 bintray
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
}
</code></pre>

<p>}
&hellip;
```
请关注 buildscript{dependecies{}} 中配置，其余的配置项已省略。</p>

<p><strong>Step 3: 配置 $projectDir/bottomtab/build.gradle</strong></p>

<p>```
apply plugin: &lsquo;com.android.library&rsquo;
apply plugin: &lsquo;com.github.dcendents.android-maven&rsquo;
apply plugin: &lsquo;com.jfrog.bintray&rsquo;</p>

<p>android {</p>

<pre><code>compileSdkVersion 23
buildToolsVersion "23.0.3"

defaultConfig {
    minSdkVersion 17
    targetSdkVersion 23
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

}
buildTypes {
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
})
compile 'com.android.support:appcompat-v7:23.3.0'
testCompile 'junit:junit:4.12'
</code></pre>

<p>}</p>

<p>if (project.hasProperty(&ldquo;android&rdquo;)) { // Android libraries</p>

<pre><code>task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
</code></pre>

<p>} else { // Java libraries</p>

<pre><code>task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
</code></pre>

<p>}</p>

<p>task javadocJar(type: Jar, dependsOn: javadoc) {</p>

<pre><code>classifier = 'javadoc'
from javadoc.destinationDir
</code></pre>

<p>}</p>

<p>artifacts {</p>

<pre><code>archives javadocJar
archives sourcesJar
</code></pre>

<p>}</p>

<p>// 你只需要把这里的参数修改为自己的库名称即可
ext {</p>

<pre><code>siteUrl = 'https://github.com/gongmingqm10/BottomTabAndroid'
gitUrl = 'https://github.com/gongmingqm10/BottomTabAndroid.git'
currentVersion = '0.2.0'
groupId = 'net.gongmingqm10.uikit'
artifactId = 'bottom-tab'
desc = 'Android bottom tab'
</code></pre>

<p>}</p>

<p>group = groupId
version = currentVersion</p>

<p>install {</p>

<pre><code>repositories.mavenInstaller {
    pom {
        project {
            name artifactId
            description desc
            url siteUrl

            packaging 'aar'
            groupId groupId
            artifactId artifactId
            version currentVersion

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            developers {
                developer {
                    id 'gongmingqm10'
                    name 'Ming Gong'
                    email 'gongmingqm10@foxmail.com'
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}
</code></pre>

<p>}</p>

<p>Properties properties = new Properties()
properties.load(project.rootProject.file(&lsquo;local.properties&rsquo;).newDataInputStream())
bintray {</p>

<pre><code>user = properties.getProperty("bintray.user")
key = properties.getProperty("bintray.apikey")
configurations = ['archives']
pkg {
    repo = "maven"
    name = artifactId
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = ["Apache-2.0"]
    publish = true
    publicDownloadNumbers = true
}
</code></pre>

<p>}</p>

<p>```</p>

<p>注意，其中大部分配置都是很通用的，对于不同的 library，我们只需要修改如下不同的配置即可：</p>

<p>```
// 你只需要把这里的参数修改为自己的库名称即可
ext {</p>

<pre><code>siteUrl = 'https://github.com/gongmingqm10/BottomTabAndroid'
gitUrl = 'https://github.com/gongmingqm10/BottomTabAndroid.git'
currentVersion = '0.2.0'
groupId = 'net.gongmingqm10.uikit'
artifactId = 'bottom-tab'
desc = 'Android bottom tab'
</code></pre>

<p>}
```</p>

<h3>3. 正式发布 jcenter</h3>

<p>如上配置完成后，我们开始正式发布 AAR 到 jcenter。在项目根目录下，运行 gradle 命令：</p>

<p>```
./gradlew clean install bintrayUpload</p>

<p>```</p>

<p>如果一切顺利的话，这一步将直接成功。如果出错，请根据错误信息重新诊断并修复。再次访问 bintray/gongmingqm10/maven/bottom-tab 项目首页，你可以看到刚上传的新版本。</p>

<p><img src="/images/bintray_6.png" title="上传新版本成功" ></p>

<p>上传到个人仓库中，可以看到右上方有一个地址 <code>https://dl.bintray.com/gongmingqm10/maven</code>。这是个人的 maven 仓库地址，如果我们在在 $projectDir/build.gradle 添加此地址：</p>

<p>```
&hellip;</p>

<p>allprojects {</p>

<pre><code>repositories {
    jcenter()
    maven {
        url 'https://dl.bintray.com/gongmingqm10/maven/'
    }
}
</code></pre>

<p>}</p>

<p>&hellip;
<code>``
然后直接在 app/build.gradle 中，添加如下语句，则可以直接引用刚才上传的 bottom-tab。如果这种引用方式成功，说明我们的</code>./gradlew install bintrayUpload` 这一步没有问题。</p>

<p>```
dependencies {</p>

<pre><code>compile fileTree(include: ['*.jar'], dir: 'libs')
androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
})
compile 'com.android.support:appcompat-v7:23.3.0'
testCompile 'junit:junit:4.12'

compile 'net.gongmingqm10.uikit:bottomtab:0.2.0'
</code></pre>

<p>//    compile project(&lsquo;:bottomtab&rsquo;)
}
```</p>

<p>然而，事情到这里并没有完。因为我们使用的大部分的库是不需要在 $projectDir/build.gradle 中做配置的。重新观察 bottom-tab 这个主页面，右下角 <code>linked to</code> 可以点击链接 <code>Add to JCenter</code>。这一步才是真正的发布 library 到 JCenter 中。然后我们需要做的就是等待 JCenter 官方团队的审核。一般两三个工作日就可以审核通过。然后下一次引用，你就不需要添加私有的 maven 地址了。当然如果你对这个库有更新，也需要重新点击 Add to JCenter。</p>

<p>所以最后的效果是  <code>compile 'net.gongmingqm10.uikit:bottomtab:0.2.0'</code> 可以一键引用我们新建的 Android 底部栏组件，试用效果如下：</p>

<p><img src="/images/bintray_demo.png" title="底部栏效果" ></p>

<p>具体使用方法，请参考 <a href="https://github.com/gongmingqm10/BottomTabAndroid/blob/master/README.md">BottomTab README</a>。</p>

<h2>参考</h2>

<ul>
<li><a href="https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en">How to distribute your own Android library through jCenter and Maven Central from Android Studio</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know More About Android Inflater.inflate()]]></title>
    <link href="http://www.gongmingqm10.net/blog/2017/02/13/know-more-about-android-inflater-inflate/"/>
    <updated>2017-02-13T15:37:45+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2017/02/13/know-more-about-android-inflater-inflate</id>
    <content type="html"><![CDATA[<p>在 Android 开发中，有很多看起来 “约定俗成” 的代码，有时候不妨停下来想一想深层次的含义。最近我在给 Fragment 填充布局时，写到一句熟悉的代码：</p>

<p>```java</p>

<pre><code>@Nullable
@Override
public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.activity_main, container, false);
    return view;
}
</code></pre>

<p>```</p>

<p>我又一次陷入了思索，其中的第三个参数 <code>false</code> 到底是什么意思，此处能不能变为 <code>true</code>。</p>

<!-- more -->


<h2>探究</h2>

<p>首页我们还是通过函数本身的注释来看各参数的作用，通过源码查看如下：</p>

<p>```</p>

<pre><code>/**
 * Inflate a new view hierarchy from the specified xml resource. Throws
 * {@link InflateException} if there is an error.
 * 
 * @param resource ID for an XML layout resource to load (e.g.,
 *        &lt;code&gt;R.layout.main_page&lt;/code&gt;)
 * @param root Optional view to be the parent of the generated hierarchy (if
 *        &lt;em&gt;attachToRoot&lt;/em&gt; is true), or else simply an object that
 *        provides a set of LayoutParams values for root of the returned
 *        hierarchy (if &lt;em&gt;attachToRoot&lt;/em&gt; is false.)
 * @param attachToRoot Whether the inflated hierarchy should be attached to
 *        the root parameter? If false, root is only used to create the
 *        correct subclass of LayoutParams for the root view in the XML.
 * @return The root View of the inflated hierarchy. If root was supplied and
 *         attachToRoot is true, this is root; otherwise it is the root of
 *         the inflated XML file.
 */
public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot) {
    ...
}
</code></pre>

<p>```</p>

<p>上面的解释比较官方，但是不一定好理解。至少我就看了好几遍，最后结合网上的总结才明白其含义。</p>

<p>首先就 <code>LayoutInflater.inflate()</code>这个函数而言，功能是将一段 XML 资源文件加载成为 View。所以通常用于将 XML 文件实例化为 View。然后获取 View 上的组件最后操作之。</p>

<p>对于这个函数，我们通常容易引发歧义的地方在 <code>attachToRoot</code>的值，当这个值为 true/false 时，是由显著的区别的。</p>

<h3>attachToRoot = true</h3>

<p>当设置 <code>attachToRoot = true</code> 时, 表示 xml 实例化的 View 会被添加到第二个参数 rootView 中。 所以此时相当于处理了两件事：</p>

<ul>
<li>将 XML 实例化为 View；</li>
<li>将实例化的 View 添加到非空的 rootView 中；</li>
</ul>


<p>经典的使用方法，对于不为空的 container，</p>

<p>```java
LayoutInflater.from(getContext()).inflate(R.layout.demo, container, true);</p>

<p>```</p>

<p>或者:</p>

<p><code>java
LayoutInflater.from(getContext()).inflate(R.layout.demo, container);
</code></p>

<p>当 ViewGroup 不为空时，第三个 true 参数可以直接省略。</p>

<h3>attachToRoot = false</h3>

<p>当设置 <code>attachToRoot = false</code> 时，表示直接将 xml 实例化为 View，而不用将 View 添加到指定的 ViewGroup 中。如果需要将 View 加入到 ViewGroup 中，还需要手动的调用 <code>ViewGroup.addView(view)</code>。</p>

<p>经典写法为：</p>

<p><code>java
LayoutInflater.from(getContext()).inflate(R.layout.demo, container, false);
</code></p>

<p>注意：对于上面的第二个参数 container，如果直接设置为 null，有可能导致 View 的位置或者大小等显示不正确。所以上面代码做了两件事：</p>

<ul>
<li>将 XML 实例化为 View;</li>
<li>根据 ViewGroup 为子元素 View 设置正确的位置、大小等 LayoutParams 属性；</li>
</ul>


<p>所以，实例化 View 时，如果已经明确知道父容器 ViewGroup，请直接传递 ViewGroup，避免出现子 View 显示时的位置、大小等异常情形。</p>

<h3>比较</h3>

<p>对于非空的 ViewGroup continer，以下两句是等效的：</p>

<p><code>java
View buttonView = LayoutInflater.from(getContext()).inflate(R.layout.ugly_button, container, false);
container.addView(buttonView);
</code></p>

<p>与</p>

<p><code>java
View buttonView = LayoutInflater.from(getContext()).inflate(R.layout.ugly_button, container, true);
</code></p>

<h2>应用</h2>

<p>通常将 XML 实例化为 View 涉及到以下常见情形：</p>

<h3>ListView/RecyclerView 中 Adapter.getView</h3>

<p>```java
@Override
public View getView(int position, View convertView, ViewGroup parent) {</p>

<pre><code>ViewHolder viewHolder;

if (convertView == null) {
    convertView = LayoutInflater.from(context).inflate(R.layout.ugly_button, parent, false);
    viewHolder = new ViewHolder();
    convertView.setTag(viewHolder);
} else {
    viewHolder = (ViewHolder) convertView.getTag();
}

// ...
return convertView;
</code></pre>

<p>}
```
此处应该设置 <strong>attachToRoot = true</strong></p>

<p>因为 ListView 何时显示，以及如何显示。应该是由 ListView 决定的。Adapter.getView() 主要是根据指定的函数返回相应的 View 实例。显示逻辑则由 ListView 处理，因此设置 <code>attachToRoot = true</code>。</p>

<h3>自定义 View</h3>

<p>为了使得布局的层级足够浅，我们在布局时通常使用 <code>&lt;merge&gt;&lt;/merge&gt;</code> 定义 layout 的根元素，然后将 layout 填充到自定义的 View 中。</p>

<p>res/layout/bottom_tab_item.xml:</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;merge xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"&gt;

&lt;LinearLayout
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    android:orientation="vertical"&gt;
    &lt;ImageView
        android:id="@+id/tab_icon"
        android:layout_width="24dp"
        android:layout_height="24dp"
        android:paddingTop="2dp" /&gt;
    &lt;TextView
        android:id="@+id/tab_label"
        android:layout_marginTop="1dp"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="14dp"
        tools:text="Tab"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p></merge>
```</p>

<p>BottomTabItem.java:</p>

<p>```java
public class BottomTabItem extends RelativeLayout {</p>

<pre><code>...

public void init() {
    LayoutInflater.from(getContext()).inflate(R.layout.bottom_tab_item, this, true);
}
...
</code></pre>

<p>}
```</p>

<p>对于自定义的 BottomTabItem，需要将定义的 XML 文件添加到其中。所以需要直接将 XML 实例化 View 作为子元素，添加到 BottonTabItem 中。</p>

<p>所以，对于自定义 View， 需要设置 <code>attachToRoot = true</code>。</p>

<h3>Fragment.onCreateView()</h3>

<p>回顾我们最看我们最开始遇到的代码块：</p>

<p>```
@Nullable
@Override
public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {</p>

<pre><code>View view = inflater.inflate(R.layout.activity_main, container, false);
return view;
</code></pre>

<p>}
```</p>

<p>onCreateView 函数直接反馈 View，可以看出函数只需要拿到实例化的 View，至于 View 是如何添加到 Fragnent 中，则是底层 Fragment 的逻辑。</p>

<p>如果在 Fragment 中不恰到的处理这个 attchToRoot 参数，会直接导致严重的崩溃性问题。而且通常出现这种问题时很不容易被发现。</p>

<p>所以，对于 Fragment 添加 layout，需要设置 <code>attachToRoot = false</code>。</p>

<h3>ListView headerView/footerView 等</h3>

<p>对于 ListView.addHeaderView() / addFooterView() 也是我们经常使用 LayoutInflator.inflate() 很多的场合。</p>

<p>从 ListView.addHeaderView(View view) 函数定义可以看到，ListView 需要将实例化的 View 添加作为 header/footer view，所以显然需要的只是 View 的实例。添加或者删除操作通过 ListView 内部进行处理。</p>

<p>所以，对于 ListView 添加 headerView, footerVuew 等，需要设置 <code>attachToRoot = false</code>。</p>

<h2>结语</h2>

<p>知道 LayoutInflater.inflate 的细微知识点，可能会花费你一下午的时间。但是却可以让你对所写的代码更加自信，并且能够对事物认识更加深刻。何乐而不为呢？</p>

<h2>参考</h2>

<ul>
<li><a href="http://blog.chengdazhi.com/index.php/110">深入理解LayoutInflater.inflate()</a></li>
<li><a href="https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/">Understanding Android&rsquo;s LayoutInflater.inflate()</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ButterKnife Principle]]></title>
    <link href="http://www.gongmingqm10.net/blog/2016/05/11/butterknife-principle/"/>
    <updated>2016-05-11T15:15:25+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2016/05/11/butterknife-principle</id>
    <content type="html"><![CDATA[<p><img src="http://7u2gky.com1.z0.glb.clouddn.com/576124-831ee4dbd091aa30.png" width="250" alt="ButterKnife 原理" /></p>

<p>最近在研究 Java 中的 Annotation，初衷是先了解注解，然后再了解下 Android 开发中常用框架的原理。经历的 Android 项目中，使用注解比较多的是：<a href="https://github.com/JakeWharton/butterknife">ButterKnife</a>, <a href="https://github.com/roboguice/roboguice">Roboguice</a>, <a href="https://github.com/roboguice/roboguice">Dagger</a> 。ButterKnife 主要是 View Binding, 而 Roboguice 和 Dagger 则主要是做 DI(Dependency Injection)。本文主要研究 ButterKnife 的原理。</p>

<p>开始之前，还是应该向 ButterKnife 的作者 Jake Wharton 大神以及开源社区致敬。</p>

<!-- More -->


<h2>ButterKnife 初瞰</h2>

<p>ButterKnife 到底是什么？看看官方的解释：</p>

<blockquote><p>Bind Android views and callbacks to fields and methods.</p></blockquote>

<p>通过 ButterKnife <a href="http://jakewharton.github.io/butterknife/">官方文档</a>，我们可以很快速的使用它。并且可以看到 ButterKnife 主要是实例化 View 或者给某个 View 添加各种事件 Listenters。</p>

<p><img src="http://7u2gky.com1.z0.glb.clouddn.com/576124-2be2b864707172b7.png" height="300" alt="ButterKnife View Binding" /></p>

<p>所以使用 ButterKnife 主要有几步：</p>

<p>1.Gradle 中引入 ButterKnife 框架：</p>

<p><code>
compile 'com.jakewharton:butterknife:8.0.1'
</code>
2.ButterKnife 初始化:</p>

<p>```
@Override
protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);   
setContentView(getLayoutResourceId());    
ButterKnife.bind(this);
</code></pre>

<p>}}
```
3.声明 Field/Method</p>

<p>```
@Bind(R.id.btn_home)ImageView homeBtn;
@Bind(R.id.btn_explore)ImageView exploreBtn;
@OnClick(R.id.btn_home) void clickHomeBtn() {</p>

<pre><code>// Handle the home btn click
</code></pre>

<p>}
```</p>

<h2>Java Annotation</h2>

<p>如果你对注解了解比较少，在进一步了解 ButterKnife 之前，有必要了解一下 Java Annotation 的基础知识。可以参考如下两份资料：</p>

<ol>
<li>Mkyong <a href="http://www.mkyong.com/java/java-custom-annotations-example/">Java Custom Annotations</a></li>
<li>Trenia <a href="http://trinea.github.io/download/pdf/android/java-annotation.pdf">Java Annotations</a></li>
</ol>


<p>通过上面的例子以及讲解，我们可以知道如何自定义注解。自定义注解我们需要知道两个基础的元注解<code>@Retention</code> 和 <code>@Target</code>.</p>

<h3>元注解 @Retention</h3>

<p><code>@Retention</code> 保留时间：有三类值可以选择，<code>SOURCE</code>  <code>RUNTIME</code> <code>CLASS</code>。</p>

<p><code>SOURCE</code> 源码时保留：使用此类的注解多为标记注解，比如 <code>@Override</code>、<code>@Deprecated</code>、<code>@SuppressWarnings</code> 等。</p>

<p><code>RUNTIME</code> 运行时保留：程序在运行过程中，使用这些 Annotation, 比如我们常用的 <code>@Test</code>。</p>

<p><code>CLASS</code> 编译时保留：Java 文件在编译时由 apt 自动解析，需要自定义类继承自 AbstractProcessor 并重写 Process 函数。比如 ButterKnife 中使用的  <code>@BindView</code>, <code>@OnClick</code> 等就是声明为 CLASS 的。</p>

<h3>元注解 @Target</h3>

<p>Target 表示注解可以用来修饰哪些元素。可选值包括 TYPE, METHOD, CONSTRUCTOR, FIELD, PARAMETER 等。</p>

<h2>ButterKnifeProcessor</h2>

<p>ButterKnife 中所有的注解都使用 Retention 为 CLASS 保留。所以在 ButterKnife 中，有个很重要的 ButterKnifeProcessor。当 java 文件进行编译时，ButterKnifeProcessor 的 process() 方法被调用，生成相关的 ViewBinder 类，用于将 View 或者 Listener 进行绑定。</p>

<p>ButterKnifeProcessor 的关键逻辑如下：</p>

<p><img src="http://7u2gky.com1.z0.glb.clouddn.com/576124-0fa0624d662090af.png" width="600" alt="ButterKnifeProcessor.process()" /></p>

<p>process() 会找到所有 ButterKnife 相关的 annotation，并将这些相应的注解生成为 ViewBinder 类，一个 ViewBinder 示例如下：</p>

<p><img src="http://7u2gky.com1.z0.glb.clouddn.com/576124-a9f0fdf997e95ed8.png" width="600" alt="Screen Shot 2016-05-11 at 2.52.20 PM.png" /></p>

<p>ViewBinder 通过 findViewById 实例化 Activity 中页面上的组件，并且能够设置各控件的点击时间，滑动事件等。</p>

<blockquote><p>为什么 ButterKnife Annotation 的字段或者方法不能声明为 private?</p></blockquote>

<p>bind() 方法中，通过 activity.homeBtn 对 View 赋值。因此所有 ButterKnife annotation 标记的 field 或者 method 都不能声明为 private, 因为 private 没办法在 ViewBinder 中直接访问。由此可见：</p>

<blockquote><p>ButterKnife 并不是依靠反射实现 View Injection 的！</p></blockquote>

<h2>ButterKnife.bind(this)</h2>

<p>在 ButterKnife 工作之前，我们一定得在设置 View  后调用 <code>ButterKnife.bind(Activity)</code> ，这样才能使 ButterKnife View 注入成功。那么 ButterKnife.bind(Activity) 是如何工作的呢？</p>

<p><img src="http://7u2gky.com1.z0.glb.clouddn.com/576124-dce842ddf87bb891.png" width="600" alt="ButterKnife.bind(this)" /></p>

<p>App 在打包时，ButterKnife Processor 就为所有使用 ButterKnife 注解的 Activity 生成 ViewBinder()。通过上述代码可以看到，ButterKnife 会尝试实例化当前 Activity 所关联的所有 ViewBinder 类。实例化之后再调用 <code>ViewBinder.bind(...)</code> 方法，bind() 方法是在 App 运行过程中才会被调用的。于是当前 Avtivity 的 View 被实例化赋值，如果有点击事件的注解，也会绑定相应的事件。</p>

<h2>结语</h2>

<p>ButterKnife 主要是做 View 注入的，使用起来比较简便。当然如果你想做一些 依赖注入，比如 Android MVP 架构中 Activity 与 Presenter 的依赖。你可能需要借助一些其他的库， 比如 Dagger。研究下 ButterKnife 的原理，才发现这个库做得如此的睿智。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App 本地化解决方案]]></title>
    <link href="http://www.gongmingqm10.net/blog/2016/03/19/app-localisation-solution/"/>
    <updated>2016-03-19T13:38:10+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2016/03/19/app-localisation-solution</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>“本地化” 这个词对大家而言并不陌生，文艺点的解释大概就是 “入乡随俗” 吧。当然我们这里的本地化主要指的软件产品的本地化。对于某个国外应用，如果需要投放到中国市场，需要注意哪些问题呢？本文主要从开发的视角来探讨应用本地化的问题。</p>

<!-- More -->


<h2>本地化</h2>

<p>本地化(Localisation)主要是提升软件对于不同地区不同环境的用户的用户体验问题。从语言角度来说，我们需要给 App 支持中文。但是翻译就是本地化的全部吗？</p>

<p>谈到体验问题，语言只是用户体验的一部分。为了提升用户体验，本地化除了语言翻译之外，还包括许多内容。本地化大体受语言、网络、文化等因素的影响。</p>

<p><strong>1.语言</strong></p>

<p>语言关系着用户能否使用你的App，是否理解App的核心价值。所以在移动开发中，开发人员能够轻易的创建出针对不同语言的字符串资源文件，App运行时会根据当前设备的语言设置加载对应的字符串资源。这是Android和iOS框架本身所支持的。所以语言是本地化最直接的一部分，也是最容易做的一部分。</p>

<p><strong>2.网络</strong></p>

<p>网络意味着连通性，决定着App中的各项服务能否正常使用。比如某跑步软件中，内嵌 Google 地图来记录用户的位置以及轨迹，当一个中国用户下载这个应用时并不能正常使用。因为应用没有考虑到中国用户对 Google 服务访问受限。网络问题在中国本地化中尤其突出，因为你需要时刻考虑"防火长城"对软件中各服务模块的影响。</p>

<p><strong>3.文化</strong></p>

<p>本地化方面文化的成分虽然不多，但是却是最值得挖掘的地方。以文本方向为例：Arabic文字是从右到左的方向，Android4.2版本开始全面支持Right to Left布局，iOS也在WWDC2015中宣布全面支持右到左的文字布局。除了文本方向之外，文化还包括用户行为偏好。比如美国用户可以喜欢用运动相机拍摄极限视频。但是中国用户却更喜欢用运动相机自拍，然后分享朋友圈。不同的用户习惯决定着产品差异化的定位。</p>

<p>有了上述对本地化的理解。那我们可以来比较一下 翻译、本地化、国际化的异同点。下面我们可以了解下主要区别：</p>

<p><img src="http://rack.2.mshcdn.com/media/ZgkyMDEyLzAyLzEzLzE3XzAyXzUyXzgzM19maWxlCnAJdGh1bWIJMTIwMHg5NjAwPg/00de5e48" alt="本地化比较" /></p>

<h2>实践与坑</h2>

<p>了解了本地化之后，那么在整个的项目实践中，我们有哪些需要注意的地方呢？</p>

<h3>翻译</h3>

<p>在本地化翻译过程中，我们一般需要先进行翻译相关文本。然后给客户验证反馈。翻译过程中需要提前确认，特别是对于法律性质的长文本翻译，可能还要和客户的法务部门打交道，敦促他们尽快完成翻译校对服务。当然，如果你自己没办法翻译一些服务条款等，可以把翻译服务委托给其他翻译机构。</p>

<p>翻译的沟通和确认可以直接使用 Google Excel 在线协作编辑，当然也可以使用 <a href="http://transfix.io/">Transfix</a> 平台协作翻译。</p>

<h3>代码管理</h3>

<p>对于本地化项目，我们一般推荐客户在同一份代码库上进行开发。这样对于后期发布新功能将很有帮助。如果一开始就采用两套不同的代码库来做本地化，那以后英文版上增加了新功能，再复制到现在的版本上，将增加很多不必要的工作量，并带来诸多不一致性。</p>

<p>当然如果你综合考虑之后，觉得中文版的App和英文版的App将有很大差异化，客户想直接做一个“具有中国特色的本地化”App，那就勇敢的重新开始吧。</p>

<p>在现实情况中，如果你能够给客户做中国的本地化，那么未来可能的业务也许是其他语言的本地化。这时候在代码管理的时候如果可以多考虑一点，也许可以带来新的商机。</p>

<h3>国内媒体分享</h3>

<p>国内媒体分享可以说是本地化中一个很重要的方面。美国的社交平台主要是 Facebook, Twitter, Pinterest, youtube 等，但是在中国这些分享平台将是 微信朋友圈，QQ 空间，新浪微博, youku等。</p>

<p>如果选择做国内媒体分享，需要确定是使用系统默认(Android系统默认的分享方式支持QQ, Wechat等； iOS不支持国内的渠道分享)分享组件，还是使用各社交平台的SDK进行集成。工作量是不一样的，所以要根据项目的进度安排进行合适的计划。</p>

<p>如果你已经决定要集成各大社交平台 SDK 进行分享，那么我们应该尽快提交审核，申请相关的key和 secret。因为我们要预防审核过程中的各种问题。</p>

<h3>网络-GFW</h3>

<p>网络可用性这个问题估计只有在做 APP 汉化的时候才会遇到。具体来说，中国市场Google服务(包括Google Map, Google Analytics, Google Cloud Messaging, Google Plus)等处于不可用(或者不稳定)状态。因此，除了App的文字资源需要汉化之外，App中使用的系列Google服务也应该更换为在国内可以使用的服务。</p>

<p>由于Google服务不可用的情况，很多国产Android手机将手机中的Google服务给移除掉了，所以国内的 App应用请慎用Google服务(组件)，毕竟网络是个很大的问题。</p>

<p>除了Google服务之外，对于其他的服务也需要考虑稳定性等。因为有些国外的服务虽然不是Google的，但是在国内也很难访问。</p>

<p>App中常见的服务：</p>

<ol>
<li>地图：Google Map不可用，国内可以替代为高德地图服务；</li>
<li>社会化分享/登录: Google plus登录，Facebook和Twitter分享；</li>
<li>App统计：Google Analytics不稳定；国内可以替换为Umeng或者Flurry；</li>
<li>消息推送：Google Cloud Messaging不稳定；国内可以用个推或 JPush；</li>
</ol>


<p>当我们在对应用做服务选择的时候，除了需要考虑网络易用性之外，也需要考虑所选框架的文档是否适合客户的后期维护。因为我们的项目一般结束之后，要让客户能够快速接手，如果选择一些文档不全后期支持很差的服务，那团队解散之后。客户将很难维护这份代码。</p>

<h3>应用分发</h3>

<p>应用开发完成之后，离发布还有一步。你需要将App分发到应用市场中，才能够真正让用户使用App。这里的应用分发指Android应用的分发。对于iOS的应用分发，按照官方流程走，应该不会出现太多意外。</p>

<p>Android 应用市场分发，在中国尤其繁琐。由于Google Play Store在国内的Android手机中基本不可用，从而给了其他应用商店很多机会，比如：腾讯应用宝、百度市场、豌豆荚、安卓市场、360市场以及小米市场等。</p>

<p>在我们给某客户分发应用的时候，发现Android应用市场一般会自动爬取Google Play上的应用，于是我们的英文版就被官方市场收录，当时我们提交开发完成的中文版应用的时候，我们被告知应用侵权无法上架。最后经过复杂的邮件沟通，版权证明，应用认领等来解决这些版权问题。而这种特定的应用审核问题是没有提前预知的。这种问题也使得整个上线时间推迟了半个月左右。</p>

<p>所以在应用分发之前，我们应该提前在应用上线之前进行试水。避免这种应用审核可能带来的风险。</p>

<h2>写在后面</h2>

<p>App本地化不再是字符串的本地化，包括影响软件可用性的服务的本地化。有效且全面的本地化才能够真正构建出一款易用“接地气”的App。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 转屏那些事儿]]></title>
    <link href="http://www.gongmingqm10.net/blog/2015/12/16/you-should-know-about-android-rotate/"/>
    <updated>2015-12-16T15:39:43+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2015/12/16/you-should-know-about-android-rotate</id>
    <content type="html"><![CDATA[<p>在 Android 开发或面试过程中，屏幕旋转是一个容易让人忽视的知识点。在我之前经历的项目中，App 通常是为竖屏状态设置的，所以通常我们会对每个页面都设置竖屏方向，这时候我们不需要考虑旋转屏问题。但是最近项目中，我们的 App 是为平板设计的，而横竖屏旋转是属于客户的一个需求，当然平板上横竖屏的确比较常用。所以就借此机会研究了下 Android 横竖屏问题。</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/portrait_landscape.png" width="500" alt="Android 横竖屏" /></p>

<!-- More -->


<p>横竖屏之所以需要引起开发者的注意，是因为 App 在横竖屏切换的过程中，页面会重绘，那么页面上已有的数据（比如登录页面已经输入的用户名）如何保存成为了一个问题。按照官方的推荐，Activity本身的确有处理旋转屏事件的函数，但是当一个页面中需要保存的数据很多的时候（比如很多 EditText），还是手工处理，就显得有些繁琐了。下面我们将循序渐进地探索 Android 屏幕旋转之最佳实践。</p>

<h2>Activity 旋转中的保存与恢复</h2>

<p>在解决问题或者探索最佳实践的时候，我们可以从简单的问题入手，慢慢衍生至复杂的情形，最后再抽象出一些比较通用的解决方案。这一步我们单纯的探索一个 Activity（没有 Fragment）的数据保存与恢复。</p>

<h3>Activity 的生命周期</h3>

<p>Activity 从创建到呈现在用户面前到消亡，有着自己完整的生命周期：</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/activity_lifecycle.png" width="500" alt="Activity 生命周期" /></p>

<p>旋转屏幕时，打印相关 Log 如下：</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/activity_rotate_cycle.png" width="600" alt="Activity 旋转中的生命周期" /></p>

<p>从 Log 可以看到，在屏幕旋转时，原来的 Activity 调用了 onDestroy，随后重新实例化了一个 MainActivity。重新实例化的 MainActivity 也会经历 “onCreate &ndash;> onStart &ndash;> onResume” 的生命周期。</p>

<h3>Activity 中窗口保存与恢复</h3>

<p>为了进一步探索 Activity 在旋转屏过程中的数据保存及恢复的逻辑，我们构造了一个具有用户名和密码的登录界面。当用户在用户名中输入用户名时，这时候旋转屏幕，此时期望的操作应该是输入的用户名仍然能够保留：</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/activity_login.png" width="400" alt="Activity Login 页面" /></p>

<p>在不添加任何额外代码的情况下，我们可以看到输入框中的数据在旋转屏后仍然能够保留，这些控件基本状态的值是如何被保留的呢？</p>

<p>Activity 中方法 <code>protected void onSaveInstanceState(Bundle outState) {...}</code> 主要做状态保存相关的处理，如果我们有需要特地保存的变量等，我们可以在 <code>onSaveInstanceState</code> 中保存，保存后的 bundle 以 outState Bundle 的格式保存。当 Activity 再次被初始化时，<code>onCreate(Bundle savedInstanceState)</code> 会将保存的 bundle 传递给 Activity 主页面，Activity 主页面接收到这些状态保存的数据后，能够根据保存中的控件的ID信息，状态数据等对页面进行自动的初始化。当我们转屏时，会主动触发 <code>onSaveInstanceState</code> 被调用。Log 打印如下：</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/activity_onrestore_data.png" width="600" alt="Activity onSaveInstanceState &amp; onRestoreInstanceState" /></p>

<p>根据 Log 很明确看出在旋转屏之后，随着 onPause 的执行，<code>onSaveInstanceState</code> 也被执行。当 Activity 再次初始化时，<code>onCreate(Bundle savedInstanceState)</code> 会传递回一个非空的 savedInstanceState（而当 Activity 第一次初始化时此值为空），同时 <code>onRestoreInstanceState</code> 也会被调用，用来将保存的窗口状态信息重新应用：</p>

<p>生命周期：<code>onCreate</code> &ndash;> <code>onStart</code> &ndash;> <code>onResume</code> &ndash;> Running 转屏 &ndash;> <code>onPause</code> &ndash;> <code>onSaveInstanceState</code> &ndash;> <code>onStop</code> &ndash;> <code>onDestroy</code> &ndash;> <code>onCreate</code> &ndash;> <code>onStart</code> &ndash;> <code>onRestoreInstanceState</code> &ndash;> <code>onResume</code>;</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/activity_savedInstanceState.png" width="600" alt="Android savedInstanceState" /></p>

<p>通过对 <code>savedInstanceState</code> 的查看，发现 savedInstanceState 中包含有 Key 为 <code>android:viewHierarchyState</code> 的 bundle 数据，此 bundle 数据具体内容如下：</p>

<p>```
Bundle[{android:views={</p>

<pre><code>    16908290=android.view.AbsSavedState$1@347440f8,         2131492927=android.view.AbsSavedState$1@347440f8,       2131492928=android.view.AbsSavedState$1@347440f8,       2131492929=android.support.v7.widget.Toolbar$SavedState@391b69d1,       2131492930=android.view.AbsSavedState$1@347440f8,       2131492944=TextView.SavedState{138fec36 start=8 end=8 text=gongming},       2131492945=TextView.SavedState{16043737 start=0 end=0 text=},       2131492946=android.view.AbsSavedState$1@347440f8
},
android:focusedViewId=2131492944}
</code></pre>

<p>]
```
可以看到 username 的输入框 EditText，其 ID 以及当前的值都已经保存至 savedInstanceState 中。</p>

<p>那么，对于 Activity.java 的而言，最重要的保存数据和恢复数据的源代码如下：</p>

<p>```</p>

<pre><code>private static final String WINDOW_HIERARCHY_TAG = "android:viewHierarchyState";

protected void onSaveInstanceState(Bundle outState) {
    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());
    Parcelable p = mFragments.saveAllState();
    if (p != null) {
        outState.putParcelable(FRAGMENTS_TAG, p);
    }
    getApplication().dispatchActivitySaveInstanceState(this, outState);
}

protected void onRestoreInstanceState(Bundle savedInstanceState) {
    if (mWindow != null) {
        Bundle windowState = savedInstanceState.getBundle(WINDOW_HIERARCHY_TAG);
        if (windowState != null) {
            mWindow.restoreHierarchyState(windowState);
        }
    }
}
</code></pre>

<p>```
这就是为什么我们没有做过多的处理却可以让 App 在旋转屏幕时仍然自动保存恢复输入框中的文字。</p>

<h3>Activity 中数据保存与恢复</h3>

<p>既然 Activity 本身对窗口（控件）的状态信息进行了保存及恢复处理。那么我们在屏幕切换时最应该关心的就是页面数据的保存与恢复。页面数据主要有两种：</p>

<ul>
<li>API 请求的数据：在横竖屏切换时对API数据进行保存及恢复能够防止 API 的重复调用；</li>
<li>页面中的状态值：在 Activity 运行过程中被改变的状态值，在恢复时需要手动保存及恢复，以便不影响状态值相关的页面逻辑；</li>
</ul>


<p>在 Activity 中进行变量的存储及读取时，使用 <code>onSaveInstanceState</code> 进行数据的存储，使用 <code>onRestoreInstanceState</code> 进行数据的读取：</p>

<p>```</p>

<pre><code>private boolean shouldSaveData = false;

private static final String KEY_SHOULD_SAVE_DATA = "save_data_key";

@Override
protected void onSaveInstanceState(Bundle outState) {
    outState.putBoolean(KEY_SHOULD_SAVE_DATA, shouldSaveData);
    super.onSaveInstanceState(outState);

    Log.i(TAG, "@@Activity onSaveInstanceState@@" + this.toString());
}

@Override
protected void onRestoreInstanceState(Bundle savedInstanceState) {
    super.onRestoreInstanceState(savedInstanceState);
    shouldSaveData = savedInstanceState.getBoolean(KEY_SHOULD_SAVE_DATA);
    Log.i(TAG, "@@Activity onRestoreInstanceState@@" + this.toString());
}
</code></pre>

<p>```</p>

<h3>Activity 中弹框的状态保存及恢复</h3>

<p>在 Activity 中经常会遇到 Dialog，甚至像下面具有输入框的 Dialog：</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/activity_signature_dialog.png" width="400" alt="Android Dialog" /></p>

<p>当用户点击 Login 按钮，弹出弹框需要用户签名，这时如果屏幕不小心进行了一次旋转，那么这个弹出的 Dialog 便消失，随之消失的还有用户输入了一半的输入框文字。Activity 在旋转过程中对于 Dialog 自身的生命周期进行很好的管理，如果为了达到更好的用户体验，转屏时也需要保存输入框状态，那么此处我们强烈推荐用户使用 <a href="http://developer.android.com/reference/android/app/DialogFragment.html">DialogFragment</a> 代替 Dialog。</p>

<p>由于 Fragment 也具有生命周期，使用 DialogFragment 之后，我们结合 Activity 与 Fragment 的生命周期，查看整个过程经历了哪些流程。</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/fragment_lifecycle.png" width="300" alt="Frgament 生命周期" /></p>

<p>结合 DialogFragment 在 Activity 中旋转的重新初始化及数据恢复，我们可以看到执行顺序如下：</p>

<p><img src="http://7xj9js.com1.z0.glb.clouddn.com/activity_fragment_rotate.png" width="500" alt="Android Fragment 执行顺序" /></p>

<p>在转屏时，Activity 和 Fragment 都会重新实例化，并且都通过 <code>onSaveInstanceState</code> 进行状态保存。值得注意的是不同于 Activity, Fragment 并没有 <code>onRestoreInstanceState</code> 方法，Fragment 的状态恢复在 <code>onActivityCreated</code> 方法中。查看 DialogFragment 源码，我们可以看到如下调用：</p>

<p>```</p>

<pre><code>@Override
public void onActivityCreated(Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);
    ...
    if (savedInstanceState != null) {
        Bundle dialogState = savedInstanceState.getBundle(SAVED_DIALOG_STATE_TAG);
        if (dialogState != null) {
            mDialog.onRestoreInstanceState(dialogState);
        }
    }
}

...

@Override
public void onSaveInstanceState(Bundle outState) {
    super.onSaveInstanceState(outState);
    if (mDialog != null) {
        Bundle dialogState = mDialog.onSaveInstanceState();
        if (dialogState != null) {
            outState.putBundle(SAVED_DIALOG_STATE_TAG, dialogState);
        }
    }
    ...
}
</code></pre>

<p>```</p>

<p>由于 DialogFragment 其实就是展示一个 Dialog，而 DialogFragment 对 Dialog 的状态保存及恢复使得 Dialog 的状态得以保存。</p>

<h2>Fragment 状态的保存及恢复</h2>

<p>有了上面对 DialogFragment 转屏时状态保存及恢复的研究，那么在一个普通的 Fragment(DialogFragment 是一种特殊的 Fragment) 中状态保存及恢复又是怎样的呢？</p>

<p>实际上通过 DialogFragment 我们可以知道保存状态值还是通过 <code>onSaveInstanceState</code> 方法，而 <code>onActivityCreated</code> 中则可以获取状态值。</p>

<p>在转屏时，我们会有很多特殊的考虑。所以如果你的 App 需要支持横竖屏切换，你可以留意如下几点：</p>

<h3>1. Dialog 转屏消失问题</h3>

<p>Dialog 转屏消失在现实中是一个很常见的情形，对应的解决方案就是利用 DialogFragment 来替代 Dialog。这样旋转屏幕时弹起的 Dialog 就不会消失。</p>

<h3>2. Fragment 保存组件信息的坑</h3>

<p>最近在项目中发现，有时候放置在 Fragment 中的 ListView 转屏后不能自动回到转屏之前的位置。后来发现导致原因是 Activity 的 Layout 在添加 Fragment 时候没有指定 id 或 tag。于是该 Fragment 在 Activity 重绘时不能被系统当作 “同一个” Fragment，所以旋转时控件的一些基本状态信息没办法恢复。</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;fragment xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:id="@+id/home_fragment"
android:layout_width="match_parent"
android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
android:paddingBottom="@dimen/activity_vertical_margin"
android:name="net.gongmingqm10.androidrotate.HomeFragment" /&gt;
</code></pre>

<p><code>``
其中的</code>android:id=&ldquo;@+id/home_fragment&rdquo;` 是重点。一旦 Fragment 的状态保存出现问题，可先确认 Fragment 是不是设置了 id 或 tag。</p>

<h3>3. 使用 setRetainInstance</h3>

<p>关于 Fragment，我们发现 <code>setRetainInstance</code> 方法经常被用到，那么这个方法的作用是什么呢？我们看看官方的解释：</p>

<p>```</p>

<pre><code>/**
 * Control whether a fragment instance is retained across Activity
 * re-creation (such as from a configuration change).  This can only
 * be used with fragments not in the back stack.  If set, the fragment
 * lifecycle will be slightly different when an activity is recreated:
 * &lt;ul&gt;
 * &lt;li&gt; {@link #onDestroy()} will not be called (but {@link #onDetach()} still
 * will be, because the fragment is being detached from its current activity).
 * &lt;li&gt; {@link #onCreate(Bundle)} will not be called since the fragment
 * is not being re-created.
 * &lt;li&gt; {@link #onAttach(Activity)} and {@link #onActivityCreated(Bundle)} &lt;b&gt;will&lt;/b&gt;
 * still be called.
 * &lt;/ul&gt;
 */
</code></pre>

<p><code>``
结合方法名以及方法的解释，可以知道一旦我们设置</code>setRetainInstance(true)<code>，意味着在 Activity 重绘时，我们的 Fragment 不会被重复绘制，也就是它会被“保留”。为了验证其作用，我们发现在设置为</code>true<code>状态时，旋转屏幕，Fragment 依然是之前的 Fragment。而如果将它设置为默认的 false，那么旋转屏幕时 Fragment 会被销毁，然后重新创建出另外一个 fragment 实例。并且如官方所说，如果 Fragment 不重复创建，意味着 Fragment 的</code>onCreate<code>和</code>onDestroy<code>方法不会被重复调用。所以在旋转屏 Fragment 中，我们经常会设置</code>setRetainInstance(true)`，这样旋转时 Fragment 不需要重新创建。</p>

<p>如果你的 App 恰好可以不做转屏，那么你可以很省事的在 Manifest 文件中添加标注，强制所有页面使用竖屏/横屏。如果你的页面不幸的需要支持横竖屏切换，那么你在预估工作量或者给客户报价时一定要考虑到。虽然加入转屏支持不会导致工作量翻倍，但是却有可能引起许多问题。尤其当页面有很多业务逻辑，有状态值的时候。所以我们在项目开发过程中，应该知道什么时候需要考虑状态保存，当状态保存出现问题时，应该怎么解决之。</p>
]]></content>
  </entry>
  
</feed>
