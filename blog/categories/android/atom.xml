<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | gongmingqm10]]></title>
  <link href="http://www.gongmingqm10.net//blog/categories/android/atom.xml" rel="self"/>
  <link href="http://www.gongmingqm10.net//"/>
  <updated>2014-09-29T18:04:55+08:00</updated>
  <id>http://www.gongmingqm10.net//</id>
  <author>
    <name><![CDATA[Gong Ming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android自定义View]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/09/25/androidzi-ding-yi-view/"/>
    <updated>2014-09-25T23:22:11+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/09/25/androidzi-ding-yi-view</id>
    <content type="html"><![CDATA[<p>Android开发中经常用到各种各样的View，有时需要自定义View来满足当前的需求。这些自定义View主要是复写View绘制时的一些方法，从而产生新的View供项目中使用。</p>

<h2>View的绘制流程</h2>

<p>自定义控件从最基础的View开始，View有几个重要的函数：<code>onMeasure()</code>, <code>onLayout()</code>, <code>onDraw()</code>，与触摸动作相关的还有<code>onTouchEvent()</code>，View也和Activity一样具有一定的生命周期，从View被创建开始到创建完成，主要经历了 <code>onMeasure</code> <code>onLayout</code> <code>onDraw()</code> 等过程，这些过程都是一步步完成的。也代表着View从声明到被用户看到的具体步骤。通过对这些中间步骤的了解与<code>Override</code>，我们可以创造出一些特殊的View。</p>

<p>```</p>

<pre><code>public class CustomView extends View {

private static final String TAG = "gongmingqm10";

public CustomView(Context context) {
    super(context);
}

public CustomView(Context context, AttributeSet attrs) {
    super(context, attrs);
}

public CustomView(Context context, AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
}

@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    Log.i(TAG, "--onDraw--");
}

@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    super.onLayout(changed, left, top, right, bottom);
    Log.i(TAG, "--onLayout--" + left + " - " + top + " - " + right + " - " + bottom);
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    Log.i(TAG, "--onMeasure--" + widthMeasureSpec + " - " + heightMeasureSpec);
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    Log.i(TAG, "--onTouchEvent--" + event.getX() + " - " + event.getY());
    return super.onTouchEvent(event);
}
}
</code></pre>

<p>```</p>

<p>在布局文件<code>main.xml</code>文件中这样使用自定义的<code>CustomView</code></p>

<p>```</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;
    &lt;org.gongming.common.swipelist.CustomView
        android:layout_width="match_parent"
        android:layout_height="600px"
        android:background="#333666"
        /&gt;
&lt;/FrameLayout&gt;
</code></pre>

<p>```
Logcat输出结果为</p>

<pre><code>09-25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onMeasure--1073742904    - 1073742424
09-25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onMeasure--1073742904 - 1073742424
09-25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onLayout--0 - 0 - 1080 - 600
09  -25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onDraw--
</code></pre>

<p>通过上面的Logcat，我们可以看到在View的创建过程中， <code>onMeasure</code>被连续两次调用，调用完成之后紧接着<code>onLayout()</code>，最后进行<code>onDraw()</code>，于是一个View完成了从声明到创建的全过程。那么<code>onMeasure()</code> <code>onLayout()</code> <code>onDraw()</code>这几个方法究竟在绘制View的过程中起到了怎样的作用呢？</p>

<h3>1. onMeasure(int widthMeasureSpec, int heightMeasureSpec)</h3>

<p>从Log打印出来的信息来看，参数 widthMeasureSpec和heightMeasureSpec的值看起来没有特别实际的意义，但是Android本身提供了<code>MeasureSpec.getMode(measureSpec)</code>和<code>MeasudeSpec.getSize(measureSpec)</code>方法，这两个方法能够分别拿到int类型的 <code>mode</code> 和 <code>size</code>。<code>mode</code> 和 <code>size</code>主要描述了当前控件在父控件中的占位方式，以及根据占位方法计算出来的大小。我们可以根据 <code>mode</code> <code>size</code> 的值对控件的实际大小进行自定义控制。如果我们不使用<code>super.onMeasure(widthMeasureSpec, heightMeasureSpec)</code>，我们必须调用<code>setMeasureDimense(width, height)</code>来使这些设置生效。<code>width, height</code>分别表示当前这个控件真实的大小。</p>

<p>通过对<code>onMeasure()</code>函数的理解，我们基本知道<code>onMeasure()</code>的功能是告诉Android当前View的大小，并且此大小也是根据布局中父容器的约束生成的。当前我们也可以根据这些大小进行自定义设置当前View的大小。引用 <a href="http://stackoverflow.com/questions/12266899/onmeasure-custom-view-explanation">stackoverflow</a>上的回答：</p>

<blockquote><p>onMeasure() is your opportunity to tell Android how big you want your custom view to be dependent the layout constraints provided by the parent; it is also your custom view&rsquo;s opportunity to learn what those layout constraints are (in case you want to behave differently in a match_parent situation than a wrap_content situation). These constraints are packaged up into the MeasureSpec values that are passed into the method.</p></blockquote>

<p>对于MeasureSpec的<code>mode</code>主要有<code>EXACTLY, AT_MOST, UNSPECIFIED</code>三种值:</p>

<h5><code>EXACTLY</code></h5>

<p>字面意义是准确的，也就是我们的View是的宽度和高度是固定准确的，<code>mode</code>为这种值时，通常是我们设置了<code>layout_width</code>或者<code>layout_height</code>的值为一个给定的值，或者我们设置View的宽度或高度为<code>match_parent</code>，而父容器的宽度或高度固定。</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<p>&lt;FrameLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:orientation="vertical" android:layout_width="match_parent"
android:layout_height="match_parent"&gt;

&lt;org.gongming.common.swipelist.CustomView
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#333666"
    /&gt;
</code></pre>

<p></FrameLayout></p>

<p><code>``
这里的CustomView宽度和高度都是</code>match_parent<code>，而parent也是充满整个view页面，因此parent的大小是固定的，所以CustomView的大小也是固定的，这里取到的</code>mode<code>值就为</code>EXACTLY`；</p>

<p>如果把FrameLayout的宽度高度都设置成<code>wrap_content</code>，此时得到的<code>mode</code>同样都是<code>EXACTLY</code>，因为FrameLayout宽高收到屏幕大小的约束，其本身的大小是收到子view的影响，此时子View通过<code>match_parent</code>获得最大的空间，于是FrameLayout的宽高被撑到了最大值的水平。</p>

<h5><code>AT_MOST</code></h5>

<p>通过名词本身的描述，这种状态下意味着View存在一个最大值的约束，最大值约束一般来自父View，父View经过层层依赖，又会受到设备屏幕大小的约束。通过下面的例子看什么时侯View会呈现出<code>AT_MOST</code>状态：</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<p>&lt;FrameLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:orientation="vertical" android:layout_width="match_parent"
android:layout_height="match_parent"&gt;

&lt;org.gongming.common.swipelist.CustomView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="#333666"
    /&gt;
</code></pre>

<p></FrameLayout></p>

<p><code>``
这种情况下CustomView的高度是</code>wrap_content<code>，自适应内容，没有固定的值。但是由于父容器FrameLayout的宽度和高度是固定的，因此FrameLayout的宽高将会约束CustomView的宽高。CustomView的高度此时会有个最大值约束。这是 CustomView高度的Mode是</code>AT_MOST`.</p>

<p>如果把FrameLayout的<code>layout_height</code>设置为<code>wrap_content</code>，由于父容器自身的高度有个<code>AT_MOST</code>属性，子元素CustomView的最大值也不会超过父元素的最大值约束。所以此时CustomView的高度Mode仍然是<code>AT_MOST</code>。</p>

<p>综合来看，只要View的当前宽度或者高度不是固定的，但是会存在一个最大值界限，则View 的Mode为<code>AT_MOST</code>。</p>

<h5><code>UNSPECIFIED</code></h5>

<p><code>UNSPECIFIED</code>意味着高度或者宽度值是不明确不具体的，即Android系统本身都很难决定元素的宽度或者高度值，也没有对其宽度高度的约束值。一个典型情况是ScrollView，由于ScrollView的可以自滑动，因此其滑动方向上可以进行无限的伸缩，于是View在绘制时就很难确定其具体约束。</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<p>&lt;ScrollView xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="match_parent"&gt;

&lt;org.gongming.common.swipelist.CustomView
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#333666"
    /&gt;
</code></pre>

<p></ScrollView></p>

<p><code>``
</code>ScrollView<code>默认是竖直滑动，因此其高度值是难以确定的，位于其里面的CustomView如果没有提供明确的竖直，那么无论使用</code>match_parent<code>，还是</code>wrap_content<code>，高度值都是不能确定的。高度的Mode为</code>UNSPECIFIED`</p>

<p>除了上述的MeasureSpec.getMode()外，在本函数中我们还可以通过MeasureSpec.getSize()得到View真实的值，这个真实值将会用来绘制当前View。我们自定义View的时侯也可以通过onMeasure进行恰当的重写，从而实现我们自己想要的功能。</p>

<h3>2. onLayout(boolean changed, int left, int top, int right, int bottom)</h3>

<p><code>onLayout()</code>的参数中我们能够直接拿到当前view的位置，(left, top)描述了左上顶点的位置，而(right, bottom)确定了右下角的位置，在自定义View的时侯，可以根据父容器的位置，调用子View的layout()函数直接指定子view的位置。我们的LinearLayout, RelativeLayout等就是继承ViewGroup，然后根据子View设置的相关属性，从而确定子View应该被放在哪里，我们在app中也就看到了期望的界面。</p>

<h3>3. onDraw(Canvas canvas)</h3>

<p>Canvas是View的画布，有了canvasView才会真正的显示出来，才有我们看到的背景，图像，边框等元素。通过复写onDraw()，我们能够利用canvas做一些自定义的行为。比如我们通常看到的显示圆形ImageView头像等。</p>

<h2>自定义View的实现</h2>

<h4>自动换行控件——FlowLayout</h4>

<p>这个Demo中主要通过继承ViewGroup实现自动换行控件，这种通常被用来放置TextView，对文字长度和数量位置的TextView来说，自动换行控件能够实现很好的布局效果，我们只需要将TextView加载到FlowLayout中，便可实现TextView组的自动换行。我们也可以批量给TextView增加自定义事件，进而实现我们想做的事情。</p>

<p>自定义ViewGroup主要参考Google的<a href="http://developer.android.com/reference/android/view/ViewGroup.html">ViewGroup</a>，参照自定义控件写法，主要是人工对onMeasure()和onLayout进行重写。onMeasure()决定了控件本身的宽度和高度，而onLayout()则用来确定子类的位置摆放。子类在父类中的位置摆放通过layout(l, t, r, b)，这几个值表示控件的左上坐标和右下坐标，坐标是相对于父容器的位置来确定的。</p>

<p>首先看具体效果：</p>

<p><img class="left" src="/images/flow_layout_1.png" title="FlowLayout" ></p>

<p>代码实现如下FlowLayout.java</p>

<p>```
package org.gongming.common;</p>

<p>import android.content.Context;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;</p>

<p>public class FlowLayout extends ViewGroup {</p>

<pre><code>private static final int leftMargin = 6;
private static final int rightMargin = 6;
private static final int topMargin = 10;
private static final int bottomMargin = 10;


public FlowLayout(Context context) {
    super(context);
}

public FlowLayout(Context context, AttributeSet attrs) {
    super(context, attrs);
}

public FlowLayout(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
}


@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    int maxWidth = 0;
    int maxHeight = 0;
    int childState = 0;
    int calcHeight = 0;

    int totalWidth = MeasureSpec.getSize(widthMeasureSpec);
    int count = getChildCount();

    for (int index = 0; index &lt; count; index++) {
        final View child = getChildAt(index);
        if (child.getVisibility() != GONE) {
            measureChild(child, widthMeasureSpec, heightMeasureSpec);
            int calcWidth = child.getMeasuredWidth() + leftMargin + rightMargin;
            calcHeight = Math.max(calcHeight, child.getMeasuredHeight() + topMargin + bottomMargin);
            if (maxWidth + calcWidth &gt; totalWidth) {
                maxWidth = totalWidth;
                maxHeight += calcHeight;
            } else {
                maxWidth += calcWidth;
            }
            childState = combineMeasuredStates(childState, child.getMeasuredState());
        }
    }
    maxHeight += calcHeight;
    maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
    maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());
    setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),
            resolveSizeAndState(maxHeight, heightMeasureSpec,
                    childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));
}

@Override
protected void onLayout(boolean changed, int l, int t, int r, int b) {
    int totalWidth = getMeasuredWidth();
    int count = getChildCount();
    int width = 0;
    int height = 0;

    for (int index = 0; index &lt; count; index++) {
        View view = getChildAt(index);
        int calcHeight = view.getMeasuredHeight() + topMargin + bottomMargin;
        int calcWidth = view.getMeasuredWidth() + leftMargin + rightMargin;
        if (width + calcWidth &gt; totalWidth) {
            height += calcHeight;
            width = calcWidth;
        } else {
            width += calcWidth;
            height = Math.max(calcHeight, height);
        }
        view.layout(width - calcWidth + leftMargin, height - calcHeight + topMargin, width - rightMargin, height - bottomMargin);
    }
}

public void setOnItemClickListener(OnClickListener listener) {
    for (int index = 0; index &lt; getChildCount(); index++) {
        View child = getChildAt(index);
        child.setOnClickListener(listener);
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>看看我们在xml中如果使用当前定义的View，主要通过包名访问：</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<p>&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:orientation="vertical" android:layout_width="match_parent"
android:layout_height="match_parent"&gt;
&lt;TextView
    android:layout_height="wrap_content"
    android:layout_width="wrap_content"
    android:text="Root Swipe Layout"
    android:layout_gravity="center"
    /&gt;
&lt;org.gongming.common.FlowLayout
    android:layout_height="wrap_content"
    android:layout_width="match_parent"
    android:id="@+id/flowLayout"
    &gt;
    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="hahahah"
        android:background="#7E7EFF"
        /&gt;
    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="This is a amazing layout"
        android:background="#7E7EFF"
        /&gt;
    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Where is this layout"
        android:background="#7E7EFF"
        /&gt;
    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Oh, God. Please save me. I'm the cool layout"
        android:background="#7E7EFF"
        /&gt;
&lt;/org.gongming.common.FlowLayout&gt;
</code></pre>

<p></LinearLayout></p>

<p>```</p>

<p>在java代码里还可以定义item的单击事件，<code>flowLayout.setOnItemClickListener(OnClickListener listener)</code>， 这样就能对用户的单击行为进行响应。</p>

<p>//TODO
应用例子，自定义实现图片随意拜访布局。或者瀑布流图片布局。自定义实现ViewGroup</p>

<p>//TODO
换行进行的多彩View的实现，在View上面进行一些自定义的绘制</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android best practice]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/09/16/android-best-practice/"/>
    <updated>2014-09-16T10:41:25+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/09/16/android-best-practice</id>
    <content type="html"><![CDATA[<h1>Android 最佳实践</h1>

<p>从事android开发两年有余，但是自己的代码自己却不太敢恭维。于是我不得不来改善我的Android程序，为了使它变得更加的稳固，更加的专业。本文旁征博引，多处观点都是Google之，结合自己的经验总结了Android开发中的一些最佳实践，厚积方能博发，多积累多学习才能多进步。</p>

<h3>Android Activity 的生命周期</h3>

<p>生命周期（Lifecycle）描述的是Android一个页面从开始创建到消亡的整个过程。伴随着一系列对象的创建及消失，涵盖着整个页面所包含的业务逻辑。以及与用户之间的交互，接受用户的输入并返回输出信息给用户。</p>

<p><img src="http://i.imgur.com/rPrTr.png" alt="Android Lifecycle" /></p>

<p>从其生命流程图中，我们可以看到Android单个Activity的生命周期主要为 onCreate &ndash;> onStart &ndash;> onResume &ndash;> Activity Running &ndash;> onPause &ndash;> onStop &ndash;> onDestroy. 通常单个App是由诸多的Activity组成的，一般情况我们肉眼所见的一个页面就是一个Activity，我们也经常再APP中点击Button或者Back，于是我们实现了Activity之间的切换。</p>

<h5>1. onCreate()与onDestroy()</h5>

<p>如何理解onCreate()呢？首先通过来自Google的官方解释来看onCreate()方法的作用：</p>

<blockquote><p>onCreate(Bundle) is where you initialize your activity. Most importantly, here you will usually call setContentView(int) with a layout resource defining your UI, and using findViewById(int) to retrieve the widgets in that UI that you need to interact with programmatically</p></blockquote>

<p>所以onCreate方法主要用于初始化我们的Activity。在onCreate()方法中，我们通过setContentView(int)来为当前的Activity指定对应的View， 然后通过findViewById(int)通过id检索当前View中的组件。至此，onCreate()的一些基本的初始化工作完成, Activity全局的初始化工作应该都在onCreate()中完成，这些初始化状态一直会被保存直到onDestroy()被调用，也就意味着Activity消亡。</p>

<p>细心观察发现，Activity的onCreate(Bundle)函数会有一个Bundle类型的参数savedInstanceState，通过这个meaningful的名字可以看到此参数主要用于使用之前保存的数据。</p>

<p>与onCreate()对应的方法是onDestroy(), 后者主要是Activity被销毁时会被执行的方法，当我们调用this.finish()手动结束当前的Activity, 此时onDestroy()会被回调，我们可以在这里面做一些程序被销毁前的保存性操作。</p>

<h5>2. onStart()与onStop()</h5>

<p>这两种状态一般出现在，当用户从Activity A 跳转到Activity B 中，此时Activity A 的 onStop函数会被回调，此时Activity A 被压入到堆栈中，并处于不可见状态。一旦用户结束Activity B, 再次进入Activity A 中，系统会重新调用onRestart()和onStart()函数，于是这个Activity重新被唤醒。</p>

<h5>3. onResume()与onPause()</h5>

<p>通过字面意思理解为Activity的恢复和停止，一个典型的例子是APP运行过程中突然有电话或者闹铃，以至于当前的Activity被其他的Activity覆盖，这种情况下会触发onResume()和onPause()事件，当然如果APP经历onStart()和onStop()事件，也必然会先经过onResume()和onPause()事件。生命周期的流程图如上图所示，其形成的是一个完成的闭路。</p>

<p> ===
通过应用程序的一套完整的Lifecycle，Android保证了APP在手机上进行良好的运行，并且运行过程互不干扰。Android生命周期的存在也表明在APP开发中，应该使Activity功能彼此对应，在onStart()中注册了某些事件，在onStop()中就应该进行反注册，例如地图开发中的GPS定位，就需要在onStart中进行注册，而在onStop()中进行反注册。还有一些网络访问回调也存在类似的情形，都需要我们在APP开发中注意，确保APP以最佳的状态运行。</p>

<h3>Activity的职能－避免Activity类承载太多职能</h3>

<p>Activity作为Android的Controller，直接负载着与用户的交互过程。开发中Activitiy很容易由于大量的动画，布局等操作而变得臃肿，特别使业务逻辑渐渐复杂时，Activity过大的代码量增加了维护成本，甚至开发者自己都很难读懂这个Activity真正的含义。为了避免这种情况，我们要尽量将纯UI布局和动画逻辑分离到第三方类中，在Activity与用户交互过程中，一旦需要某些UI操作和动画表现等，直接对其相关的UI布局等进行调用即可。我们的Activity只作为真正的Controller，控制着接收用户输入以及反馈输出，至于中间的逻辑则完全可以交给“Presenter”调用。</p>

<h3>Android布局多屏适配</h3>

<p>Android由于设备众多，分辨率众多，不同厂家定制的SDK也增加了适配成本。所以我们开发过程，就不应该使用太过绝对的布局，而应该尽量使用相对布局。过于绝对的布局可能在当前设备上表现良好，一旦在其他机器上运行则可能会出现布局错乱的问题。布局时也要避免View之间的深嵌套，根据你的设计图选择合适的布局方式，过重的布局会拖慢页面的渲染速度，进而影响整个APP的性能表现。</p>

<h3>用Fragment代替Activity</h3>

<p>自Android4.0之后，Android开始使用Fragment，并保持不断更新中。简言之，Fragment也是可以直接代替Activity的Controller，Fragment主要是为了适配手机和平板而生的，Fragment在手机上和Activity的表现无异，但是在平板上却可以以类似于组件的形式表现出来，这种形式更适合平板的大屏显示方式。Fragment让我们不用去同时维护手机和平板上的两套代码，方便了开发过程。</p>

<h3>MVC最佳实践</h3>

<p>和Web开发中的MVC框架类似，我们同样可以对APP进行MVC化。具体而言，Activity是我们的Controller控制器，而对数据的读取与查询等具体语句则应该通过DataManager进行处理，类似于我们通常所说的Service，Service不直接和界面进行交互。用户的交互都是与Activity发生的，Service会提供一些数据读取相关的方法，以供Activity调用。</p>

<p>===
本文抛砖引玉，参考别人的文章，结合自己的实践经历总结了一些实践性的经验。个中不足，烦请大家不吝赐教，当然更欢迎大家一起交流。</p>

<p>文章参考：<a href="http://clayallsopp.com/posts/android-best-practices-tips/">http://clayallsopp.com/posts/android-best-practices-tips/</a></p>
]]></content>
  </entry>
  
</feed>
