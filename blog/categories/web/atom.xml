<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | gongmingqm10]]></title>
  <link href="http://www.gongmingqm10.net/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://www.gongmingqm10.net/"/>
  <updated>2015-10-29T13:44:22+08:00</updated>
  <id>http://www.gongmingqm10.net/</id>
  <author>
    <name><![CDATA[Gong Ming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[部署 Spring Web 至服务器]]></title>
    <link href="http://www.gongmingqm10.net/blog/2014/10/12/deploy-app-to-remote-server/"/>
    <updated>2014-10-12T11:14:37+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2014/10/12/deploy-app-to-remote-server</id>
    <content type="html"><![CDATA[<p>网站开发完毕之后，下一步的任务就是部署了。我们从最简单的入手，如何将本地开发的webapp部署到远程服务器上（这里我们用的是阿里的ECS）。部署是一件很有意思的事情，因为我们可以让本地开发的网站被外界所访问，所以还是很多成就感的。这里的工程采用的是Spring MVC 框架。</p>

<h3>1. Requirement</h3>

<ul>
<li>一个能够在本地运行的Web程序</li>
<li>一个远程服务器主机</li>
<li>Mac或者Linux系统的机器</li>
</ul>


<!-- more -->


<h3>2. 打包Webapp为war文件</h3>

<p>不同的工程可以使用不同的工具进行打包，我们项目工程采用gradle + jetty构建的，因此在打包时还是使用gradle自带的方式进行打包。本项目build.gradle配置如下:</p>

<p>```
apply plugin: &lsquo;idea&rsquo;
apply plugin: &lsquo;war&rsquo;
apply plugin: &lsquo;jetty&rsquo;</p>

<p>tasks.withType(Compile) {</p>

<pre><code>options.encoding = "UTF-8"
</code></pre>

<p>}
repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>providedCompile 'javax.servlet:servlet-api:2.5'

def springFrameworkVersion = '3.2.2.RELEASE'

compile "org.springframework:spring-web:${springFrameworkVersion}",
        "org.springframework:spring-webmvc:${springFrameworkVersion}",
        "org.springframework:spring-beans:${springFrameworkVersion}",
        "org.springframework:spring-context:${springFrameworkVersion}",
        "org.springframework:spring-jdbc:${springFrameworkVersion}"



compile "aopalliance:aopalliance:1.0"
compile "org.codehaus.jackson:jackson-mapper-asl:1.9.+"
compile "org.mybatis:mybatis:3.2.3"
compile 'org.apache.commons:commons-lang3:3.1'
compile 'commons-fileupload:commons-fileupload:1.2.2'
compile 'commons-io:commons-io:1.3.2'

runtime "commons-pool:commons-pool:1.3",
        "commons-dbcp:commons-dbcp:1.2.2",
        "commons-collections:commons-collections:3.2",
        'javax.servlet:jstl:1.2',
        "org.slf4j:slf4j-log4j12:1.6.0",
        "mysql:mysql-connector-java:5.1.5",
        'log4j:log4j:1.2.16'
</code></pre>

<p>}</p>

<p><code>``
根目录下直接使用</code>gradle war<code>就可以快速打包完成。打包完成后我们在</code>build/libs/` 目录下可以看到工程的war包, demo.war</p>

<h3>3. 服务器上安装java7, mysql, tomcat7</h3>

<p>服务器中要安装的环境主要根据我们项目中所需的环境。安装好环境之后，我们的webapp才可能服务器中正常运行。java7和mysql我们前面已经介绍过，所有这些安装问题其实都可以google找到解答。下面主要介绍tomcat7的安装过程：  <br/>
首先通过<code>ssh root@121.40.97.118</code>连接到ECS上：</p>

<p>```
cd /tmp<br/>
wget <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.56/bin/apache-tomcat-7.0.56.tar.gz">http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.56/bin/apache-tomcat-7.0.56.tar.gz</a>
tar xzf apache-tomcat-7.0.56.tar.gz
mv apache-tomcat-7.0.57 /usr/local/tomcat7</p>

<p><code>``
安装完成后，通过</code>cd /usr/lcoal/tomcat7<code>进入到tomcat根目录下，</code>./bin/startup.sh<code>运行tomcat服务器，本机浏览器中访问</code>121.40.97.118:8080<code>，如果成功出现tomcat的配置页面，则tomcat7安装完成。当然我们业可以通过</code>/usr/local/tomcat7/conf/tomcat-users.xml`来配置tomcat的管理员角色，具体请参考apache tomcat 官网。</p>

<h3>4. 复制war文件到tomcat7/webapps目录中</h3>

<p>我们需要将第2步生成的demo.war复制到服务器的webapp目录中，直接在terminal中使用<code>scp</code>命令：<br/>
<code>scp demo.war root@121.40.97.118:/usr/local/tomcat7/webapps/demo.war</code>，复制过程完成后，文件开始存在于服务器的webapps文件夹下面，war包能够被tomcat自动解析。访问<code>121.40.97.118:8080/demo</code>，我们可以看到自己的app终于可以访问了。</p>

<h3>5. More</h3>

<p>到第4步，其实基本完成了部署过程。<br/>
我们自己访问时必须加上8080端口号看的也是略不爽。此时可以通过<code>/usr/local/tomcat7/conf/server.xml</code>对里面默认的8080端口进行修改，改为80端口。这次我们直接访问<code>121.40.97.118/demo</code>，发现可以访问成功了。  <br/>
再看看，我们地址后面还需要加上demo，看起来业有点不爽。我想让这台主机默认直接访问demo工程。通过观察webapps看到里面有个ROOT目录，先备份ROOT目录，然后把我们的demo.war改称ROOT.war再看看效果:</p>

<p>```
mv ROOT root.backup<br/>
mv demo.war ROOT.war</p>

<p><code>``
再次访问</code>121.40.97.118`，这时候我们可以直接看到我们的web应用了。</p>

<p>如果你还嫌不够酷的话，可以增加一个域名来转到这个网站。我在自己的域名管理中增加了一个二级域名<code>demo.gongmingqm10.net</code>映射到<code>121.40.97.118</code>，再次访问<code>demo.gongmingqm10.net</code>，但是事情没有预料的那么好，显示网站没有备案，好吧。其实下一步我可以去备案了～～</p>

<hr />

<p>此博客主要用于自己学习的记录过程，小弟才疏学浅，如有纰漏的地方请各位看官多多指正，共同进步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mybait Migration Session]]></title>
    <link href="http://www.gongmingqm10.net/blog/2014/08/17/mybait-migration-session/"/>
    <updated>2014-08-17T20:50:41+08:00</updated>
    <id>http://www.gongmingqm10.net/blog/2014/08/17/mybait-migration-session</id>
    <content type="html"><![CDATA[<h2>Mybatis Migration 初探</h2>

<p>持续交付项目中，项目会不断的迭代上线，这是会出现数据库的改动问题。在一个还未上线的项目中，我更改数据库可以使用简单的直接对sql进行更改，但是面对一个已投入使用的系统而言，每次部署都对数据库进行init显得有点不太可能。于是便有了数据库Migration的诞生。</p>

<p>我所在的项目是SpringMVC配合Mybatis的开发框架。作为一个数据库集成框架，Mybatis在使用上还是比较方便的。言归正传，为了项目需要，于是便开始了Mybatis Migration的初探，文章中出现的不妥之处还请大家不吝赐教。</p>

<!-- more -->


<h4>Mybatis Migration 安装</h4>

<p>安装过程主要参照Mybatis的官网： <a href="http://mybatis.github.io/migrations/index.html">http://mybatis.github.io/migrations/index.html</a>，以及Mybatis源代码授权地址: <a href="https://github.com/mybatis/migrations">https://github.com/mybatis/migrations</a>，参照github上的README文件可以轻易的完成其安装过程。README文件中所有的Mybatis包可以直接在其Git repo的releases中找到，我选择了3.2.0进行下载安装。安装完成后就可以直接在terminal中运行migrate相关的命令了。</p>

<h4>Mybatus Migration 初始化</h4>

<pre><code>minggong:migration-test minggong$ migrate init
------------------------------------------------------------------------
-- MyBatis Migrations - init
------------------------------------------------------------------------
Initializing: .
Creating: environments
Creating: scripts
Creating: drivers
Creating: README
Creating: development.properties
Creating: bootstrap.sql
Creating: 20140817132704_create_changelog.sql
Creating: 20140817132705_first_migration.sql
Done!

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 2s
-- Finished at: Sun Aug 17 18:57:05 GMT+05:30 2014
-- Final Memory: 3M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ ls
README      drivers     environments    scripts
</code></pre>

<p>初始化之后的目录下面会自动生成一些和Migration相关的项目文件及目录 README, drivers, environments, scripts。drivers中放置连接数据库需要的jdbc，environments主要放置连接数据库的地址以及授权信息等，scripts目录下则放置数据库相关的sql，init的时候就已经生成了上述显示的create_changelog.sql和first_migration.sql文件。</p>

<p>为了以实例说明问题，本次测试采用了mysql数据库，从mysql官网下载了<code>mysql-connector-java-5.1.32</code>，并对environment的数据库信息进行了简单的配置，配置如下：</p>

<pre><code>## JDBC connection properties.
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/arctic
username=root
password=
</code></pre>

<p>这里的arctic是已经存在本地的一个mysql数据库。</p>

<h4>Migrate bootstrap</h4>

<pre><code>minggong:migration-test minggong$ migrate bootstrap
------------------------------------------------------------------------
-- MyBatis Migrations - bootstrap
------------------------------------------------------------------------
========== Applying: bootstrap.sql =============================================

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 19:43:29 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<p>运行之后，scripts文件中将会生成另外一个bootstrap文件。主要可以进行一些数据库初始化工作。</p>

<h4>Migrate new</h4>

<p><code>new</code>命令能够创建新的sql脚本，我们只需要填充数据表结构信息，便可以方便的创建我们所需的数据表</p>

<pre><code>minggong:migration-test minggong$ migrate new "create blog table"
------------------------------------------------------------------------
-- MyBatis Migrations - new
------------------------------------------------------------------------
Creating: 20140817142201_create_blog_table.sql
Done!

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 1s
-- Finished at: Sun Aug 17 19:52:01 GMT+05:30 2014
-- Final Memory: 3M/493M
------------------------------------------------------------------------
</code></pre>

<p>scripts文件夹中会创建带有时间戳的sql文件：<code>20140817142201_create_blog_table.sql</code>， 其内容如下：</p>

<pre><code>-- // create blog table
-- Migration SQL that makes the change goes here.

-- //@UNDO
-- SQL to undo the change goes here.
</code></pre>

<p>文件内容主要包含<code>create table</code>和<code>undo</code>，分别表示表的创建和删除命令：</p>

<pre><code>-- // create blog table
-- Migration SQL that makes the change goes here.
CREATE TABLE BLOG (
  ID INT,
  NAME VARCHAR(255),
  PRIMARY KEY(ID)
);
-- //@UNDO
-- SQL to undo the change goes here.
DROP TABLE BLOG;
</code></pre>

<p>已经将表结构写在了sql里面，那么怎样执行这个脚本，从而改变数据库中的表结构呢。首先我们需要了解当前数据库的状态。</p>

<h4>Migrate status</h4>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704    ...pending...    create changelog
20140817132705    ...pending...    first migration
20140817142201    ...pending...    create blog table

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 20:21:06 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<p>由于我们没有运行过migration, 所以所有migration脚本都处于<code>pending</code>状态，包括changelog table本身。当我们运行<code>migrate up</code>命令之后，脚本的状态便会发生相应的改变。</p>

<h4>Migrate up, down</h4>

<p>为了显示更多up, down以及后续的version操作，再次新建一个数据表<code>migrate new 'create table author'</code>此时的author和blog应该都处于pending状态。</p>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704    ...pending...    create changelog
20140817132705    ...pending...    first migration
20140817142201    ...pending...    create blog table
20140817154537    ...pending...    create table author

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:21:49 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate up
------------------------------------------------------------------------
-- MyBatis Migrations - up
------------------------------------------------------------------------
========== Applying: 20140817132704_create_changelog.sql =======================
--  Create Changelog
-- Default DDL for changelog table that will keep
-- a record of the migrations that have been run.
-- You can modify this to suit your database before
-- running your first migration.
-- Be sure that ID and DESCRIPTION fields exist in
-- BigInteger and String compatible fields respectively.
CREATE TABLE CHANGELOG (
ID NUMERIC(20,0) NOT NULL,
APPLIED_AT VARCHAR(25) NOT NULL,
DESCRIPTION VARCHAR(255) NOT NULL
)

ALTER TABLE CHANGELOG
ADD CONSTRAINT PK_CHANGELOG
PRIMARY KEY (id)


========== Applying: 20140817132705_first_migration.sql ========================
--  First migration.
-- Migration SQL that makes the change goes here.

========== Applying: 20140817142201_create_blog_table.sql ======================
--  create blog table
-- Migration SQL that makes the change goes here.

========== Applying: 20140817154537_create_table_author.sql ====================
--  create table author
-- Migration SQL that makes the change goes here.

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:22:17 GMT+05:30 2014
-- Final Memory: 13M/493M
------------------------------------------------------------------------
</code></pre>

<p><code>migrate up</code>命令会将所有的sql进行up,所有处于pending状态的SQL脚本都会进行执行。对应的<code>migrate down</code>则是undo sql脚本的执行，也就是执行sql中用户自定义的UNDO部分。不同的是<code>migrate down</code>只能回退一步，所以回退到初始状态则需要运行多次的<code>migrate down</code>操作。当然也可以直接指定参数，本例中我们指定回退4步<code>migrate down 4</code>:</p>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704 2014-08-17 21:22:17 create changelog
20140817132705 2014-08-17 21:22:17 first migration
20140817142201 2014-08-17 21:22:17 create blog table
20140817154537 2014-08-17 21:26:01 create table author

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:26:07 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate down 4
------------------------------------------------------------------------
-- MyBatis Migrations - down
------------------------------------------------------------------------
========== Undoing: 20140817154537_create_table_author.sql =====================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817142201_create_blog_table.sql =======================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817132705_first_migration.sql =========================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817132704_create_changelog.sql ========================
-- @UNDO
DROP TABLE CHANGELOG

Changelog doesn't exist. No further migrations will be undone (normal for the last migration).

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:29:53 GMT+05:30 2014
-- Final Memory: 14M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704    ...pending...    create changelog
20140817132705    ...pending...    first migration
20140817142201    ...pending...    create blog table
20140817154537    ...pending...    create table author

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:30:09 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<h4>Migrate verison</h4>

<p>回滚到指定的version状态，后面需要加上version的ID： <code>migrate verison 20140817132705</code></p>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704 2014-08-17 22:23:05 create changelog
20140817132705 2014-08-17 22:23:25 first migration
20140817142201 2014-08-17 22:23:25 create blog table
20140817154537 2014-08-17 22:23:25 create table author
20140817164341 2014-08-17 22:23:25 create table book

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 22:23:36 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate version 20140817142201
------------------------------------------------------------------------
-- MyBatis Migrations - version
------------------------------------------------------------------------
Downgrading to: 20140817142201
========== Undoing: 20140817164341_create_table_book.sql =======================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817154537_create_table_author.sql =====================
-- @UNDO
-- SQL to undo the change goes here.


------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 22:23:43 GMT+05:30 2014
-- Final Memory: 13M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704 2014-08-17 22:23:05 create changelog
20140817132705 2014-08-17 22:23:25 first migration
20140817142201 2014-08-17 22:23:25 create blog table
20140817154537    ...pending...    create table author
20140817164341    ...pending...    create table book

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 22:23:47 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<h4>Migrate pending</h4>

<p><code>migrate up</code> 命令只能向上upgrade，而在多人合作中如果migration sql脚本先创建但是后提交，同步到一台服务器上就有可能出现中间某个文件处于<code>pending</code>状态，这时使用<code>migrate up</code>是不能使其执行的。</p>

<p>这种情况如果这个sql基本和其他sql无依赖时，可以直接使用<code>migrate up</code>使处于pending状态的脚本被执行。官方解释这是不推荐的做法。另外一种做法是使用<code>migrate version [ID]</code>回到pending版本之前的状态，然后再次执行<code>migrate up</code>，从而完成整个执行操作，这种做法是推荐的比较安全的。</p>

<h4>Migrate script</h4>

<p>使用方法为<code>migrate script &lt;V1&gt; &lt;V2&gt; &gt; file.sql</code></p>

<p><code>migrate 20140817142201 20140817164341 &gt; do.sql</code>这个do脚本的执行将会应用上述两个状态的执行author和book。</p>

<p><code>migrate 20140817164341 20140817142201 &gt; undo.sql</code> 这个将undo脚本执行可以回滚V1和V2之间的即上述状态。</p>

<p>如果要在首尾之间回滚，则可以用 0 代替原始版本ID</p>

<p><code>migrate 0 20140817164341 &gt; do.sql</code></p>

<p><code>migrate 20140817164341 0 &gt; undo.sql</code></p>

<hr />

<p>但是对于上述的script脚本直接使用 migrate do.sql执行却一直报错！官方也没有对单个的脚本执行有说明。后续弄清楚了再补充上来。</p>
]]></content>
  </entry>
  
</feed>
