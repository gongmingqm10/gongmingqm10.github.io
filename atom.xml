<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[gongmingqm10]]></title>
  <link href="http://www.gongmingqm10.net//atom.xml" rel="self"/>
  <link href="http://www.gongmingqm10.net//"/>
  <updated>2014-10-17T12:49:59+08:00</updated>
  <id>http://www.gongmingqm10.net//</id>
  <author>
    <name><![CDATA[Gong Ming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android SIP 网络通话]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/10/17/android-sip-wang-luo-tong-hua/"/>
    <updated>2014-10-17T09:49:35+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/10/17/android-sip-wang-luo-tong-hua</id>
    <content type="html"><![CDATA[<p>突发奇想，想研究一下Android的网络通话怎么实现，于是从Google搜到了相关的资料。原来Android下集成了SIP（Session Initiation Protocol）。SIP的账号可以通过SIP提供商免费申请，申请后即可以通过用户名实现网络通话。于是也找了网上的一些资料，写了个AndroidSIP的小demo，demo实现后大家可以实现互拨，目前界面很简单，但是通话的功能应该是可以实现的。请各位看官试用之。<br/>
整体效果看起来还是蛮酷的，这里我们申请了两个免费的账号，在设备上安装之后就可以进行Network Call了。</p>

<p>免费SIP账号申请：<a href="http://www.linphone.org/free-sip-service.html">http://www.linphone.org/free-sip-service.html</a></p>

<p>官方参考文档：<a href="http://developer.android.com/guide/topics/connectivity/sip.html">http://developer.android.com/guide/topics/connectivity/sip.html</a></p>

<p>项目代码下载：<a href="https://github.com/gongmingqm10/AndroidSIP">https://github.com/gongmingqm10/AndroidSIP</a></p>

<p>任何问题，欢迎大家fork，发pull/request。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git daemon 建立本地Git服务器]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/10/14/git-daemon-jian-li-ben-di-gitfu-wu-qi/"/>
    <updated>2014-10-14T10:51:41+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/10/14/git-daemon-jian-li-ben-di-gitfu-wu-qi</id>
    <content type="html"><![CDATA[<p>平时项目中我们常遇到这样的需求，需要在自己电脑上clone台式机上的git代码，从而省略了向Github远程服务器上传代码的过程。免除了一些授权Access问题。幸好有Git Daemon神器：</p>

<p><strong>前提</strong></p>

<p>代码是通过Git托管的，如果使用SVN的话，多增加一个Git repo也是可以的。</p>

<p><strong>Step by Step</strong></p>

<ol>
<li><p>进入到自己工程所在的目录下，以Users/mingong/project/Sheldon为例：<code>cd  project/Sheldon</code></p></li>
<li><p>在Git项目根目录下开启Daemon服务器  <code>git daemon --base-path=. --export-all --reuseaddr --informative-errors  —verbose</code></p></li>
<li><p>使用ifconfig查看本机电脑内网IP地址：<code>ifconfig</code>，以我的电脑为例，查看到的IP地址为 <code>10.113.241.150</code></p></li>
<li><p><code>clone/pull</code>代码到另外一台电脑（两台电脑需在同一个内网下即可），为模拟需要，直接到我的Downloads目录下面模拟进行后续步骤。<br/>
首先我需要在Doanloads文件夹中<code>clone project: git clone git://10.113.241.150/sheldon</code> ，
ls可以看到我的Downloads中已经成功clone了sheldon工程，clone了工程的下一步就是pull, 当A电脑上的代码变动之后，我需要直接更新代码，首先进入sheldon根目录中：<code>git pull git://10.113.241.150/</code></p></li>
<li><p>增加push权限<br/>
在B电脑上clone代码后，B电脑上的伙伴修改完代码会需要将代码push回A电脑的工程中，
在第2步中开启的git daemon给可访问的客户端read权限，在需要开启write权限时，我们需要给git daemon增加 <code>—enable=receive-pack</code>，执行命令如下，  <br/>
<code>git daemon --base-path=. --export-all --enable=receive-pack --reuseaddr --informative-errors  —verbose</code><br/>
There is one quirk: client can’t push into your active git branch. Before pushing, user on the server should change the branch, if client wants to push to this branch.<br/>
客户端B不能直接提交master到当前活跃分支，所以可以在B新建一个分支，只要提交分支到A的repo中即可，由A决定是否进行分支merge.</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b sharing
</span><span class='line'># made some changes ...
</span><span class='line'>$ git commit -am "add sharing feature"
</span><span class='line'>$ git push -u origin sharing
</span><span class='line'>...
</span><span class='line'>* [new branch]      sharing -&gt; sharing
</span><span class='line'>...
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><strong>在服务器端merge分支</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout master
</span><span class='line'>$ git merge sharing
</span></code></pre></td></tr></table></div></figure>


<p>至此，push工作也就基本完成了。Git 还是很强大的。</p>

<p>参考网址： <a href="http://railsware.com/blog/2013/09/19/taming-the-git-daemon-to-quickly-share-git-repository/">taming-the-git-daemon-to-quickly-share-git-repository</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android quiz questions]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/10/13/android-quiz-questions/"/>
    <updated>2014-10-13T17:19:22+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/10/13/android-quiz-questions</id>
    <content type="html"><![CDATA[<p>关于Android的几个常见的问题，记录如下，小问题看到本质也可以了解很多原理性的东西。</p>

<hr />

<p><strong>Q: Android中Activity的生命周期？</strong></p>

<p>A: onCreate() &ndash;> onStart() &ndash;> onResume() &ndash;> onPause() &ndash;> onStop() &ndash;>onDestroy().</p>

<hr />

<p><strong>Q：Activity的onCreate()等函数必须Override吗？如果没有onCreate()，Activity能否运行？</strong></p>

<p>A: 答案显然是Override不是必须的，没有onCreate()的Activity还是可以运行的，那么究竟会运行成什么样子呢。<br/>
实例中试一试，从MainActivity中打开没有Override任何Method的Activity，发现界面上会出现一个白底界面的Activity，说明我们的Activity最终还是运行了的。只不过界面上没有任何元素，因为我们没有指定contentView。</p>

<hr />

<p><strong>Q: onStop()等在生命周期中是否一定会被调用?</strong></p>

<p>A: onStart(), onResume(), onPause(), onStop()都可以不被调用。因为一旦在onCreate()中我们直接手动调用finish()，相当于告诉Activity结束，于是系统会直接调用onDestroy()来销毁当前的Activity。</p>

<hr />

<p><strong>Q: onCreate()中的参数savedInstanceState意义是什么，会在什么情况下用到？</strong></p>

<p>A：按照官方的解释：</p>

<blockquote><pre><code> * @param savedInstanceState If the activity is being re-initialized after
 *     previously being shut down then this Bundle contains the data it most
 *     recently supplied in {@link #onSaveInstanceState}.  &lt;b&gt;&lt;i&gt;Note: Otherwise it is null.&lt;/i&gt;&lt;/b&gt;
 * 
</code></pre></blockquote>

<p>savedInstanceState表示当Activity在前一个关闭再度初始化的时候会保存的信息。举例来讲，在我们的APP运行时，如果系统内存不足，系统会把Activity栈中一些比较古老的Activity给终结掉，此时系统会调用<code>onSaveInstanceState()</code>方法，此方法默认保存此Intent的一些信息，当这个Activity再次被调用时，这些保存的信息会传递到onCreate的savedInstanceState中。我们如果需要自定义的保存某些很重要的信息，可以复写<code>onSaveInstanceState()</code>方法把某些重要信息放到bundle中，也可以把那些信息写到本地文件中或者数据库中进行保存。方便下次进入时能够获取到。</p>

<hr />

<p><strong>Q: Activity与Fragment的区别</strong></p>

<p>A: Activity相信大家都不陌生，其实可以简单的看着一个页面，跳转到另外一个页面一般就进入新的Activity。那么Android从API11开始使用Fragment的原因呢？其实主要是为了适配Android的多屏（特别是手机与平板）问题。一般情况下，如果按照普通的设计思路，我们会同时维护两份代码，并且UI上会有比较大的区别。对于快速升级的互联网产品而言，简直就是一个灾难。这时Google想了一个好的办法，在代码中引入Fragment，Fragment相当于一个module，我们所有的UI可以以模块的形式放到Fragment中。这时候的Fragment能够被多个Activity复用，我们的Activity此时做的事情就是组装这些Fragment。在平板中，我可以在ActivityA中放入FragmentA和FragmentB；在手机中，我则会在ActivityA中放入FragmentA，而在ActivityB中放入FragmentB。所以平板和手机的适配问题变成了简单的组装。从而我们的View不需要进行各种大的变动。这能够为开发者节省很多时间。<br/>
具体参考：<a href="http://developer.android.com/guide/components/fragments.html">Android Fragment Component</a></p>

<hr />

<p><strong>Q: UI线程你知道多少？</strong></p>

<p>A：UI线程就是我们常说的主线程，UI线程负责着与用户的交互操作，会处理用户的触摸滑动点击等事件，并把这些事件分发给相应的组件来处理。如果我们尝试在UI线程中进行一个耗时的操作，那么我们的APP会出现ANR（Application not responsing）异常。在UI线程中直接进行耗时操作就会造成主线程阻塞，阻塞到达一定时间则会产生ANR。<br/>
为了防止这种UI错误，我们进行的处理是将耗时操作放到另外一个线程中处理，耗时操作完成后，我们不能在非UI线程中进行UI的操作，这样是不安全的。因为我们可以借助Handler把更新的消息发给主线程，然后在主线程中更新UI操作。下面是几种耗时操作后更新UI线程的方法：</p>

<ul>
<li>View.post(Runnable runnable)</li>
<li>Activity.runOnUiThread(Runnable runnable)</li>
<li>AsyncTask</li>
<li>Hanlder + Thread</li>
</ul>


<p>事实上前面三种都是使用java封装好的其他线程中操作UI线程的方法，这些方法都是为了方便开发人员而进行的一些处理。具体用法，大家可以Google之。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy app to remote server —— 网站部署篇]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/10/12/deploy-app-to-remote-server/"/>
    <updated>2014-10-12T11:14:37+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/10/12/deploy-app-to-remote-server</id>
    <content type="html"><![CDATA[<p>网站开发完毕之后，下一步的任务就是部署了。我们从最简单的入手，如何将本地开发的webapp部署到远程服务器上（这里我们用的是阿里的ECS）。部署是一件很有意思的事情，因为我们可以让本地开发的网站被外界所访问，所以还是很多成就感的。这里的工程采用的是Spring MVC 框架。</p>

<h3>1. Requirement</h3>

<ul>
<li>一个能够在本地运行的Web程序</li>
<li>一个远程服务器主机</li>
<li>Mac或者Linux系统的机器</li>
</ul>


<h3>2. 打包Webapp为war文件</h3>

<p>不同的工程可以使用不同的工具进行打包，我们项目工程采用gradle + jetty构建的，因此在打包时还是使用gradle自带的方式进行打包。本项目build.gradle配置如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'idea'
</span><span class='line'>apply plugin: 'war'
</span><span class='line'>apply plugin: 'jetty'
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>tasks.withType(Compile) {
</span><span class='line'>    options.encoding = "UTF-8"
</span><span class='line'>}
</span><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    providedCompile 'javax.servlet:servlet-api:2.5'
</span><span class='line'>
</span><span class='line'>    def springFrameworkVersion = '3.2.2.RELEASE'
</span><span class='line'>
</span><span class='line'>    compile "org.springframework:spring-web:${springFrameworkVersion}",
</span><span class='line'>            "org.springframework:spring-webmvc:${springFrameworkVersion}",
</span><span class='line'>            "org.springframework:spring-beans:${springFrameworkVersion}",
</span><span class='line'>            "org.springframework:spring-context:${springFrameworkVersion}",
</span><span class='line'>            "org.springframework:spring-jdbc:${springFrameworkVersion}"
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    compile "aopalliance:aopalliance:1.0"
</span><span class='line'>    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.+"
</span><span class='line'>    compile "org.mybatis:mybatis:3.2.3"
</span><span class='line'>    compile 'org.apache.commons:commons-lang3:3.1'
</span><span class='line'>    compile 'commons-fileupload:commons-fileupload:1.2.2'
</span><span class='line'>    compile 'commons-io:commons-io:1.3.2'
</span><span class='line'>
</span><span class='line'>    runtime "commons-pool:commons-pool:1.3",
</span><span class='line'>            "commons-dbcp:commons-dbcp:1.2.2",
</span><span class='line'>            "commons-collections:commons-collections:3.2",
</span><span class='line'>            'javax.servlet:jstl:1.2',
</span><span class='line'>            "org.slf4j:slf4j-log4j12:1.6.0",
</span><span class='line'>            "mysql:mysql-connector-java:5.1.5",
</span><span class='line'>            'log4j:log4j:1.2.16'
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>根目录下直接使用 <code>gradle war</code>就可以快速打包完成。打包完成后我们在 <code>build/libs/</code> 目录下可以看到工程的war包, demo.war</p>

<h3>3. 服务器上安装java7, mysql, tomcat7</h3>

<p>服务器中要安装的环境主要根据我们项目中所需的环境。安装好环境之后，我们的webapp才可能服务器中正常运行。java7和mysql我们前面已经介绍过，所有这些安装问题其实都可以google找到解答。下面主要介绍tomcat7的安装过程：  <br/>
首先通过<code>ssh root@121.40.97.118</code>连接到ECS上：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /tmp  
</span><span class='line'>wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.56/bin/apache-tomcat-7.0.56.tar.gz
</span><span class='line'>tar xzf apache-tomcat-7.0.56.tar.gz
</span><span class='line'>mv apache-tomcat-7.0.57 /usr/local/tomcat7
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，通过 <code>cd /usr/lcoal/tomcat7</code>进入到tomcat根目录下，<code>./bin/startup.sh</code>运行tomcat服务器，本机浏览器中访问 <code>121.40.97.118:8080</code>，如果成功出现tomcat的配置页面，则tomcat7安装完成。当然我们业可以通过 <code>/usr/local/tomcat7/conf/tomcat-users.xml</code>来配置tomcat的管理员角色，具体请参考apache tomcat 官网。</p>

<h3>4. 复制war文件到tomcat7/webapps目录中</h3>

<p>我们需要将第2步生成的demo.war复制到服务器的webapp目录中，直接在terminal中使用<code>scp</code>命令：<br/>
<code>scp demo.war root@121.40.97.118:/usr/local/tomcat7/webapps/demo.war</code>，复制过程完成后，文件开始存在于服务器的webapps文件夹下面，war包能够被tomcat自动解析。访问<code>121.40.97.118:8080/demo</code>，我们可以看到自己的app终于可以访问了。</p>

<h3>5. More</h3>

<p>到第4步，其实基本完成了部署过程。<br/>
我们自己访问时必须加上8080端口号看的也是略不爽。此时可以通过<code>/usr/local/tomcat7/conf/server.xml</code>对里面默认的8080端口进行修改，改为80端口。这次我们直接访问<code>121.40.97.118/demo</code>，发现可以访问成功了。  <br/>
再看看，我们地址后面还需要加上demo，看起来业有点不爽。我想让这台主机默认直接访问demo工程。通过观察webapps看到里面有个ROOT目录，先备份ROOT目录，然后把我们的demo.war改称ROOT.war再看看效果:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mv ROOT root.backup  
</span><span class='line'>mv demo.war ROOT.war
</span></code></pre></td></tr></table></div></figure>


<p>再次访问<code>121.40.97.118</code>，这时候我们可以直接看到我们的web应用了。</p>

<p>如果你还嫌不够酷的话，可以增加一个域名来转到这个网站。我在自己的域名管理中增加了一个二级域名<code>demo.gongmingqm10.net</code>映射到<code>121.40.97.118</code>，再次访问<code>demo.gongmingqm10.net</code>，但是事情没有预料的那么好，显示网站没有备案，好吧。其实下一步我可以去备案了～～</p>

<hr />

<p>此博客主要用于自己学习的记录过程，小弟才疏学浅，如有纰漏的地方请各位看官多多指正，共同进步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android onTouch() 初探]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/09/30/android-ontouch-chu-tan/"/>
    <updated>2014-09-30T17:28:56+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/09/30/android-ontouch-chu-tan</id>
    <content type="html"><![CDATA[<p>Android的touch对于我来说是个既熟悉又陌生的话题，熟悉之处在于onTouch太常用了，从系统的自定义的ListView的滑动到我们自定义的可以滑动的View，onTouch直接与用户进行相关的Interation，所以onTouch无处不再。想像下如果Android某一天不能相应我们的touch事件，那我们现在的触屏手机基本废了，那我们的手机还得还原到以前的字母键手机的状态。学习总是得自己逼迫自己，没有博客的驱动我是怎样也不会来从头开始研究onTouch的作用机制的，博客当作一个自我学习的过程，坚持再坚持。</p>

<p>废话不说，步入正题，从用户开始，触屏事件被屏幕传感器截获，截获后会将该触摸数据传到我们的View上面，然后View再进行相应的处理。从用户触摸到数据被View感知都是有Android底层完成的，我们这里关心的只是Android的view会如何响应这些触摸行为呢？了解了触摸行为相关的原理才可以更好的利用这些特性从而实现我们自定义的各种交互生动的组件。</p>

<p>下面我们会循序渐进，逐步研究一些与Touch相关的特性，最后我们会通过几个小demo来展示怎么通过重写onTouch()自定义一些实用的组件。</p>

<h3>1. boolean onTouch() 返回值的意义</h3>

<p>直接贴出View.OnTouchListener的源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface OnTouchListener {
</span><span class='line'>    /**
</span><span class='line'>     * Called when a touch event is dispatched to a view. This allows listeners to
</span><span class='line'>     * get a chance to respond before the target view.
</span><span class='line'>     *
</span><span class='line'>     * @param v The view the touch event has been dispatched to.
</span><span class='line'>     * @param event The MotionEvent object containing full information about
</span><span class='line'>     *        the event.
</span><span class='line'>     * @return True if the listener has consumed the event, false otherwise.
</span><span class='line'>     */
</span><span class='line'>    boolean onTouch(View v, MotionEvent event);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这是官方给出的定义，对于return返回值的意义，解释是<code>return True if the listener has consumed the event, false otherwise</code>，如果返回True，表示View消费了这次事件，否则的话，表示View并没有消费本次Touch事件。<br/>
<img src="http://www.gongmingqm10.net//images/touch-simple.png" alt="main_activity_layout.xml"/><br/>
在XML中，我们声明了A，B，C 三个Layout，其中C包含B，而B包含A，对于ABC三个View，我们都为其指定相应的触摸事件，然后再观察触摸事件是如何被响应并传递的。<br/>
MainActivty中定义如下：  <br/>
<img src="http://www.gongmingqm10.net//images/touch-simple-main.png" alt="MainActivity.java"/>  <br/>
在onTouch()方法中，我们<code>return false</code>，说明当前的View并没有消化触摸事件，它会将触摸事件继续<code>向上</code>传递，所谓<code>向上</code>指的是View会向它的父元素传递，父元素又会根据其定义的onTouch事件继续将事件传递。触摸A元素，产生的Log如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10-01 16:20:44.640    1471-1471/org.gongming.uikit I/gongmingqm10﹕ --onTouch()--son
</span><span class='line'>10-01 16:20:44.640    1471-1471/org.gongming.uikit I/gongmingqm10﹕ --onTouch()--parent
</span><span class='line'>10-01 16:20:44.640    1471-1471/org.gongming.uikit I/gongmingqm10﹕ --onTouch()--grantParent</span></code></pre></td></tr></table></div></figure>


<p>此时是<code>onTouch() return false</code> 的情况，触摸A的时候，首先触摸事件会有A处理，A处理完之后，<code>return false</code>导致触摸事件向A的父容器B传递，同时B又会继续向C传递，直至结束。<br/>
当我们把<code>onTouch()</code>返回结果改为<code>return true</code>时，再次触摸A，这时的Log如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10-01 16:32:29.008    1612-1612/org.gongming.uikit I/gongmingqm10﹕ --onTouch()--son
</span><span class='line'>10-01 16:32:29.016    1612-1612/org.gongming.uikit I/gongmingqm10﹕ --onTouch()--son</span></code></pre></td></tr></table></div></figure>


<p>这时的<code>return true</code>表示A自己消化了触摸事件，所以触摸事件不会向上传播。通过<code>onTouch</code>中的MotionEvent可以得到当前触摸的x和y坐标，借此实现一些复杂的功能。<br/>
MotionEvent除了提供触摸的坐标外，还通过<code>MotionEvent.getEventAction()</code>判断当前触摸的类型，主要分为<code>ACTION_POINTER_DOWN</code> <code>ACTION_POINTER_UP</code> <code>ACTION_DOWN</code> <code>ACTION_MOVE</code> <code>ACTION_UP</code> <code>ACTION-CANCEL</code>，以下是MotionEvent中对这些Action的定义说明：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: A pressed gesture has started, the
</span><span class='line'> * motion contains the initial starting location.
</span><span class='line'> * &lt;p&gt;
</span><span class='line'> * This is also a good time to check the button state to distinguish
</span><span class='line'> * secondary and tertiary button clicks and handle them appropriately.
</span><span class='line'> * Use {@link #getButtonState} to retrieve the button state.
</span><span class='line'> * &lt;/p&gt;
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_DOWN             = 0;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: A pressed gesture has finished, the
</span><span class='line'> * motion contains the final release location as well as any intermediate
</span><span class='line'> * points since the last down or move event.
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_UP               = 1;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: A change has happened during a
</span><span class='line'> * press gesture (between {@link #ACTION_DOWN} and {@link #ACTION_UP}).
</span><span class='line'> * The motion contains the most recent point, as well as any intermediate
</span><span class='line'> * points since the last down or move event.
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_MOVE             = 2;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: The current gesture has been aborted.
</span><span class='line'> * You will not receive any more points in it.  You should treat this as
</span><span class='line'> * an up event, but not perform any action that you normally would.
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_CANCEL           = 3;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: A movement has happened outside of the
</span><span class='line'> * normal bounds of the UI element.  This does not provide a full gesture,
</span><span class='line'> * but only the initial location of the movement/touch.
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_OUTSIDE          = 4;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: A non-primary pointer has gone down.
</span><span class='line'> * &lt;p&gt;
</span><span class='line'> * Use {@link #getActionIndex} to retrieve the index of the pointer that changed.
</span><span class='line'> * &lt;/p&gt;&lt;p&gt;
</span><span class='line'> * The index is encoded in the {@link #ACTION_POINTER_INDEX_MASK} bits of the
</span><span class='line'> * unmasked action returned by {@link #getAction}.
</span><span class='line'> * &lt;/p&gt;
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_POINTER_DOWN     = 5;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: A non-primary pointer has gone up.
</span><span class='line'> * &lt;p&gt;
</span><span class='line'> * Use {@link #getActionIndex} to retrieve the index of the pointer that changed.
</span><span class='line'> * &lt;/p&gt;&lt;p&gt;
</span><span class='line'> * The index is encoded in the {@link #ACTION_POINTER_INDEX_MASK} bits of the
</span><span class='line'> * unmasked action returned by {@link #getAction}.
</span><span class='line'> * &lt;/p&gt;
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_POINTER_UP       = 6;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: A change happened but the pointer
</span><span class='line'> * is not down (unlike {@link #ACTION_MOVE}).  The motion contains the most
</span><span class='line'> * recent point, as well as any intermediate points since the last
</span><span class='line'> * hover move event.
</span><span class='line'> * &lt;p&gt;
</span><span class='line'> * This action is always delivered to the window or view under the pointer.
</span><span class='line'> * &lt;/p&gt;&lt;p&gt;
</span><span class='line'> * This action is not a touch event so it is delivered to
</span><span class='line'> * {@link View#onGenericMotionEvent(MotionEvent)} rather than
</span><span class='line'> * {@link View#onTouchEvent(MotionEvent)}.
</span><span class='line'> * &lt;/p&gt;
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_HOVER_MOVE       = 7;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Constant for {@link #getActionMasked}: The motion event contains relative
</span><span class='line'> * vertical and/or horizontal scroll offsets.  Use {@link #getAxisValue(int)}
</span><span class='line'> * to retrieve the information from {@link #AXIS_VSCROLL} and {@link #AXIS_HSCROLL}.
</span><span class='line'> * The pointer may or may not be down when this event is dispatched.
</span><span class='line'> * &lt;p&gt;
</span><span class='line'> * This action is always delivered to the window or view under the pointer, which
</span><span class='line'> * may not be the window or view currently touched.
</span><span class='line'> * &lt;/p&gt;&lt;p&gt;
</span><span class='line'> * This action is not a touch event so it is delivered to
</span><span class='line'> * {@link View#onGenericMotionEvent(MotionEvent)} rather than
</span><span class='line'> * {@link View#onTouchEvent(MotionEvent)}.
</span><span class='line'> * &lt;/p&gt;
</span><span class='line'> */
</span><span class='line'>public static final int ACTION_SCROLL           = 8;
</span></code></pre></td></tr></table></div></figure>


<p>通过以下语句，可以可以判断当前触摸处于何种状态，进而进行相关的操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>switch (event.getActionMasked()) {
</span><span class='line'>  case MotionEvent.ACTION_DOWN:
</span><span class='line'>      ...
</span><span class='line'>      break;
</span><span class='line'>  case MotionEvent.ACTION_MOVE:
</span><span class='line'>      ...
</span><span class='line'>      break;
</span><span class='line'>  ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>但是实际上事情到这里远没有终止，<code>onTouch</code>中我们可以通过<code>getAction</code>获取响应的触摸行为。但是当我们运行demo的时候发现，默认情况下只有ACTION_DOWN事件会响应，<code>ACTION_MOVE</code>竟然不响应，原来是onTouch()默认条件下<code>return false</code>，意味着View本身调用一次<code>ACTION_DOWN</code>函数后，就将触摸事件继续向其父类View继续传递，所以<code>ACTION_MOVE</code>不能响应。如果要获得响应，那我们需要告诉系统由<code>我</code>来处理触摸事件，<code>return true</code>就是View对外界释放的信号，此时事件就可以被View继续处理。</p>

<h3>2. boolean onInterceptTouchEvent(MotionEvent ev)</h3>

<p>除了onTouch外，开发中我们还可以经常遇到onInterceptTouchEvent，从字面意思来看是拦截触摸事件的作用，为了更权威，摘录官方解释如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>For as long as you return false from this function, each following
</span><span class='line'>     * event (up to and including the final up) will be delivered first here
</span><span class='line'>     * and then to the target's onTouchEvent().
</span><span class='line'>     *  If you return true from here, you will not receive any
</span><span class='line'>     * following events: the target view will receive the same event but
</span><span class='line'>     * with the action {@link MotionEvent#ACTION_CANCEL}, and all further
</span><span class='line'>     * events will be delivered to your onTouchEvent() method and no longer
</span><span class='line'>     * appear here.</span></code></pre></td></tr></table></div></figure>


<p>查看源代码可以看到，这个方法被定义在ViewGroup中，我们可以猜到这个方法可能会和View的子View有关系。结合官方解释，如果onInterceptTouchEvent()返回为true，那么触摸事件不会被分发到子类中。</p>

<h3>3. View.dispatchTouchEvent()</h3>

<p>dispatchTouchEvent()是View类中的方法，用于将当前View接收到的触摸事件进行分发或者进行自身的相应处理。触摸事件从用户点击屏幕时就开始被封装为TouchEvent开始了自己的旅程：</p>

<ol>
<li><p>Activity.dispatchTouchEvent(), Activity通过系统本身的传感器接收到封装为MotionEvent的触摸事件，开始通过dispatchTouchEvent()把事件向下分发给Root ViewGroup。</p></li>
<li><p>ViewGroup.dispatchTouchEvent(), ViewGroup从Activity中拿到MotionEvent后，首先通过自己的dispatchTouchEvent再次向自己的子View分发。在dispatchTouchEvent函数中，ViewGroup会调用自己的onInterceptTouchEvent，如果intercept返回true，那么ViewGroup就停止对子View进行事件分发，一旦有些子View还有一些处理中的触摸事件，ViewGroup会发送ACTION_CANCEL事件给子View，然后ViewGroup判断自己是否有onTouchListener, 有的话就执行之，没有的话就会执行自身的onTouchEvent()。如果intercept返回false，ViewGrou将会根据触摸的位置和子View的位置判断是否将MotionEvent分发给子View.</p></li>
<li><p>在触摸点范围内的子View会根据继续进行类似2的处理。如果子View也有自己的children，则继续按照步骤2中的逻辑进行分发。这里假设子View没有children。如果自己的onTouchListener存在的话，则首先会执行listener中的onTouch()方法或者直接去执行自身的onTouchEvent()方法。 执行这些方法如果返回true，则表示View已经消耗了这个触摸事件，事件传递结束。如果onTouch()返回false，则冒泡向上传递MotionEvent，直到Activity.onTouchEvent()，是触摸事件的终点。</p></li>
</ol>


<h3>More. SimpleOnGestureListener</h3>

<p><code>onTouch是</code>View中所有触摸事件的入口，通过上面的了解我们可以看到MotionEvent中通过提供触摸的位置和触摸的类型方便我们进行各种判断，但是我们的真实需求往往比这复杂，我们有时需要自己处理双击事件，长按事件，滑动事件等等。如果这些由我们自己处理，那我们需要在onTouch()中进行一些逻辑判断，这无形中增加了我们的开发难度和代码量。好在Android通过GestureDetector提供了更好的支持。对于一些常规的事件，我们可以直接通过GestureDetector捕获，从而降低了我们的开发成本，开发人员可以把更多的时间放在业务上。通过<code>GestureDetector.SimpleOnGestureListener</code>的实现，我们能够复写一些基础的事件，从而完成我们的一些业务逻辑。 <br/>
<img src="http://www.gongmingqm10.net//images/touch-gesture-1.png" alt="SimpleOnGestureListener"/> <br/>
通过以上代码，我们主要可以看到在<code>View.setOnTouchListener</code>中将MotionEvent委托给GestureDetector来处理，而自身返回的true或者false将决定父容器能否响应触摸事件。</p>

<h3>Sample. SwipeLayout</h3>

<p>了解了touch事件的机制以及流程，我们能够更加灵活的自定义与手势操作结合起来的控件。在这个例子中，我们自定义SwipeLayout，实现竖直翻动效果。</p>

<p>代码源地址为：<a href="https://github.com/gongmingqm10/AndroidUikit/blob/master/library/src/main/java/org/gongming/common/SwipeLayout.java">SwipeLayout源码</a></p>

<h3>Reference</h3>

<ol>
<li><a href="http://stackoverflow.com/questions/9586032/android-difference-between-onintercepttouchevent-and-dispatchtouchevent">Android: Difference between onInterceptTouchEvent and dispatchTouchEvent?</a></li>
<li><a href="http://developer.android.com/training/gestures/viewgroup.html">Managing Touch Events in a ViewGroup</a></li>
<li><a href="http://www.youtube.com/watch?v=EZAoJU-nUyI">How Android Handles Touches</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云服务器使用记录]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/09/29/yun-fu-wu-qi-shi-yong-ji-lu/"/>
    <updated>2014-09-29T15:01:31+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/09/29/yun-fu-wu-qi-shi-yong-ji-lu</id>
    <content type="html"><![CDATA[<h3>我的第一个云服务器ECS</h3>

<p>云服务器简单来说就是一台远程主机，在MAC上可轻松登录进去进行，然后在命令行中可以轻松部署你的网站，应用等等。于是花了100大洋租了几个月的阿里云Aliyun Linux 5.7 主机，出于学习的目的，所有的配置都采用最低配，日后有需要再进行升级吧。<br/>
使用teminal，用SSH登录进去</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>minggong:octopress minggong$ ssh root@XXX.XX.XXX.XX
</span><span class='line'>root@root@XXX.XX.XXX.XX's password: 
</span></code></pre></td></tr></table></div></figure>


<p><code>XXX.XX.XXX.XX</code>是我主机的IP地址，然后根据提示输入密码，然后就顺利的登录进去，刚进去的系统是很干净的。由于系统是centerOS的（试了半天的apt-get都无效），那就使用yum来安装软件吧。</p>

<h3>yum安装java</h3>

<p><strong>BUG1:</strong> 首次尝试运行 <code>sudo yum update</code>，但是控制台立即返回<code>Failed to set locale, defaulting to C</code>.<br/>
<strong>SOLVE1:</strong> 执行命令 <code>echo "export LC_ALL=en_US.UTF-8"  &gt;&gt;  /etc/profile</code>，退出连接重新登录，问
题解决.</p>

<p><strong>BUG2:</strong> 再次尝试运行 <code>sudo yum update</code>，返回错误<code>No Packages marked for Update</code>.<br/>
<strong>SOLVE2:</strong> 尝试了N种方法终于在<a href="http://www.itartisan.cn/article/aliyun-redhat-setup-jdk-mysql-nginx-tomcat.html">阿里云主机安装JDK</a>上找到了解决办法，如下：</p>

<p><strong>a.通过rpm命令查看有哪些yum包，然后进行卸载</strong><br/>
<code>rpm -qa|grep yum</code></p>

<p>yum-3.2.22-20.el5<br/>
yum-metadata-parser-1.1.2-3.el5</p>

<p><code>rpm -e --nodeps yum-3.2.22-20.el5rpm -e --nodeps yum-metadata-parser-1.1.2-3.el5</code></p>

<p><strong>b.wget从163镜像上下载CentOS的yum包，先 cd /home，把文件下载/home文件夹中，便于管理：</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://mirrors.163.com/centos/5/os/x86_64/CentOS/yum-3.2.22-40.el5.centos.noarch.rpm
</span><span class='line'>wget http://mirrors.163.com/centos/5/os/x86_64/CentOS/yum-metadata-parser-1.1.2-4.el5.x86_64.rpm
</span><span class='line'>wget http://mirrors.163.com/centos/5/os/x86_64/CentOS/yum-fastestmirror-1.1.16-21.el5.centos.noarch.rpm
</span></code></pre></td></tr></table></div></figure>


<p>下载完成后使用 <code>rpm -ivh yum*</code>，这几个文件需要同时安装，所以用一行命令来安装。</p>

<p>c.更新CentOS-Base.repo源</p>

<p>进入<code>/etc/yum.repos.d/</code>目录，并备份原始的CentOS-Base.repo文件：<br/>
<code>cd /etc/yum.repos.d/ &amp;&amp;  mv CentOS-Base.repo CentOS-Base.repo.back</code></p>

<p>wget下载Cent-OS.repo文件到<code>/etc/yum.repos.d/</code>目录下：<br/>
<code>wget http://www.linuxidc.com/files/2011/05/06/CentOS-Base.repo</code></p>

<p>d.生成缓存文件到/var/cache/yum目录<br/>
<code>yum makecache</code></p>

<hr />

<p>OK，最后终于work了。运行<code>sudo yum update</code>，可以看到一些update。<br/>
解决了YUM的安装问题，我们步入正题安装java：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@iZ23572i0rtZ home]# yum search java | grep -i --color JDK
</span><span class='line'>java-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment
</span><span class='line'>java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos
</span><span class='line'>java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment
</span><span class='line'>java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation
</span><span class='line'>java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle
</span><span class='line'>java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment
</span><span class='line'>java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos
</span><span class='line'>java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment
</span><span class='line'>java-1.7.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation
</span><span class='line'>java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle
</span><span class='line'>ldapjdk.x86_64 : The Mozilla LDAP Java SDK
</span><span class='line'>ldapjdk-javadoc.x86_64 : Javadoc for ldapjdk
</span><span class='line'>[root@iZ23572i0rtZ home]# yum install java-1.7.0-openjdk.x86_64
</span></code></pre></td></tr></table></div></figure>


<p>然后按照步骤，一步步确认，最后就安装成功，查看 <code>java -version</code> 验证是否正确安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@iZ23572i0rtZ home]# java -version
</span><span class='line'>java version "1.7.0_65"
</span><span class='line'>OpenJDK Runtime Environment (rhel-2.5.1.2.el5_10-x86_64 u65-b17)
</span><span class='line'>OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
</span><span class='line'>[root@iZ23572i0rtZ home]# 
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android自定义View]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/09/25/androidzi-ding-yi-view/"/>
    <updated>2014-09-25T23:22:11+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/09/25/androidzi-ding-yi-view</id>
    <content type="html"><![CDATA[<p>Android开发中经常用到各种各样的View，有时需要自定义View来满足当前的需求。这些自定义View主要是复写View绘制时的一些方法，从而产生新的View供项目中使用。</p>

<h2>View的绘制流程</h2>

<p>自定义控件从最基础的View开始，View有几个重要的函数：<code>onMeasure()</code>, <code>onLayout()</code>, <code>onDraw()</code>，与触摸动作相关的还有<code>onTouchEvent()</code>，View也和Activity一样具有一定的生命周期，从View被创建开始到创建完成，主要经历了 <code>onMeasure</code> <code>onLayout</code> <code>onDraw()</code> 等过程，这些过程都是一步步完成的。也代表着View从声明到被用户看到的具体步骤。通过对这些中间步骤的了解与<code>Override</code>，我们可以创造出一些特殊的View。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  public class CustomView extends View {
</span><span class='line'>
</span><span class='line'>    private static final String TAG = "gongmingqm10";
</span><span class='line'>
</span><span class='line'>    public CustomView(Context context) {
</span><span class='line'>        super(context);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public CustomView(Context context, AttributeSet attrs) {
</span><span class='line'>        super(context, attrs);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public CustomView(Context context, AttributeSet attrs, int defStyleAttr) {
</span><span class='line'>        super(context, attrs, defStyleAttr);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onDraw(Canvas canvas) {
</span><span class='line'>        super.onDraw(canvas);
</span><span class='line'>        Log.i(TAG, "--onDraw--");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
</span><span class='line'>        super.onLayout(changed, left, top, right, bottom);
</span><span class='line'>        Log.i(TAG, "--onLayout--" + left + " - " + top + " - " + right + " - " + bottom);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
</span><span class='line'>        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
</span><span class='line'>        Log.i(TAG, "--onMeasure--" + widthMeasureSpec + " - " + heightMeasureSpec);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public boolean onTouchEvent(MotionEvent event) {
</span><span class='line'>        Log.i(TAG, "--onTouchEvent--" + event.getX() + " - " + event.getY());
</span><span class='line'>        return super.onTouchEvent(event);
</span><span class='line'>    }
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>在布局文件<code>main.xml</code>文件中这样使用自定义的<code>CustomView</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>  &lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>
</span><span class='line'>  &lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>      android:orientation="vertical" android:layout_width="match_parent"
</span><span class='line'>          android:layout_height="match_parent"&gt;
</span><span class='line'>      &lt;org.gongming.common.swipelist.CustomView
</span><span class='line'>          android:layout_width="match_parent"
</span><span class='line'>          android:layout_height="600px"
</span><span class='line'>          android:background="#333666"
</span><span class='line'>          /&gt;
</span><span class='line'>  &lt;/FrameLayout&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Logcat输出结果为</p>

<pre><code>09-25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onMeasure--1073742904    - 1073742424
09-25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onMeasure--1073742904 - 1073742424
09-25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onLayout--0 - 0 - 1080 - 600
09  -25 15:55:29.876    1535-1535/org.gongming.uikit I/gongmingqm10﹕ --onDraw--
</code></pre>

<p>通过上面的Logcat，我们可以看到在View的创建过程中， <code>onMeasure</code>被连续两次调用，调用完成之后紧接着<code>onLayout()</code>，最后进行<code>onDraw()</code>，于是一个View完成了从声明到创建的全过程。那么<code>onMeasure()</code> <code>onLayout()</code> <code>onDraw()</code>这几个方法究竟在绘制View的过程中起到了怎样的作用呢？</p>

<h3>1. onMeasure(int widthMeasureSpec, int heightMeasureSpec)</h3>

<p>从Log打印出来的信息来看，参数 widthMeasureSpec和heightMeasureSpec的值看起来没有特别实际的意义，但是Android本身提供了<code>MeasureSpec.getMode(measureSpec)</code>和<code>MeasudeSpec.getSize(measureSpec)</code>方法，这两个方法能够分别拿到int类型的 <code>mode</code> 和 <code>size</code>。<code>mode</code> 和 <code>size</code>主要描述了当前控件在父控件中的占位方式，以及根据占位方法计算出来的大小。我们可以根据 <code>mode</code> <code>size</code> 的值对控件的实际大小进行自定义控制。如果我们不使用<code>super.onMeasure(widthMeasureSpec, heightMeasureSpec)</code>，我们必须调用<code>setMeasureDimense(width, height)</code>来使这些设置生效。<code>width, height</code>分别表示当前这个控件真实的大小。</p>

<p>通过对<code>onMeasure()</code>函数的理解，我们基本知道<code>onMeasure()</code>的功能是告诉Android当前View的大小，并且此大小也是根据布局中父容器的约束生成的。当前我们也可以根据这些大小进行自定义设置当前View的大小。引用 <a href="http://stackoverflow.com/questions/12266899/onmeasure-custom-view-explanation">stackoverflow</a>上的回答：</p>

<blockquote><p>onMeasure() is your opportunity to tell Android how big you want your custom view to be dependent the layout constraints provided by the parent; it is also your custom view&rsquo;s opportunity to learn what those layout constraints are (in case you want to behave differently in a match_parent situation than a wrap_content situation). These constraints are packaged up into the MeasureSpec values that are passed into the method.</p></blockquote>

<p>对于MeasureSpec的<code>mode</code>主要有<code>EXACTLY, AT_MOST, UNSPECIFIED</code>三种值:</p>

<h5><code>EXACTLY</code></h5>

<p>字面意义是准确的，也就是我们的View是的宽度和高度是固定准确的，<code>mode</code>为这种值时，通常是我们设置了<code>layout_width</code>或者<code>layout_height</code>的值为一个给定的值，或者我们设置View的宽度或高度为<code>match_parent</code>，而父容器的宽度或高度固定。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical" android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;org.gongming.common.swipelist.CustomView
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="match_parent"
</span><span class='line'>        android:background="#333666"
</span><span class='line'>        /&gt;
</span><span class='line'>
</span><span class='line'>&lt;/FrameLayout&gt;
</span></code></pre></td></tr></table></div></figure>


<p>这里的CustomView宽度和高度都是 <code>match_parent</code>，而parent也是充满整个view页面，因此parent的大小是固定的，所以CustomView的大小也是固定的，这里取到的<code>mode</code>值就为<code>EXACTLY</code>；</p>

<p>如果把FrameLayout的宽度高度都设置成<code>wrap_content</code>，此时得到的<code>mode</code>同样都是<code>EXACTLY</code>，因为FrameLayout宽高收到屏幕大小的约束，其本身的大小是收到子view的影响，此时子View通过<code>match_parent</code>获得最大的空间，于是FrameLayout的宽高被撑到了最大值的水平。</p>

<h5><code>AT_MOST</code></h5>

<p>通过名词本身的描述，这种状态下意味着View存在一个最大值的约束，最大值约束一般来自父View，父View经过层层依赖，又会受到设备屏幕大小的约束。通过下面的例子看什么时侯View会呈现出<code>AT_MOST</code>状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical" android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;org.gongming.common.swipelist.CustomView
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:background="#333666"
</span><span class='line'>        /&gt;
</span><span class='line'>
</span><span class='line'>&lt;/FrameLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>这种情况下CustomView的高度是<code>wrap_content</code>，自适应内容，没有固定的值。但是由于父容器FrameLayout的宽度和高度是固定的，因此FrameLayout的宽高将会约束CustomView的宽高。CustomView的高度此时会有个最大值约束。这是 CustomView高度的Mode是<code>AT_MOST</code>.<br/>
如果把FrameLayout的<code>layout_height</code>设置为<code>wrap_content</code>，由于父容器自身的高度有个<code>AT_MOST</code>属性，子元素CustomView的最大值也不会超过父元素的最大值约束。所以此时CustomView的高度Mode仍然是<code>AT_MOST</code>。<br/>
综合来看，只要View的当前宽度或者高度不是固定的，但是会存在一个最大值界限，则View 的Mode为<code>AT_MOST</code>。</p>

<h5><code>UNSPECIFIED</code></h5>

<p><code>UNSPECIFIED</code>意味着高度或者宽度值是不明确不具体的，即Android系统本身都很难决定元素的宽度或者高度值，也没有对其宽度高度的约束值。一个典型情况是ScrollView，由于ScrollView的可以自滑动，因此其滑动方向上可以进行无限的伸缩，于是View在绘制时就很难确定其具体约束。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;org.gongming.common.swipelist.CustomView
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="match_parent"
</span><span class='line'>        android:background="#333666"
</span><span class='line'>        /&gt;
</span><span class='line'>
</span><span class='line'>&lt;/ScrollView&gt;
</span></code></pre></td></tr></table></div></figure>


<p><code>ScrollView</code>默认是竖直滑动，因此其高度值是难以确定的，位于其里面的CustomView如果没有提供明确的竖直，那么无论使用<code>match_parent</code>，还是<code>wrap_content</code>，高度值都是不能确定的。高度的Mode为<code>UNSPECIFIED</code><br/>
除了上述的MeasureSpec.getMode()外，在本函数中我们还可以通过MeasureSpec.getSize()得到View真实的值，这个真实值将会用来绘制当前View。我们自定义View的时侯也可以通过onMeasure进行恰当的重写，从而实现我们自己想要的功能。</p>

<h3>2. onLayout(boolean changed, int left, int top, int right, int bottom)</h3>

<p><code>onLayout()</code>的参数中我们能够直接拿到当前view的位置，(left, top)描述了左上顶点的位置，而(right, bottom)确定了右下角的位置，在自定义View的时侯，可以根据父容器的位置，调用子View的layout()函数直接指定子view的位置。我们的LinearLayout, RelativeLayout等就是继承ViewGroup，然后根据子View设置的相关属性，从而确定子View应该被放在哪里，我们在app中也就看到了期望的界面。</p>

<h3>3. onDraw(Canvas canvas)</h3>

<p>Canvas是View的画布，有了canvasView才会真正的显示出来，才有我们看到的背景，图像，边框等元素。通过复写onDraw()，我们能够利用canvas做一些自定义的行为。比如我们通常看到的显示圆形ImageView头像等。</p>

<h2>自定义View的实现</h2>

<h4>自动换行控件-FlowLayout</h4>

<p>这个Demo中主要通过继承ViewGroup实现自动换行控件，这种通常被用来放置TextView，对文字长度和数量位置的TextView来说，自动换行控件能够实现很好的布局效果，我们只需要将TextView加载到FlowLayout中，便可实现TextView组的自动换行。我们也可以批量给TextView增加自定义事件，进而实现我们想做的事情。</p>

<p>自定义ViewGroup主要参考Google的<a href="http://developer.android.com/reference/android/view/ViewGroup.html">ViewGroup</a>，参照自定义控件写法，主要是人工对onMeasure()和onLayout进行重写。onMeasure()决定了控件本身的宽度和高度，而onLayout()则用来确定子类的位置摆放。子类在父类中的位置摆放通过layout(l, t, r, b)，这几个值表示控件的左上坐标和右下坐标，坐标是相对于父容器的位置来确定的。</p>

<p>首先看具体效果：<br/>
<img src="http://www.gongmingqm10.net//images/flow_layout_1.png" alt="FlowLayout" style="width: 250px;"/></p>

<p>代码实现如下FlowLayout.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package org.gongming.common;
</span><span class='line'>
</span><span class='line'>import android.content.Context;
</span><span class='line'>import android.util.AttributeSet;
</span><span class='line'>import android.util.Log;
</span><span class='line'>import android.view.View;
</span><span class='line'>import android.view.ViewGroup;
</span><span class='line'>
</span><span class='line'>public class FlowLayout extends ViewGroup {
</span><span class='line'>
</span><span class='line'>    private static final int leftMargin = 6;
</span><span class='line'>    private static final int rightMargin = 6;
</span><span class='line'>    private static final int topMargin = 10;
</span><span class='line'>    private static final int bottomMargin = 10;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    public FlowLayout(Context context) {
</span><span class='line'>        super(context);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public FlowLayout(Context context, AttributeSet attrs) {
</span><span class='line'>        super(context, attrs);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public FlowLayout(Context context, AttributeSet attrs, int defStyle) {
</span><span class='line'>        super(context, attrs, defStyle);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
</span><span class='line'>        int maxWidth = 0;
</span><span class='line'>        int maxHeight = 0;
</span><span class='line'>        int childState = 0;
</span><span class='line'>        int calcHeight = 0;
</span><span class='line'>
</span><span class='line'>        int totalWidth = MeasureSpec.getSize(widthMeasureSpec);
</span><span class='line'>        int count = getChildCount();
</span><span class='line'>
</span><span class='line'>        for (int index = 0; index &lt; count; index++) {
</span><span class='line'>            final View child = getChildAt(index);
</span><span class='line'>            if (child.getVisibility() != GONE) {
</span><span class='line'>                measureChild(child, widthMeasureSpec, heightMeasureSpec);
</span><span class='line'>                int calcWidth = child.getMeasuredWidth() + leftMargin + rightMargin;
</span><span class='line'>                calcHeight = Math.max(calcHeight, child.getMeasuredHeight() + topMargin + bottomMargin);
</span><span class='line'>                if (maxWidth + calcWidth &gt; totalWidth) {
</span><span class='line'>                    maxWidth = totalWidth;
</span><span class='line'>                    maxHeight += calcHeight;
</span><span class='line'>                } else {
</span><span class='line'>                    maxWidth += calcWidth;
</span><span class='line'>                }
</span><span class='line'>                childState = combineMeasuredStates(childState, child.getMeasuredState());
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        maxHeight += calcHeight;
</span><span class='line'>        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
</span><span class='line'>        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());
</span><span class='line'>        setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, childState),
</span><span class='line'>                resolveSizeAndState(maxHeight, heightMeasureSpec,
</span><span class='line'>                        childState &lt;&lt; MEASURED_HEIGHT_STATE_SHIFT));
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onLayout(boolean changed, int l, int t, int r, int b) {
</span><span class='line'>        int totalWidth = getMeasuredWidth();
</span><span class='line'>        int count = getChildCount();
</span><span class='line'>        int width = 0;
</span><span class='line'>        int height = 0;
</span><span class='line'>
</span><span class='line'>        for (int index = 0; index &lt; count; index++) {
</span><span class='line'>            View view = getChildAt(index);
</span><span class='line'>            int calcHeight = view.getMeasuredHeight() + topMargin + bottomMargin;
</span><span class='line'>            int calcWidth = view.getMeasuredWidth() + leftMargin + rightMargin;
</span><span class='line'>            if (width + calcWidth &gt; totalWidth) {
</span><span class='line'>                height += calcHeight;
</span><span class='line'>                width = calcWidth;
</span><span class='line'>            } else {
</span><span class='line'>                width += calcWidth;
</span><span class='line'>                height = Math.max(calcHeight, height);
</span><span class='line'>            }
</span><span class='line'>            view.layout(width - calcWidth + leftMargin, height - calcHeight + topMargin, width - rightMargin, height - bottomMargin);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public void setOnItemClickListener(OnClickListener listener) {
</span><span class='line'>        for (int index = 0; index &lt; getChildCount(); index++) {
</span><span class='line'>            View child = getChildAt(index);
</span><span class='line'>            child.setOnClickListener(listener);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>看看我们在xml中如果使用当前定义的View，主要通过包名访问：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical" android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>    &lt;TextView
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_width="wrap_content"
</span><span class='line'>        android:text="Root Swipe Layout"
</span><span class='line'>        android:layout_gravity="center"
</span><span class='line'>        /&gt;
</span><span class='line'>    &lt;org.gongming.common.FlowLayout
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:id="@+id/flowLayout"
</span><span class='line'>        &gt;
</span><span class='line'>        &lt;TextView
</span><span class='line'>            android:layout_width="wrap_content"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:text="hahahah"
</span><span class='line'>            android:background="#7E7EFF"
</span><span class='line'>            /&gt;
</span><span class='line'>        &lt;TextView
</span><span class='line'>            android:layout_width="wrap_content"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:text="This is a amazing layout"
</span><span class='line'>            android:background="#7E7EFF"
</span><span class='line'>            /&gt;
</span><span class='line'>        &lt;TextView
</span><span class='line'>            android:layout_width="wrap_content"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:text="Where is this layout"
</span><span class='line'>            android:background="#7E7EFF"
</span><span class='line'>            /&gt;
</span><span class='line'>        &lt;TextView
</span><span class='line'>            android:layout_width="wrap_content"
</span><span class='line'>            android:layout_height="wrap_content"
</span><span class='line'>            android:text="Oh, God. Please save me. I'm the cool layout"
</span><span class='line'>            android:background="#7E7EFF"
</span><span class='line'>            /&gt;
</span><span class='line'>    &lt;/org.gongming.common.FlowLayout&gt;
</span><span class='line'>&lt;/LinearLayout&gt;
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>在java代码里还可以定义item的单击事件，<code>flowLayout.setOnItemClickListener(OnClickListener listener)</code>， 这样就能对用户的单击行为进行响应。</p>

<h4>定比例长宽RelativeLayout-RatioRelativeLayout</h4>

<p>Android设备的多样性使得我们要尽量做出适应多设备的可伸缩布局。在最佳实践中，我们谈到要尽量使用RelativeLayout相对布局。同样，我们在这里自定义了一种固定长宽比例的元素。通过自己指定的高度／宽度的比例值，最终确定View应该绘制的宽度和高度。定义如下，主要增加了一个ratio属性，以及重写了onMeasure()方法。<br/>
res/values/attrs.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;resources&gt;
</span><span class='line'>
</span><span class='line'>    &lt;declare-styleable name="RatioLayout"&gt;
</span><span class='line'>        &lt;!--The ratio defines the value of height / width --&gt;
</span><span class='line'>        &lt;attr name="ratio" format="float" /&gt;
</span><span class='line'>    &lt;/declare-styleable&gt;
</span><span class='line'>
</span><span class='line'>&lt;/resources&gt;
</span></code></pre></td></tr></table></div></figure>


<p>RatioRelativeLayout.java</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package org.gongming.common;
</span><span class='line'>
</span><span class='line'>import android.content.Context;
</span><span class='line'>import android.content.res.TypedArray;
</span><span class='line'>import android.util.AttributeSet;
</span><span class='line'>import android.widget.RelativeLayout;
</span><span class='line'>
</span><span class='line'>public class RatioRelativeLayout extends RelativeLayout {
</span><span class='line'>
</span><span class='line'>    private float ratio = 0f;
</span><span class='line'>
</span><span class='line'>    public RatioRelativeLayout(Context context) {
</span><span class='line'>        super(context);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public RatioRelativeLayout(Context context, AttributeSet attrs) {
</span><span class='line'>        super(context, attrs);
</span><span class='line'>        init(attrs);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public RatioRelativeLayout(Context context, AttributeSet attrs, int defStyle) {
</span><span class='line'>        super(context, attrs, defStyle);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    private void init(AttributeSet attrs) {
</span><span class='line'>        TypedArray typedArray = getContext().obtainStyledAttributes(attrs, R.styleable.RatioLayout);
</span><span class='line'>        ratio = typedArray.getFloat(R.styleable.RatioLayout_ratio, 0f);
</span><span class='line'>        typedArray.recycle();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
</span><span class='line'>        int measureWidth = MeasureSpec.getSize(widthMeasureSpec);
</span><span class='line'>        int measureHeight = MeasureSpec.getSize(heightMeasureSpec);
</span><span class='line'>
</span><span class='line'>        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
</span><span class='line'>        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
</span><span class='line'>
</span><span class='line'>        if (widthMode == MeasureSpec.EXACTLY && ratio != 0f) {
</span><span class='line'>            measureHeight = (int) (measureWidth * ratio);
</span><span class='line'>        } else if (heightMode == MeasureSpec.EXACTLY && ratio != 0f) {
</span><span class='line'>            measureWidth = (int) (measureHeight / ratio);
</span><span class='line'>        } else {
</span><span class='line'>            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
</span><span class='line'>        }
</span><span class='line'>        setMeasuredDimension(measureWidth, measureHeight);
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>在xml使用时使用该控件并给ratio设置值即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>
</span><span class='line'>&lt;FrameLayout
</span><span class='line'>    xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    xmlns:app="http://schemas.android.com/apk/res-auto"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"
</span><span class='line'>
</span><span class='line'>    &gt;
</span><span class='line'>
</span><span class='line'>    &lt;org.gongming.common.RatioRelativeLayout
</span><span class='line'>        android:layout_width="match_parent"
</span><span class='line'>        android:layout_height="wrap_content"
</span><span class='line'>        android:background="@android:color/darker_gray"
</span><span class='line'>        app:ratio="0.5"
</span><span class='line'>        &gt;
</span><span class='line'>
</span><span class='line'>    &lt;/org.gongming.common.RatioRelativeLayout&gt;
</span><span class='line'>
</span><span class='line'>&lt;/FrameLayout&gt;
</span></code></pre></td></tr></table></div></figure>


<p>最后在界面上我们便可以看到一个高度是宽度一半的自定义View。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travel to ThoughtWorks]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/09/22/travel-to-thoughtworks/"/>
    <updated>2014-09-22T10:39:01+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/09/22/travel-to-thoughtworks</id>
    <content type="html"><![CDATA[<blockquote><p>Life is a journey, not a destination.</p></blockquote>

<p>人生就是在时光的隧道中不同的奔跑，在不同的环境中遇到不同的人，然后开始相同的挣扎，最后不断优秀的过程。加入ThoughtWorks一月有余，期间经历了一些事情，趁着On beach的时光对其进行一些沉淀，若干年后作为记忆的时光进行回忆品味。</p>

<h3>面试</h3>

<p>转眼已是金秋时节，又是一年校招季。距离上次面试也已经快一年的距离了，时间总是走得如此之快。想起去年奔走在各个公司的面试宣讲会上。然后在人山人海中投着一遍遍的简历，然后在有幸的面试中都会被无情的刷掉。这种落差也许只有自己知道，这种期望与失望的矛盾混杂在现实的残酷与理想的丰满中。最后却冷不丁的进了ThoughtWorks的终面，经历了Quiz Test， Code Homework，Tech Interview， HR Interview，最后进到了Group Discussion。于是我用着不太顺畅的普通话讲述着 &ldquo;Why ThoughtWorks should Hire Me&#8221;，我不太会演讲，这种public speech对于我来说更是显得有点困难，但是坚持就意味着胜利。然后意外的进入了ThoughtWorks Graduate的阵营。毕业生都是将要离开学校，而第一份工作也总会决定他们一生的状态。于是凭借着自己的感觉放弃了上海那个温暖的团队，决定在这个Geek闻名的公司里面开启新的学习生涯。毕业季的日子终究是平淡的，于是也就选择了来实习。</p>

<h3>实习</h3>

<p>只身一人来到西安实习，这个第一次到来的城市总是能让我感到陌生，于是以最快的速度找好了租房，最后终于处于一个暂时安定的状态。实习之初的日子是难熬的，意味着你必须抛弃之前自己的所长来开始接受一些完全陌生的技术，接触一个完全陌生的团队，然后建立彼此之间的信任又要花费你很长时间。难熬的日子总会让你变得话很少，因为缺少了自信，自己甚至胆怯于说话。生活之余更是和大家缺少沟通。以至于大家甚至怀疑我能不能熬过这个实习阶段。我是个慢性子的人，慢慢的真实的我开始显现出来，除了一方面对技术的熟悉，另外一方面更是和大家的熟悉。这种融入集体的感觉是奇妙的，枯燥的工作开始变得乐趣横生。也许人生就是一个涅槃的过程，对于我而言尤其如此。每次到达一个新地方，我总得花上一个月得时间建立这种与人与物之间的情感。实习结束，自己开始接触Web，接触Ruby，接触AngularJS。总体而言还是很酷的。</p>

<h3>TWU</h3>

<p>TWU是我对于TW公司最期待的部分，人生就是一所大学，刚入职的我们也被送到印度进行为期五周的培训。都说印度是个开挂的城市，于是我们对印度也有了部分期待，期待之余也会有部分顾虑，对未知挑战的一种胆怯。终于在8月初出发了，我们备齐了传说种的老干妈和方便面，三拨人马分别从西安、成都、武汉奔赴北京，九人印度行就这样无声无息开始了。经历一系列的波折之后，我们终于在次日早上到达了Pune，印度这个城市没有我想像中的那么好，但是却是蛮有特色的。异国文化开始漫延开来，咖喱也沾上了我们的衣裳。</p>

<p>虽然有前辈们的前车之鉴与印度攻略，但是到了印度还是极度不适应，尤其是对这边的食物，我不能理解这种糊状的蔬菜的美味之初，不能理解咖喱的味道。我们操持着一口老干妈味道的英语开始了第一周的生活。第一周的培训主要以小组讨论为主，在天朝活惯了的我们显然很难参与老外激烈的讨论当中，于是讨论成为了我最痛苦的经历。这种经历源于语言的差异，交流是个很重要的东西，我们暂时还没适应English。</p>

<p>培训时的不积极表现是伴随着很深重的压力的，压力大部分源于我们自身。看着别人都交流甚欢，我们在一旁以疑惑的眼神看着眼前的一切，这样子真的不好。这是个Change yourself的过程，这种环境迫使我们去改变，迫使我们去融入。于是我们不得不尽量在可以发言的场合多发言，以弥补小组讨论中的不佳表现。第一周的大家都是沉闷的，大家都是有压力的。我们还是喜欢扎堆，但是对于Change却各有各自不同的看法。</p>

<p>大家以不同的状态度过了第一周，这个噩梦般的第一周。周末也终于不是让我们闲着，各种活动都等着我们，晚上回去躺在床上就不知不觉睡着了。对于我们来说，真的有点辛苦。这段时间甚至产生一个疯狂的想法，逃离印度，赶紧回国。总觉得自己的国家才是最温暖的庇护。现在的我们像个游离的人在世界的某个角落中神伤。随着时间的流逝，各种不适应开始缓解，我们开始抛弃了老干妈，开始吃着这边有名的Paratha，也会在某个空闲的晚上跑到Phoenix mall大吃一顿，这里的一顿普通的中国式的面条都可以让我们快乐一晚上。</p>

<p>除了每周的培训，我们还不得不和自己的Coach一起制定每周的Goal，Goal是我们一周最基本的任务，我们必须找时间完成。这成为了我们的一周的追求。Goal的设立从社交到社会公正到个人的学习，贯穿了公司Pillar 3 文化，这种文化是每个Twer必须接受和认同的。除了这些目标，我个人最大的两个挑战在于准备一次meaningful的LunchAndLearn，准备好一次Pecha Chucha。这种Pechu Chucha是对自己 public speech演讲能力的锻炼，演讲作为我的薄弱环节。从选择到PPT到准备演讲，花费可我不少时间和精力。好在最后在自己的努力下，这两项speech的效果都还不差。事后发现，通过这两次的锻炼，我开始不惧怕在公众场合说英语，更不会怯场了。感谢这个平台，这个挑战。</p>

<p>培训及演讲之余，我们后期的大部分工作时间都是在项目中度过，和不同文化不同背景的同时Pair编程是个很快乐的事情，好在我们来之前对于项目的技术栈有过相关的了解，我们在做Story的时侯也不至于存在太大的问题。实现手段是一方面，收获最大的还是Story的生命周期，以及作业规范，怎样成为一名符合ThoughtWorks要求的规范的Dev，我们尚在不断的学习中。学习之余，我们仍有大部分时间来进行技术相关的Dojo，对重构等的学习更是让自己受益匪浅。更增加了自己相关的专业兴趣。也增加了对软件质量代码质量的认同。</p>

<p>有人说我们来印度是来玩的，是的，除了公司带我们出去玩。我们在Yan的组织下还坐上了传说中有挂票的印度火车去孟买玩。车上也是人山人海，车上的环境也是各种味道。坐上火车穿山越岭去远方的感觉真好，我们穿过了印度的城市，穿过了印度的贫民窟，穿过了隧道，越过了山谷。我坐在火车门旁边，听着音乐，戴着耳机，任凭风吹过我的身体，任凭满眼的景色逝去，这是一种特殊的心境和状态。和大家在一起的感觉也真好，各种逗，各种笑话，各种经典，一段美好的时光永远记录在印度。</p>

<p>结束的TWU，我们准备回国了。一方面有点对印度的不舍，对朝夕相处五周的同事的不舍，更有着对异国文化的不舍与眷念。最后我们踏上了旅途，回国之前我们不忘在免税店大淘一番，看着某些奢侈品才觉得钱花得挺快赚得挺难。也有点明白为什么中国大妈喜欢在国外大淘特淘了，大家总喜欢与国内得对比，总觉得国外得便宜，买了这些就等于赚了。我也不例外。</p>

<p>回来了，感觉真好&hellip;</p>

<h3>现在</h3>

<p>回公司一周有余，回首过去一周基本处于游离状态，尚未真正加入项目组，更别谈能够和团队有所融合。发现对之前实习的项目组倒是有很多的怀念，人总是怀旧的。也希望我能够快速的加入加入到现在的项目组中，真正找到归宿感。</p>

<p>BTW, 挺怀念去印度的九个小伙伴以及和大家度过的岁月</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android best practice]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/09/16/android-best-practice/"/>
    <updated>2014-09-16T10:41:25+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/09/16/android-best-practice</id>
    <content type="html"><![CDATA[<h1>Android 最佳实践</h1>

<p>从事android开发两年有余，但是自己的代码自己却不太敢恭维。于是我不得不来改善我的Android程序，为了使它变得更加的稳固，更加的专业。本文旁征博引，多处观点都是Google之，结合自己的经验总结了Android开发中的一些最佳实践，厚积方能博发，多积累多学习才能多进步。</p>

<h3>Android Activity 的生命周期</h3>

<p>生命周期（Lifecycle）描述的是Android一个页面从开始创建到消亡的整个过程。伴随着一系列对象的创建及消失，涵盖着整个页面所包含的业务逻辑。以及与用户之间的交互，接受用户的输入并返回输出信息给用户。</p>

<p><img src="http://i.imgur.com/rPrTr.png" alt="Android Lifecycle" /></p>

<p>从其生命流程图中，我们可以看到Android单个Activity的生命周期主要为 onCreate &ndash;> onStart &ndash;> onResume &ndash;> Activity Running &ndash;> onPause &ndash;> onStop &ndash;> onDestroy. 通常单个App是由诸多的Activity组成的，一般情况我们肉眼所见的一个页面就是一个Activity，我们也经常再APP中点击Button或者Back，于是我们实现了Activity之间的切换。</p>

<h5>1. onCreate()与onDestroy()</h5>

<p>如何理解onCreate()呢？首先通过来自Google的官方解释来看onCreate()方法的作用：</p>

<blockquote><p>onCreate(Bundle) is where you initialize your activity. Most importantly, here you will usually call setContentView(int) with a layout resource defining your UI, and using findViewById(int) to retrieve the widgets in that UI that you need to interact with programmatically</p></blockquote>

<p>所以onCreate方法主要用于初始化我们的Activity。在onCreate()方法中，我们通过setContentView(int)来为当前的Activity指定对应的View， 然后通过findViewById(int)通过id检索当前View中的组件。至此，onCreate()的一些基本的初始化工作完成, Activity全局的初始化工作应该都在onCreate()中完成，这些初始化状态一直会被保存直到onDestroy()被调用，也就意味着Activity消亡。</p>

<p>细心观察发现，Activity的onCreate(Bundle)函数会有一个Bundle类型的参数savedInstanceState，通过这个meaningful的名字可以看到此参数主要用于使用之前保存的数据。</p>

<p>与onCreate()对应的方法是onDestroy(), 后者主要是Activity被销毁时会被执行的方法，当我们调用this.finish()手动结束当前的Activity, 此时onDestroy()会被回调，我们可以在这里面做一些程序被销毁前的保存性操作。</p>

<h5>2. onStart()与onStop()</h5>

<p>这两种状态一般出现在，当用户从Activity A 跳转到Activity B 中，此时Activity A 的 onStop函数会被回调，此时Activity A 被压入到堆栈中，并处于不可见状态。一旦用户结束Activity B, 再次进入Activity A 中，系统会重新调用onRestart()和onStart()函数，于是这个Activity重新被唤醒。</p>

<h5>3. onResume()与onPause()</h5>

<p>通过字面意思理解为Activity的恢复和停止，一个典型的例子是APP运行过程中突然有电话或者闹铃，以至于当前的Activity被其他的Activity覆盖，这种情况下会触发onResume()和onPause()事件，当然如果APP经历onStart()和onStop()事件，也必然会先经过onResume()和onPause()事件。生命周期的流程图如上图所示，其形成的是一个完成的闭路。</p>

<p>通过应用程序的一套完整的Lifecycle，Android保证了APP在手机上进行良好的运行，并且运行过程互不干扰。Android生命周期的存在也表明在APP开发中，应该使Activity功能彼此对应，在onStart()中注册了某些事件，在onStop()中就应该进行反注册，例如地图开发中的GPS定位，就需要在onStart中进行注册，而在onStop()中进行反注册。还有一些网络访问回调也存在类似的情形，都需要我们在APP开发中注意，确保APP以最佳的状态运行。</p>

<h3>Activity的职能－避免Activity类承载太多职能</h3>

<p>Activity作为Android的Controller，直接负载着与用户的交互过程。开发中Activitiy很容易由于大量的动画，布局等操作而变得臃肿，特别使业务逻辑渐渐复杂时，Activity过大的代码量增加了维护成本，甚至开发者自己都很难读懂这个Activity真正的含义。为了避免这种情况，我们要尽量将纯UI布局和动画逻辑分离到第三方类中，在Activity与用户交互过程中，一旦需要某些UI操作和动画表现等，直接对其相关的UI布局等进行调用即可。我们的Activity只作为真正的Controller，控制着接收用户输入以及反馈输出，至于中间的逻辑则完全可以交给“Presenter”调用。</p>

<h3>Android布局多屏适配</h3>

<p>Android由于设备众多，分辨率众多，不同厂家定制的SDK也增加了适配成本。所以我们开发过程，就不应该使用太过绝对的布局，而应该尽量使用相对布局。过于绝对的布局可能在当前设备上表现良好，一旦在其他机器上运行则可能会出现布局错乱的问题。布局时也要避免View之间的深嵌套，根据你的设计图选择合适的布局方式，过重的布局会拖慢页面的渲染速度，进而影响整个APP的性能表现。</p>

<h3>用Fragment代替Activity</h3>

<p>自Android4.0之后，Android开始使用Fragment，并保持不断更新中。简言之，Fragment也是可以直接代替Activity的Controller，Fragment主要是为了适配手机和平板而生的，Fragment在手机上和Activity的表现无异，但是在平板上却可以以类似于组件的形式表现出来，这种形式更适合平板的大屏显示方式。Fragment让我们不用去同时维护手机和平板上的两套代码，方便了开发过程。</p>

<h3>MVC最佳实践</h3>

<p>和Web开发中的MVC框架类似，我们同样可以对APP进行MVC化。具体而言，Activity是我们的Controller控制器，而对数据的读取与查询等具体语句则应该通过DataManager进行处理，类似于我们通常所说的Service，Service不直接和界面进行交互。用户的交互都是与Activity发生的，Service会提供一些数据读取相关的方法，以供Activity调用。</p>

<p>本文抛砖引玉，参考别人的文章，结合自己的实践经历总结了一些实践性的经验。个中不足，烦请大家不吝赐教，当然更欢迎大家一起交流。</p>

<p>文章参考：<a href="http://clayallsopp.com/posts/android-best-practices-tips/">http://clayallsopp.com/posts/android-best-practices-tips/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mybait migration session]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/08/17/mybait-migration-session/"/>
    <updated>2014-08-17T20:50:41+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/08/17/mybait-migration-session</id>
    <content type="html"><![CDATA[<h2>Mybatis Migration 初探</h2>

<p>持续交付项目中，项目会不断的迭代上线，这是会出现数据库的改动问题。在一个还未上线的项目中，我更改数据库可以使用简单的直接对sql进行更改，但是面对一个已投入使用的系统而言，每次部署都对数据库进行init显得有点不太可能。于是便有了数据库Migration的诞生。</p>

<p>我所在的项目是SpringMVC配合Mybatis的开发框架。作为一个数据库集成框架，Mybatis在使用上还是比较方便的。言归正传，为了项目需要，于是便开始了Mybatis Migration的初探，文章中出现的不妥之处还请大家不吝赐教。</p>

<h4>Mybatis Migration 安装</h4>

<p>安装过程主要参照Mybatis的官网： <a href="http://mybatis.github.io/migrations/index.html">http://mybatis.github.io/migrations/index.html</a>，以及Mybatis源代码授权地址: <a href="https://github.com/mybatis/migrations">https://github.com/mybatis/migrations</a>，参照github上的README文件可以轻易的完成其安装过程。README文件中所有的Mybatis包可以直接在其Git repo的releases中找到，我选择了3.2.0进行下载安装。安装完成后就可以直接在terminal中运行migrate相关的命令了。</p>

<h4>Mybatus Migration 初始化</h4>

<pre><code>minggong:migration-test minggong$ migrate init
------------------------------------------------------------------------
-- MyBatis Migrations - init
------------------------------------------------------------------------
Initializing: .
Creating: environments
Creating: scripts
Creating: drivers
Creating: README
Creating: development.properties
Creating: bootstrap.sql
Creating: 20140817132704_create_changelog.sql
Creating: 20140817132705_first_migration.sql
Done!

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 2s
-- Finished at: Sun Aug 17 18:57:05 GMT+05:30 2014
-- Final Memory: 3M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ ls
README      drivers     environments    scripts
</code></pre>

<p>初始化之后的目录下面会自动生成一些和Migration相关的项目文件及目录 README, drivers, environments, scripts。drivers中放置连接数据库需要的jdbc，environments主要放置连接数据库的地址以及授权信息等，scripts目录下则放置数据库相关的sql，init的时候就已经生成了上述显示的create_changelog.sql和first_migration.sql文件。</p>

<p>为了以实例说明问题，本次测试采用了mysql数据库，从mysql官网下载了<code>mysql-connector-java-5.1.32</code>，并对environment的数据库信息进行了简单的配置，配置如下：</p>

<pre><code>## JDBC connection properties.
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/arctic
username=root
password=
</code></pre>

<p>这里的arctic是已经存在本地的一个mysql数据库。</p>

<h4>Migrate bootstrap</h4>

<pre><code>minggong:migration-test minggong$ migrate bootstrap
------------------------------------------------------------------------
-- MyBatis Migrations - bootstrap
------------------------------------------------------------------------
========== Applying: bootstrap.sql =============================================

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 19:43:29 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<p>运行之后，scripts文件中将会生成另外一个bootstrap文件。主要可以进行一些数据库初始化工作。</p>

<h4>Migrate new</h4>

<p><code>new</code>命令能够创建新的sql脚本，我们只需要填充数据表结构信息，便可以方便的创建我们所需的数据表</p>

<pre><code>minggong:migration-test minggong$ migrate new "create blog table"
------------------------------------------------------------------------
-- MyBatis Migrations - new
------------------------------------------------------------------------
Creating: 20140817142201_create_blog_table.sql
Done!

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 1s
-- Finished at: Sun Aug 17 19:52:01 GMT+05:30 2014
-- Final Memory: 3M/493M
------------------------------------------------------------------------
</code></pre>

<p>scripts文件夹中会创建带有时间戳的sql文件：<code>20140817142201_create_blog_table.sql</code>， 其内容如下：</p>

<pre><code>-- // create blog table
-- Migration SQL that makes the change goes here.

-- //@UNDO
-- SQL to undo the change goes here.
</code></pre>

<p>文件内容主要包含<code>create table</code>和<code>undo</code>，分别表示表的创建和删除命令：</p>

<pre><code>-- // create blog table
-- Migration SQL that makes the change goes here.
CREATE TABLE BLOG (
  ID INT,
  NAME VARCHAR(255),
  PRIMARY KEY(ID)
);
-- //@UNDO
-- SQL to undo the change goes here.
DROP TABLE BLOG;
</code></pre>

<p>已经将表结构写在了sql里面，那么怎样执行这个脚本，从而改变数据库中的表结构呢。首先我们需要了解当前数据库的状态。</p>

<h4>Migrate status</h4>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704    ...pending...    create changelog
20140817132705    ...pending...    first migration
20140817142201    ...pending...    create blog table

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 20:21:06 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<p>由于我们没有运行过migration, 所以所有migration脚本都处于<code>pending</code>状态，包括changelog table本身。当我们运行<code>migrate up</code>命令之后，脚本的状态便会发生相应的改变。</p>

<h4>Migrate up, down</h4>

<p>为了显示更多up, down以及后续的version操作，再次新建一个数据表<code>migrate new 'create table author'</code>此时的author和blog应该都处于pending状态。</p>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704    ...pending...    create changelog
20140817132705    ...pending...    first migration
20140817142201    ...pending...    create blog table
20140817154537    ...pending...    create table author

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:21:49 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate up
------------------------------------------------------------------------
-- MyBatis Migrations - up
------------------------------------------------------------------------
========== Applying: 20140817132704_create_changelog.sql =======================
--  Create Changelog
-- Default DDL for changelog table that will keep
-- a record of the migrations that have been run.
-- You can modify this to suit your database before
-- running your first migration.
-- Be sure that ID and DESCRIPTION fields exist in
-- BigInteger and String compatible fields respectively.
CREATE TABLE CHANGELOG (
ID NUMERIC(20,0) NOT NULL,
APPLIED_AT VARCHAR(25) NOT NULL,
DESCRIPTION VARCHAR(255) NOT NULL
)

ALTER TABLE CHANGELOG
ADD CONSTRAINT PK_CHANGELOG
PRIMARY KEY (id)


========== Applying: 20140817132705_first_migration.sql ========================
--  First migration.
-- Migration SQL that makes the change goes here.

========== Applying: 20140817142201_create_blog_table.sql ======================
--  create blog table
-- Migration SQL that makes the change goes here.

========== Applying: 20140817154537_create_table_author.sql ====================
--  create table author
-- Migration SQL that makes the change goes here.

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:22:17 GMT+05:30 2014
-- Final Memory: 13M/493M
------------------------------------------------------------------------
</code></pre>

<p><code>migrate up</code>命令会将所有的sql进行up,所有处于pending状态的SQL脚本都会进行执行。对应的<code>migrate down</code>则是undo sql脚本的执行，也就是执行sql中用户自定义的UNDO部分。不同的是<code>migrate down</code>只能回退一步，所以回退到初始状态则需要运行多次的<code>migrate down</code>操作。当然也可以直接指定参数，本例中我们指定回退4步<code>migrate down 4</code>:</p>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704 2014-08-17 21:22:17 create changelog
20140817132705 2014-08-17 21:22:17 first migration
20140817142201 2014-08-17 21:22:17 create blog table
20140817154537 2014-08-17 21:26:01 create table author

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:26:07 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate down 4
------------------------------------------------------------------------
-- MyBatis Migrations - down
------------------------------------------------------------------------
========== Undoing: 20140817154537_create_table_author.sql =====================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817142201_create_blog_table.sql =======================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817132705_first_migration.sql =========================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817132704_create_changelog.sql ========================
-- @UNDO
DROP TABLE CHANGELOG

Changelog doesn't exist. No further migrations will be undone (normal for the last migration).

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:29:53 GMT+05:30 2014
-- Final Memory: 14M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704    ...pending...    create changelog
20140817132705    ...pending...    first migration
20140817142201    ...pending...    create blog table
20140817154537    ...pending...    create table author

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 21:30:09 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<h4>Migrate verison</h4>

<p>回滚到指定的version状态，后面需要加上version的ID： <code>migrate verison 20140817132705</code></p>

<pre><code>minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704 2014-08-17 22:23:05 create changelog
20140817132705 2014-08-17 22:23:25 first migration
20140817142201 2014-08-17 22:23:25 create blog table
20140817154537 2014-08-17 22:23:25 create table author
20140817164341 2014-08-17 22:23:25 create table book

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 22:23:36 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate version 20140817142201
------------------------------------------------------------------------
-- MyBatis Migrations - version
------------------------------------------------------------------------
Downgrading to: 20140817142201
========== Undoing: 20140817164341_create_table_book.sql =======================
-- @UNDO
-- SQL to undo the change goes here.

========== Undoing: 20140817154537_create_table_author.sql =====================
-- @UNDO
-- SQL to undo the change goes here.


------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 22:23:43 GMT+05:30 2014
-- Final Memory: 13M/493M
------------------------------------------------------------------------
minggong:migration-test minggong$ migrate status
------------------------------------------------------------------------
-- MyBatis Migrations - status
------------------------------------------------------------------------
ID             Applied At          Description
================================================================================
20140817132704 2014-08-17 22:23:05 create changelog
20140817132705 2014-08-17 22:23:25 first migration
20140817142201 2014-08-17 22:23:25 create blog table
20140817154537    ...pending...    create table author
20140817164341    ...pending...    create table book

------------------------------------------------------------------------
-- MyBatis Migrations SUCCESS
-- Total time: 0s
-- Finished at: Sun Aug 17 22:23:47 GMT+05:30 2014
-- Final Memory: 11M/493M
------------------------------------------------------------------------
</code></pre>

<h4>Migrate pending</h4>

<p><code>migrate up</code> 命令只能向上upgrade，而在多人合作中如果migration sql脚本先创建但是后提交，同步到一台服务器上就有可能出现中间某个文件处于<code>pending</code>状态，这时使用<code>migrate up</code>是不能使其执行的。</p>

<p>这种情况如果这个sql基本和其他sql无依赖时，可以直接使用<code>migrate up</code>使处于pending状态的脚本被执行。官方解释这是不推荐的做法。另外一种做法是使用<code>migrate version [ID]</code>回到pending版本之前的状态，然后再次执行<code>migrate up</code>，从而完成整个执行操作，这种做法是推荐的比较安全的。</p>

<h4>Migrate script</h4>

<p>使用方法为<code>migrate script &lt;V1&gt; &lt;V2&gt; &gt; file.sql</code></p>

<p><code>migrate 20140817142201 20140817164341 &gt; do.sql</code>这个do脚本的执行将会应用上述两个状态的执行author和book。</p>

<p><code>migrate 20140817164341 20140817142201 &gt; undo.sql</code> 这个将undo脚本执行可以回滚V1和V2之间的即上述状态。</p>

<p>如果要在首尾之间回滚，则可以用 0 代替原始版本ID</p>

<p><code>migrate 0 20140817164341 &gt; do.sql</code></p>

<p><code>migrate 20140817164341 0 &gt; undo.sql</code></p>

<hr />

<p>但是对于上述的script脚本直接使用 migrate do.sql执行却一直报错！官方也没有对单个的脚本执行有说明。后续弄清楚了再补充上来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fontello 使用心得]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/03/19/fontello-shi-yong-xin-de/"/>
    <updated>2014-03-19T08:19:49+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/03/19/fontello-shi-yong-xin-de</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p>Fontello icon generator <a href="http://fontello.com/">http://fontello.com/</a>，fontello上可以选择各种各样的常见的icon，所有的icon都是字体格式，所以对于icon的大小和颜色你都可以像使用字体一样方便的使用他们。</p>

<hr />

<p>最近尝试在构建一个rails应用，于是自然而然就想到用之前项目中的fontello图标，对于Developer来说，有了fontello和rails我开始不需要担心街面上图标或者按钮的样式问题了。</p>

<!-- more -->


<p>在fontello中选择所需的图标后点击下载即可进行下载一个zip压缩包，解压缩之后里面就会包含我们所需的几个文件。将这几个文件放置到我们project的assets下面，即可直接使用。</p>

<h2>用法</h2>

<hr />

<ol>
<li>Download: 选择图标后直接选择下载；</li>
<li>Move: 将font文件夹中的所有文件和config.json移到vendor/assets/fonts文件夹中，将fontello.css移动到app/assets/stylesheets/fontello.css, 并在需要使用的相关页面中import此css文件；</li>
<li>Usage: 在html页面中直接使用 <span class="icon icon-plus"></span>即可使用到名为icon-plus的图标；</li>
<li>Update: 对于图标的下载我们一般在需要图标时才会下载，于是我们非首次下载时就需要update，在fontello网站上先import选择config.json，然后再搜索我们想要的图标，再次进行下载，将下载好的新文件覆盖之前的文件，update操作便完成了；</li>
</ol>


<h2>Don&rsquo;t repeat yourself</h2>

<hr />

<p>对于fontello这种update图标然后覆盖的模式，我曾经极度讨厌，甚至认为还不如使用font awesome进行一次性的下载好，然后直接使用就可以了，后来发现fontello的强大之处在于它集合了许多种图标资源，所以上面的图标库更丰富，如果一次性下载估计也是件挺浪费资源的事情，因为我们只会用到少量的图标。所以我们不得不需要什么图标就去下载然后覆盖更新～～</p>

<p>但是作为一名开发人员，这种重复的工作如果让我们自己做，就有点太浪费了。所以决定把这些琐碎重复的事情交给计算机做。也就是每次我下载下来，我只要运行脚本，这些文件就会自动复制到我所需的工程中。于是使用shell命令解决这个问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>unzip -u $1
</span><span class='line'>if [ ! -d $2/vendor/assets/fonts ]; then
</span><span class='line'>  mkdir $2/vendor/assets/fonts
</span><span class='line'>fi 
</span><span class='line'>cp -r $1/font/fontello.eot $2/vendor/assets/fonts
</span><span class='line'>cp -r $1/font/fontello.svg $2/vendor/assets/fonts
</span><span class='line'>cp -r $1/font/fontello.ttf $2/vendor/assets/fonts
</span><span class='line'>cp -r $1/font/fontello.woff $2/vendor/assets/fonts
</span><span class='line'>
</span><span class='line'>cp -f $1/config.json $2/vendor/assets/fonts/config.json
</span><span class='line'>
</span><span class='line'>cp -f $1/css/fontello.css $2/app/assets/stylesheets/fontello.less
</span><span class='line'>echo 'copy fontello successfully'</span></code></pre></td></tr></table></div></figure>


<p>文件名为fontello.sh， 首先为其添加可执行权限 <code>chmod +x fontello.sh</code>， 如果下载下来的新的包名为fontello-1234.zip，那么只要执行命令<code>./fontello.sh fontello-1234 ~/project/helloworld</code></p>

<p>永远不要你自己做重复的事情，如果真有这些事情请让计算机自行实现一切会轻松很多！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[订餐网之死]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/03/08/ding-can-wang-zhi-si/"/>
    <updated>2014-03-08T18:37:11+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/03/08/ding-can-wang-zhi-si</id>
    <content type="html"><![CDATA[<h3>起源</h3>

<p>订餐网真名不详，只是为了表意故意称之为<strong>订餐网</strong>。都说文以表意，于是订餐网的本身就是为了订餐外卖做准备，这还是我刚在TW实习为了学习组内的技术栈也为了实现一点小想法进行的一次尝试。尝试的初衷很简单，为了学习。动力很简单，学好一门技术，做个web站点出来。而终点就是能够使之成为我的毕设，也作为自己对<em>创业</em>的一点尝试。在buddy的鼓励下，我真的开始在做的&hellip;也真的想把这个产品做好了。</p>

<!--more-->


<h3>愿景</h3>

<p>暂时请允许我称之为产品，在当前这个时期，各类互联网产品充斥与web,特别是移动设备上，也催生了无数个前仆后继的创业公司，也有了所谓的天使投资，当然做得好的就能够在几轮融资之后建立稳定的公司，有着一个完整专业的团队来运营。而我目前做的这个东西我甚至连beta版都还没出来，我们就有过许多幻想。基于核心城市核心商圈和以大学为主的地理位置为中心，进行外卖订餐。甚至幻想着能够建立属于我们自己的物流配送团队，而配送员将由兼职的学生担任，建立配送中心，最终逐渐覆盖全国，进而产生相应的价值。</p>

<h3>终结</h3>

<p>做这个项目的同时自己最担心的就是产品做好之后的推广，而做的过程中也发现自己不擅长的就是UX和UI，一些自以为很好的界面在内行人眼里看来却的确是极度的缺少交互性。于是更加坚定了之前的项目，代码不是全部，一坨稀烂的代码更是什么也不是。我只是在大师们搭建好的框架上写了几行毫无技术含量的代码，这就是事实。尽管有这样的事实，我还是认为凭我一人之力，可以handle所有的事情，于是有时也会心血来潮去学习PS上制作ICON&hellip;</p>

<p>也许我喜欢的不是这个产品的idea本身，而是想证明自己能够独立完成一个项目，当然也有一些把这个产品做成毕业论文的想法。可是事实终究是事实，当我们真的抛开这些时，如果我们丧失了对产品本身的热爱，那么产品也就立刻失去了应有的意义。这就是热情，失去了热情你就失去了做事情的最原始动力。</p>

<p>下午网上搜索了一下，竟然发现这种产品已经有了一个“开吃吧”，自己体验了一下，发现别人做的还不错，再次产生了一种感觉，你能够想到的别人一定想到了，别人想到了你不一定想得到。于是顿时被自己打击了一番，于是对这个原本不太坚定的产品开始有了放弃的想法。是的，放弃。我似乎放弃了很多东西，因为我自己都不能说服自己了。看了一下几年前和这个送餐类似的“美食刻”，当时在校内小有名气，后来似乎这个产品慢慢淡出人们的视野，我不了解它现在是否还存在，只知道这个曾经的产品现在真的不在了。不定因素太多，还是束之高阁吧～我的为时两个月左右的订餐网也该休息了。</p>

<p>毕业在即，论文的主题还有待确定，于是我找寻新的点子，期待new idea!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在rails集成mongodb开发应用]]></title>
    <link href="http://www.gongmingqm10.net//blog/2014/01/18/zai-railsji-cheng-mongodbkai-fa-ying-yong/"/>
    <updated>2014-01-18T16:04:48+08:00</updated>
    <id>http://www.gongmingqm10.net//blog/2014/01/18/zai-railsji-cheng-mongodbkai-fa-ying-yong</id>
    <content type="html"><![CDATA[<p>最近尝试用rails集成mongodb开发我的第一个rails应用，用IDE直接创建project之后，发现工程默认会采用sqlite数据库。于是需要自己手工进行一些数据库配置：
如果你的app已经使用IDE建立好了，需要修改的文件有 config/application.rb 和 config/environments/development.rb</p>

<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换为 =></p>

<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;action_controller/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;action_mailer/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;sprockets/railtie&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rails/test_unit/railtie&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config/environments/development.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1">#config.active_record.migration_error = :page_load</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>上面两个文件修改之后就基本把sqlite remove了。当然如果你还没有建立工程直接在命令行中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new appname --skip-active-record</span></code></pre></td></tr></table></div></figure>


<p>到这里我们的app中基本就算是干净的了。下面我们只需要在Gemfile中加入我们所需要的数据库依赖包就可以了，我这里直接加入mongoid</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.0.alpha1&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;mongoid/mongoid&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改Gemfile后，我们 bundle install 就会把相关包依赖下载下来，剩下的我们就可以直接使用mongo了。config目录下还有 database.yml 文件，查看内容应该是sqlite的数据库配置文件，我们remove之，然后新建一个属于我们自己的 mongoid.yml.</p>

<figure class='code'><figcaption><span>config/mongoid.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app_development</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost:27017</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app_test</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost:27017</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app_production</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost:27017</span>
</span></code></pre></td></tr></table></div></figure>


<p>文件新建完毕，下面我们就需要怎么使app加载这个文件。继续新建文件 config/initializers/mongoid.rb</p>

<figure class='code'><figcaption><span>config/initializers/mongoid.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="o">+</span><span class="s1">&#39;/config/mongoid.yml&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，数据库也基本配置完毕。到命令行中 rake 下面的task</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:mongoid:create_indexes</span></code></pre></td></tr></table></div></figure>


<p>开始在model中新建model ～～ rails + mongo 模式开启！</p>
]]></content>
  </entry>
  
</feed>
